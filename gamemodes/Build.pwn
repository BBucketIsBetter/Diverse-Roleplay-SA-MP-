//============================================//
//=====[ BUILD USAGE SECTION ]=====//
//============================================//
//============================================//
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	//printf("DIALOG: [%d] %s (Dialog %d, Response %d, Listitem %d, Inputtext %s)",playerid, PlayerName(playerid), dialogid, response, listitem, inputtext);
	new string[224], sendername[MAX_PLAYER_NAME];
    switch(dialogid)
	{
        case 1: // Login dialog
		{
		    if (GetPVarInt(playerid, "PlayerLogged") != 0) return true;
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid,1,DIALOG_STYLE_PASSWORD,"Server Account","Welcome back to Diverse RP, please enter your password to login.","Login", "Other");
	        if(strlen(inputtext) >= 40) {
			    SendClientMessage(playerid, COLOR_WHITE, "Password is too long (40 Chars max).");
				ShowPlayerDialog(playerid,1,DIALOG_STYLE_PASSWORD,"Server Account","Welcome back to Diverse RP, please enter your password to login.","Login", "Other");
				return true;
			}
			new query[200], input[65];
			//mysql_escape_string(inputtext, input);
			SHA256_PassHash(inputtext, HASH_KEY, input, 65);
			if(PlayerInfo[playerid][pSerialBan] == 1) {
				new banpass[65];
				GetPVarString(playerid, "BanPass", banpass, 65);
				if(strlen(banpass) > 0 && strmatch(banpass, input)) {
					SCM(playerid, COLOR_YELLOW, "______________________________________________________________________");
					SendClientMessage(playerid, COLOR_YELLOW, "[System] You are banned from Diverse Roleplay.");
					SendClientMessage(playerid, COLOR_YELLOW, "[System] Ban evasion detected.");
					SendClientMessage(playerid, COLOR_YELLOW, "[System] To appeal this ban, go to www.diverseroleplay.org");
					SCM(playerid, COLOR_YELLOW, "______________________________________________________________________");
					SetPVarInt(playerid, "Banned", 1);
					DeletePVar(playerid, "BanPass");
					PlayerInfo[playerid][pSerialBan] = 0;
					KickPlayer(playerid, "");					
				} else {
					DeletePVar(playerid, "BanPass");
					PlayerInfo[playerid][pSerialBan] = 0;
				}
			}
			format(query, sizeof(query), "SELECT * FROM accounts WHERE Name = '%s' AND Pass = '%s'", PlayerName(playerid), input);
     		mysql_function_query(handlesql, query, true, "LogUserIn", "i", playerid);
			format(PlayerInfo[playerid][pPass],65,"%s",input); //Sloppy, but it'll have to do since it won't retrieve the pass...
		}
		case 2: // Register dialog
		{
			// Registering password
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,2,DIALOG_STYLE_PASSWORD,"Server Account","There is no existing account using your playername, please create a new account!\nPlease enter your desired password.","Register", "");
			if(strlen(inputtext) < 6)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Password is too short (5 Chars min.).");
				ShowPlayerDialog(playerid,2,DIALOG_STYLE_PASSWORD,"Server Account","There is no existing account using your playername, please create a new account!\nPlease enter your desired password.","Register", "");
				return 1;
			}
			if(strlen(inputtext) >= 40)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Password is too long (40 Chars max).");
				ShowPlayerDialog(playerid,2,DIALOG_STYLE_PASSWORD,"Server Account","There is no existing account using your playername, please create a new account!\nPlease enter your desired password.","Register", "");
				return 1;
			}
			if(PlayerInfo[playerid][pSerialBan] == 1) {
				new banpass[65], input[65];
				SHA256_PassHash(inputtext, HASH_KEY, input, 65);
				GetPVarString(playerid, "BanPass", banpass, 65);
				if(strlen(banpass) > 0 && strmatch(banpass, input)) {
					SCM(playerid, COLOR_YELLOW, "______________________________________________________________________");
					SendClientMessage(playerid, COLOR_YELLOW, "[System] You are banned from Diverse Roleplay.");
					SendClientMessage(playerid, COLOR_YELLOW, "[System] Ban evasion detected.");
					SendClientMessage(playerid, COLOR_YELLOW, "[System] To appeal this ban, go to www.diverseroleplay.org");
					SCM(playerid, COLOR_YELLOW, "______________________________________________________________________");
					SetPVarInt(playerid, "Banned", 1);
					DeletePVar(playerid, "BanPass");
					PlayerInfo[playerid][pSerialBan] = 0;
					KickPlayer(playerid, "");					
				} else {
					DeletePVar(playerid, "BanPass");
					PlayerInfo[playerid][pSerialBan] = 0;
				}
			}
			SetPVarInt(playerid, "Approve", 0);
			SetPVarString(playerid, "TempPass", inputtext);			
			strmid(PlayerInfo[playerid][pOOC], "None", 0, strlen("None"), 255);
			strmid(PlayerInfo[playerid][pMetagame], "None", 0, strlen("None"), 255);
			strmid(PlayerInfo[playerid][pRevenge], "None", 0, strlen("None"), 255);
			strmid(PlayerInfo[playerid][pRoleplay], "None", 0, strlen("None"), 255);
			strmid(PlayerInfo[playerid][pPowergame], "None", 0, strlen("None"), 255);
			strmid(PlayerInfo[playerid][pQuest1], "None", 0, strlen("None"), 255);
			strmid(PlayerInfo[playerid][pQuest2], "None", 0, strlen("None"), 255);
			strmid(PlayerInfo[playerid][pQuest3], "None", 0, strlen("None"), 255);
			strmid(PlayerInfo[playerid][pQuest4], "None", 0, strlen("None"), 255);
			strmid(PlayerInfo[playerid][pQuest5], "None", 0, strlen("None"), 255);
			SetPVarInt(playerid, "TutQuestAmount", 0);
			return CallRemoteFunction("TutorialAnswers","i",playerid);
		}
		case 3: // Rental Agreement Dialog
		{
		    switch(response)
		    {
		        case 1:
		        {
		            new result[1000];
		            for(new i = 0; i < sizeof(gRentalIDs); i++) {
			            if(i == 0) { format(result, 1000, "%s", VehicleName[gRentalIDs[i][0]-400]); }
			            else { format(result, 1000, "%s\n%s", result, VehicleName[gRentalIDs[i][0]-400]); }
			        }
					ShowPlayerDialog(playerid, 73,DIALOG_STYLE_LIST,"Rental Options", result, "Select", "");
		        }
		    }
		}
		case 4: // Job Options Dialog
		{
		    if(!response) return true;
		    new foundid = -1;
		    for(new jb = 0; jb < MAX_JOBS; jb++) {
	            if(JobInfo[jb][jID] >= 1)
	            {
	                if(IsPlayerInRangeOfPoint(playerid, 2.0, JobInfo[jb][jX], JobInfo[jb][jY], JobInfo[jb][jZ])) {
					    foundid=jb;
						break;
	                }
	            }
	        }
	        if(foundid == -1) return true;
	        if(GetPVarInt(playerid, "Job") != foundid+1) return true;
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are already on a route!");
	                if(GetPVarInt(playerid, "JobReduce") >= 1 && GetPVarInt(playerid, "MonthDon") == 0)
	                {
	                    format(string, sizeof(string), "You must wait (%d) seconds before starting another route!", GetPVarInt(playerid, "JobReduce"));
					    SCM(playerid, COLOR_LIGHTRED, string);
					    return true;
					}
	                new veh;
					veh = CreateVehicle(JobInfo[foundid][jVehicleID], JobInfo[foundid][jVX], JobInfo[foundid][jVY], JobInfo[foundid][jVZ], JobInfo[foundid][jVA], -1, -1, -1);
					Iter_Add(Vehicle, veh);
					VehicleInfo[veh][vFuel]=100, VehicleInfo[veh][vEngine]=1;
    				VehicleInfo[veh][vWindows]=0, VehicleInfo[veh][vID]=0;
    				VehicleInfo[veh][vLights]=0, VehicleInfo[veh][vCreated]=1;
					VehicleInfo[veh][vType] = VEHICLE_JOB, VehicleInfo[veh][vJob]=GetPVarInt(playerid, "Job");
					VehicleInfo[veh][vLights] = 0, VehicleInfo[veh][vLock] = 0;
	   				new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(veh,engine,lights,alarm,0,bonnet,boot,objective);
					SetVehicleNumberPlate(veh, "JOB");
    				SetVehicleToRespawn(veh);
					SetPVarInt(playerid, "RouteVeh", veh);
					foreach(new i : Player) { SetVehicleParamsForPlayer(veh, i, 0, 1); }
					TogglePlayerControllableEx(playerid, false);
					SetTimerEx("ForceInVeh", 1000, false, "ifff", playerid, veh);
					TogglePlayerAllDynamicCPs(playerid, false);
	            }
	            case 1:
	            {
	                if(GetPVarInt(playerid, "OnRoute") == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not on a route!");
	                DeletePVar(playerid, "OnRoute");
	                DeletePVar(playerid, "RouteOT");
	                if(GetPVarInt(playerid, "RouteVeh") >= 1) { DespawnVehicle(GetPVarInt(playerid, "RouteVeh")); }
	                DeletePVar(playerid, "RouteVeh");
	                DeletePVar(playerid, "PizzaTime");
	                DeletePVar(playerid, "PizzaTimeEx");
	                SendClientMessage(playerid, COLOR_WHITE, "Route ended!");
	                DisablePlayerCheckpoint(playerid);
	                TogglePlayerAllDynamicCPs(playerid, true);
	            }
	            case 2:
	            {
	                if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently on a route!");
	                SetPVarInt(playerid, "Job", 0);
	                SendClientMessage(playerid, COLOR_WHITE, "You are now unemployed!");
	            }
	        }
		}
		case 5: // Accept Job Dialog
		{
		    if(!response) return true;
		    new foundid = -1;
		    for(new jb = 0; jb < MAX_JOBS; jb++)
	        {
	            if(JobInfo[jb][jID] >= 1)
	            {
	                if(IsPlayerInRangeOfPoint(playerid, 2.0, JobInfo[jb][jX], JobInfo[jb][jY], JobInfo[jb][jZ]))
					{
					    foundid=jb;
						break;
	                }
	            }
	        }
	        if(foundid == -1) return true;
	        if(GetPVarInt(playerid, "Job") != 0) return true;
	        format(string, sizeof(string), "Congratulations you are now a %s!", JobInfo[foundid][jName]);
	        SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(playerid, COLOR_WHITE, "To navigate your job, press ~k~~GROUP_CONTROL_BWD~ at the job icon.");
			SetPVarInt(playerid, "Job", foundid+1);
		}
		case 6: // DMV LICENSE TEST
		{
		    if(!response) return true;
		    if(GetPVarInt(playerid, "ConnectTime") >= 8) GivePlayerMoneyEx(playerid, -150);
		    SetPVarInt(playerid, "TakeTest", 1);
		    new veh, rand = random(sizeof(gRentalIDs));
			veh = CreateVehicle(gRentalIDs[rand][0], DMVSpot[0][3], DMVSpot[0][4], DMVSpot[0][5], DMVSpot[0][6], 6, 6, -1);
			Iter_Add(Vehicle, veh);
			VehicleInfo[veh][vFuel]=100, VehicleInfo[veh][vEngine]=1;
    		VehicleInfo[veh][vWindows]=0, VehicleInfo[veh][vID]=0;
    		VehicleInfo[veh][vLights]=0, VehicleInfo[veh][vCreated]=1;
			VehicleInfo[veh][vType] = VEHICLE_DMV, VehicleInfo[veh][vJob]=0;

			SetVehicleNumberPlate(veh, "DMV");
    		SetVehicleToRespawn(veh);
			SetPVarInt(playerid, "TestVeh", veh);
			foreach(new i : Player) { SetVehicleParamsForPlayer(veh, i, 0, 1); }
			TogglePlayerControllableEx(playerid, false);
			SetTimerEx("ForceInVeh", 1000, false, "ifff", playerid, veh);
			SetPlayerRaceCheckpoint(playerid, 0, DMVRoute[0][0], DMVRoute[0][1], DMVRoute[0][2], DMVRoute[1][0], DMVRoute[1][1], DMVRoute[1][2], 5.0);
			SendClientMessage(playerid,COLOR_LIGHTBLUE," ");
			SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Los Santos Department Of Motor Vehicles");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Once you enter the checkpoint on your GPS the test will start,");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Keep your vehicle under 95 KPH and make sure to not go too quick or too slow.");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Also make sure your vehicle is not damaged and is in good shape,");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Judging by your status you are capable of earning a (Gold, Silver, Bronze) ribbon.");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
		}
		//==========//
		case 7: // STORE DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 1), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: $%d~n~Cash: $%d - Bank: $%d", StoreItems[listitem][1], GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"));
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 8: // Burger DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 2), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: $%d~n~Cash: $%d - Bank: $%d", BurgerItems[listitem][1], GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"));
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 9: // Pizza DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 3), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: $%d~n~Cash: $%d - Bank: $%d", PizzaItems[listitem][1], GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"));
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 10: // Cluck DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 4), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: $%d~n~Cash: $%d - Bank: $%d", CluckItems[listitem][1], GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"));
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 11:
	    {
	        switch(response)
	        {
	            case 1:
	            {
	                switch(listitem)
	                {
	                    case 0: SendBankDialog(playerid, 1);
	                    case 1: SendBankDialog(playerid, 2);
	                    case 2:
	                    {
	                        if(GetPVarInt(playerid, "CheckEarn") <= 0)
	                        {
	                            SetPVarInt(playerid, "OCC", 0);
							    return SendClientMessage(playerid,COLOR_WHITE,"You have no checks to cash.");
							}
							if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
	                        format(sendername, sizeof(sendername), "%s", PlayerName(playerid));
		                    GiveNameSpace(sendername);
		                    format(string, sizeof(string), "* Bank Clerk hands the $%d to %s.", GetPVarInt(playerid, "CheckEarn"), sendername);
	                        SendClientMessage(playerid,COLOR_PURPLE,string);
	                        GivePlayerMoneyEx(playerid,GetPVarInt(playerid, "CheckEarn"));
	                        DeletePVar(playerid,"CheckEarn");
	                        OnPlayerDataSave(playerid);
	                    }
	                }
	            }
	        }
	    }
        case 12: // Bank Deposit dialog
	    {
			switch(response)
	        {
	            case 0:
	            {
	                format(string, sizeof(string), "Bank Account: $%d", GetPVarInt(playerid, "Bank"));
			        ShowPlayerDialog(playerid,11,DIALOG_STYLE_LIST,string,"{33FF66}Deposit\n{33FF66}Withdraw", "Continue", "Exit");
	            }
	            case 1:
	            {
	                if(!strlen(inputtext)) return SendBankDialog(playerid, 1);
	                if(strlen(inputtext) >= 7) return SendBankDialog(playerid, 1);
	                new amount = strval(inputtext);
	                if(amount <= 0) return SendBankDialog(playerid, 1);
	                if(amount >= 99999999) return SendBankDialog(playerid, 1);
	                if(GetPlayerMoneyEx(playerid) >= amount)
	                {
	                    PlayerPlaySound(playerid,1055, 0.0, 0.0, 0.0);
			            GivePlayerMoneyEx(playerid,-amount);
			            new current = GetPVarInt(playerid, "Bank");
			            SetPVarInt(playerid, "Bank", amount+GetPVarInt(playerid, "Bank"));
		                SendClientMessage(playerid, COLOR_GREEN," ");
		                SendClientMessage(playerid,COLOR_WHITE,":Bank Statement:");
		                format(string, sizeof(string), "Deposit: $%d", amount);
			            SendClientMessage(playerid, COLOR_GREEN, string);
                        format(string, sizeof(string), "Old Balance: $%d", current);
			            SendClientMessage(playerid, COLOR_GREEN, string);
			            format(string, sizeof(string), "New Balance: $%d", GetPVarInt(playerid, "Bank"));
			            SendClientMessage(playerid, COLOR_GREEN, string);
		                SetPVarInt(playerid, "OCC", 0);
	                }
	                else SendBankDialog(playerid, 1);
	            }
	        }
	    }
	    case 13: // BANK Withdraw dialog
	    {
	        switch(response)
	        {
	            case 0:
	            {
	                format(string, sizeof(string), "Bank Account: $%d", GetPVarInt(playerid, "Bank"));
			        ShowPlayerDialog(playerid,11,DIALOG_STYLE_LIST,string,"{33FF66}Deposit\n{33FF66}Withdraw", "Continue", "Exit");
	            }
	            case 1:
	            {
	                if(!strlen(inputtext)) return SendBankDialog(playerid, 2);
	                if(strlen(inputtext) >= 7) return SendBankDialog(playerid, 2);
	                new amount = strval(inputtext);
	                if(amount <= 0) return SendBankDialog(playerid, 2);
	                if(amount >= 99999999) return SendBankDialog(playerid, 2);
	                if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
	                if(GetPVarInt(playerid, "Bank") >= amount)
	                {
	                    PlayerPlaySound(playerid,1055, 0.0, 0.0, 0.0);
				        GivePlayerMoneyEx(playerid,amount);
				        new current = GetPVarInt(playerid, "Bank");
				        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")-amount);
				        SendClientMessage(playerid, COLOR_GREEN," ");
		                SendClientMessage(playerid,COLOR_WHITE,":Bank Statement:");
				        format(string, sizeof(string), "Withdraw: $%d", amount);
				        SendClientMessage(playerid, COLOR_GREEN, string);
				        format(string, sizeof(string), "Old Balance: $%d", current);
				        SendClientMessage(playerid, COLOR_GREEN, string);
				        format(string, sizeof(string), "New Balance: $%d", GetPVarInt(playerid, "Bank"));
				        SendClientMessage(playerid, COLOR_GREEN, string);
		                SetPVarInt(playerid, "OCC", 0);
	                }
	                else SendBankDialog(playerid, 2);
	            }
	        }
	    }
	    case 14: // ATM Withdraw dialog
	    {
	        switch(response)
	        {
	            case 1:
	            {
	                if(!strlen(inputtext)) return SendBankDialog(playerid, 3);
	                if(strlen(inputtext) >= 7) return SendBankDialog(playerid, 3);
	                new amount = strval(inputtext);
	                if(amount <= 0) return SendBankDialog(playerid, 3);
	                if(amount >= 99999999) return SendBankDialog(playerid, 3);
	                if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
	                if(GetPVarInt(playerid, "Bank") >= amount)
	                {
	                    PlayerPlaySound(playerid,1055, 0.0, 0.0, 0.0);
				        GivePlayerMoneyEx(playerid,amount);
				        new current = GetPVarInt(playerid, "Bank");
				        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")-amount);
				        SendClientMessage(playerid, COLOR_GREEN," ");
		                SendClientMessage(playerid,COLOR_WHITE,":Bank Statement:");
				        format(string, sizeof(string), "Withdraw: $%d", amount);
				        SendClientMessage(playerid, COLOR_GREEN, string);
				        format(string, sizeof(string), "Old Balance: $%d", current);
				        SendClientMessage(playerid, COLOR_GREEN, string);
				        format(string, sizeof(string), "New Balance: $%d", GetPVarInt(playerid, "Bank"));
				        SendClientMessage(playerid, COLOR_GREEN, string);
		                SetPVarInt(playerid, "OCC", 0);
	                }
	                else SendBankDialog(playerid, 3);
	            }
	        }
	    }
	    case 15: // Gas Liters
	    {
	        if(!response) return true;
	        if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
	        if(!strlen(inputtext)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid liter amount!");
	        if(strlen(inputtext) >= 7) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid liter amount!");
	        new amount = strval(inputtext), amountcheck, price;
	        if(amount <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid liter amount!");
	        if(amount >= 101) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid liter amount!");
	        amountcheck = amount + VehicleInfo[GetPlayerVehicleID(playerid)][vFuel];
	        if(amountcheck >= 101) return SendClientMessage(playerid, COLOR_LIGHTRED, "Your car can't hold this much more fuel!");
			new gasType = GasType(GetVehicleModel(GetPlayerVehicleID(playerid)));
			price = amount*GasPrice[gasType];
		    if(GetPVarInt(playerid, "DonateRank") >= 2) price = 0;
		    if(GetPVarInt(playerid, "Member") == 1 || GetPVarInt(playerid, "Member") == 2 || GetPVarInt(playerid, "Member") == 8) price = 0;
	        if(GetPlayerMoneyEx(playerid) >= price)
	        {
				TogglePlayerControllable(playerid, false);
				ProgressBar(playerid, "Refueling car...", 1*(amount/2), 0);
				SetTimerEx("DoFillUp", 1000*(amount/2), false, "iii", playerid, amount, price);
	        }
	        else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
	    }
	    //==========//
	    case 17:
	    {
	        if(!response) return true;
	        new str[4848], tit[128];
	        format(tit, 128, "%s", HelpMenu[listitem][0]);
	        switch(listitem)
	        {
	            case 0:
	            {
	                for(new i = 0; i < sizeof(GenHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", GenHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, GenHelp[i][0]); }
	                }
	            }
	            case 1:
	            {
	                for(new i = 0; i < sizeof(ConHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", ConHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, ConHelp[i][0]); }
	                }
	            }
	            case 2:
	            {
	                for(new i = 0; i < sizeof(AnimHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", AnimHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, AnimHelp[i][0]); }
	                }
	            }
	            case 3:
	            {
	                for(new i = 0; i < sizeof(VehHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", VehHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, VehHelp[i][0]); }
	                }
	            }
	            case 4:
	            {
	                for(new i = 0; i < sizeof(HouseHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", HouseHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, HouseHelp[i][0]); }
	                }
	            }
	            case 5:
	            {
	                for(new i = 0; i < sizeof(BizzHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", BizzHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, BizzHelp[i][0]); }
					}
	            }
	            case 6:
	            {
	                for(new i = 0; i < sizeof(BasketHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", BasketHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, BasketHelp[i][0]); }
					}
	            }
	            case 7:
	            {
	                for(new i = 0; i < sizeof(FactHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", FactHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, FactHelp[i][0]); }
	                }
	            }
	            case 8:
	            {
	                if(GetPVarInt(playerid, "Member") != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not a police officer!");
	                for(new i = 0; i < sizeof(LSPDHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", LSPDHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, LSPDHelp[i][0]); }
	                }
	            }
	            case 9:
	            {
	                if(GetPVarInt(playerid, "Member") != 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not a member of the LSFD!");
	                for(new i = 0; i < sizeof(LSFDHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", LSFDHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, LSFDHelp[i][0]); }
	                }
	            }
	            case 10:
	            {
	                if(GetPVarInt(playerid, "Member") != 4 && GetPVarInt(playerid, "Member") != 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in San News or RLS!");
	                for(new i = 0; i < sizeof(NewsHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", NewsHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, NewsHelp[i][0]); }
	                }
	            }
				case 11:
				{
					if(GetPVarInt(playerid, "Reg") < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not a registration moderator!");
					for(new i = 0; i < sizeof(RegiHelp); i++)
					{
						if(i == 0) { format(str, sizeof(str), "%s", RegiHelp[i][0]); }
						else { format(str, sizeof(str), "%s\n%s", str, RegiHelp[i][0]); }
					}
				}
	            case 12:
	            {
	                if(GetPVarInt(playerid, "Admin") == 0 && GetPVarInt(playerid, "Helper") == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not an admin!");
	                for(new i = 0; i < sizeof(StaffHelp); i++)
	                {
	                    if(i == 0) { format(str, sizeof(str), "%s", StaffHelp[i][0]); }
	                    else { format(str, sizeof(str), "%s\n%s", str, StaffHelp[i][0]); }
	                }
	            }
	            case 13:
	            {
	                if(GetPVarInt(playerid, "Admin") == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not an administrator!");
	                new count;
	                for(new i = 1; i <= 10; i++) {
	                	count = 0;
	                	if(i == 1) {
	                	    format(str, sizeof(str), "{FFFFFF}Commands for {CD5C5C}Level %i {FFFFFF}Administrators:{a9c4e4}\n", i);
	                	} else {
	                    	format(str, sizeof(str), "%s\n\n{FFFFFF}Commands for {CD5C5C}Level %i {FFFFFF}Administrators:{a9c4e4}\n", str, i);
						}				
		                for(new j = 0; j < sizeof(AdminCmds); j++) {
							if(AdminCmds[j][acRank] == i) {
							    count++;
							    if(count % 10 == 0) {
							        format(str, sizeof(str), "%s\n/%s", str, AdminCmds[j][acCmd]);
							    } else {
							        if(count % 10 != 0 && count != 1) {
										format(str, sizeof(str), "%s, /%s", str, AdminCmds[j][acCmd]);
									} else {
									    format(str, sizeof(str), "%s/%s", str, AdminCmds[j][acCmd]);
									}
								}
							}
		                }               
		                if(count == 0) { format(str, sizeof(str), "%sNone.", str); }
					}
	            }
			}
			ShowPlayerDialog(playerid, 18, DIALOG_STYLE_MSGBOX, tit, str, "Go Back", "");
	    }
	    case 18:
	    {
	        if(!response) return true;
	        cmd_help(playerid, "");
	    }
	    case 19: // Fightstyle
	    {
	        switch(response)
	        {
	            case 1: // Selecting
	            {
					switch(listitem)
					{
					    case 0: LearnFightstyle(playerid,50,FIGHT_STYLE_NORMAL,"Normal");
					    case 1: LearnFightstyle(playerid,500,FIGHT_STYLE_BOXING,"Boxing");
					    case 2: LearnFightstyle(playerid,3000,FIGHT_STYLE_KUNGFU,"KungFu");
					    case 3:
						{
							if(GetPVarInt(playerid, "ConnectTime") >= 250)
							{
								LearnFightstyle(playerid,6000,FIGHT_STYLE_KNEEHEAD,"KneeHead");
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "You need 250+ hours played to purchase this fight style!");
						}
					    case 4: LearnFightstyle(playerid,8000,FIGHT_STYLE_GRABKICK,"GrabKick");
					    case 5:
						{
							if(GetPVarInt(playerid, "ConnectTime") >= 250)
							{
	 							LearnFightstyle(playerid,10000,FIGHT_STYLE_ELBOW,"Elbow Attack");
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "You need 250+ hours played to purchase this fight style!");
						}
					}
	            }
	        }
	    }
	    //==========//
        case 20: // AMMU DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 5), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: $%d | Cash: $%d", AmmuItems[listitem][1], GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"));
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 21:
	    {
			new id = 18645;
	        switch(listitem)
	        {
	            case 0: id = 18645;
	            case 1: id = 18976;
	            case 2: id = 18977;
	            case 3: id = 18978;
	            case 4: id = 18979;
	        }
	        switch(GetPlayerSkin(playerid))
	        {
	            #define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH1, id, 2, (%0), (%1), (%2), (%3), (%4), (%5));
	            case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.0, 0.0, 88.0, 75.0, 0.0}
	            case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.0, 0.0, 88.0, 77.0, 0.0}
	            case 7, 10: SPAO{0.090000, 0.019999, 0.0, 88.0, 90.0, 0.0}
	            case 9: SPAO{0.059999, 0.019999, 0.0, 88.0, 90.0, 0.0}
	            case 11..13: SPAO{0.070000, 0.019999, 0.0, 88.0, 90.0, 0.0}
	            case 15: SPAO{0.059999, 0.0, 0.0, 88.0, 82.0, 0.0}
	            case 17..21: SPAO{0.059999, 0.019999, 0.0, 88.0, 82.0, 0.0}
	            case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}
	            case 40: SPAO{0.050000, 0.009999, 0.0, 88.0, 82.0, 0.0}
	            case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.0, 88.0, 82.0, 0.0}
	            case 51..54: SPAO{0.100000, 0.009999, 0.0, 88.0, 82.0, 0.0}
	            case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.0, 88.0, 82.0, 0.0}
	            case 59..62: SPAO{0.079999, 0.029999, 0.0, 88.0, 82.0, 0.0}
	            case 77: SPAO{0.059999, 0.019999, 0.0, 87.0, 82.0, 0.0}
	            case 85, 88, 89: SPAO{0.070000, 0.039999, 0.0, 88.0, 82.0, 0.0}
	            case 90..97: SPAO{0.050000, 0.019999, 0.0, 88.0, 82.0, 0.0}
	            case 132: SPAO{0.0, 0.019999, 0.0, 88.0, 82.0, 0.0}
	            case 144..146: SPAO{0.090000, 0.0, 0.0, 88.0, 82.0, 0.0}
	            case 220: SPAO{0.029999, 0.019999, 0.0, 88.0, 82.0, 0.0}
	            case 223, 246: SPAO{0.070000, 0.050000, 0.0, 88.0, 82.0, 0.0}
	            case 224..245: SPAO{0.070000, 0.029999, 0.0, 88.0, 82.0, 0.0}
    	        case 294: SPAO{0.070000, 0.019999, 0.0, 91.0, 84.0, 0.0}
	            case 295: SPAO{0.050000, 0.019998, 0.0, 86.0, 82.0, 0.0}
	            case 296..298: SPAO{0.064999, 0.009999, 0.0, 88.0, 82.0, 0.0}
	            case 299: SPAO{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}
	        }
	    }
	    case 22: // BAR DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 6), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: $%d~n~Cash: $%d - Bank: $%d", BarItems[listitem][1], GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"));
		    ConfigPayment(playerid, 1, string);
		}
		//==========//
		case 25: // MOD SHOP DIALOG
		{
		    switch(GetPVarInt(playerid, "VEHSEC"))
		    {
		        case 0:
		        {
		            if(!response) // EXIT MOD SHOP
		            {
		                new id = GetPVarInt(playerid, "VEHMODID");
						new idcar = GetPlayerVehicleID(playerid);
		                DeletePVar(playerid, "VEHMOD"), DeletePVar(playerid, "VEHMODKEY");
		                SetVehiclePosEx(idcar, ModShop[id][0], ModShop[id][1], ModShop[id][2]);
		                foreach(new i : Player)
		                {
		                    if(GetPlayerVehicleID(i) == idcar)
		                    {
		                        if(i != playerid) SetPVarInt(i, "SeatIDm", GetPlayerVehicleSeat(i));
		                        TogglePlayerControllableEx(i, true);
		                        SetVehicleVirtualWorldEx(idcar, 0);
		                        SetPlayerVirtualWorld(i, 0);
		                        if(i != playerid) PutPlayerInVehicleEx(i, idcar, GetPVarInt(i, "SeatIDm"));
		                        SetCameraBehindPlayer(i);
		                    }
		                }
		                return true;
		            }
		            SetPVarInt(playerid, "VEHSEC", listitem+1);
		            CallRemoteFunction("VehMod", "i", playerid);
		        }
		        case 1: // SELECT COLOR 1
		        {
		            if(!response) // RETURN TO MENU
		            {
		                SetPVarInt(playerid, "VEHSEC", 0);
		                CallRemoteFunction("VehMod", "i", playerid);
		                return true;
		            }
		            if(!strlen(inputtext)) return CallRemoteFunction("VehMod", "i", playerid);
	                if(strlen(inputtext) >= 7) return CallRemoteFunction("VehMod", "i", playerid);
	                new amount = strval(inputtext);
	                if(amount < 0) return CallRemoteFunction("VehMod", "i", playerid);
	                if(amount > 300) return CallRemoteFunction("VehMod", "i", playerid);
	                new cost = 500;
	                if(GetPVarInt(playerid, "DonateRank") >= 2) cost = 0;
	                if(GetPlayerMoneyEx(playerid) >= cost)
	                {
	                    new key = GetPVarInt(playerid, "VEHMODKEY"), query[65];
	                        
	                    GivePlayerMoneyEx(playerid, -cost);
	                    VehicleInfo[key][vColorOne]=amount;
	                    ChangeVehicleColor(GetPlayerVehicleID(playerid), VehicleInfo[key][vColorOne], VehicleInfo[key][vColorTwo]);
	                    CallRemoteFunction("VehMod", "i", playerid);
	                    format(string, 128, "ColorID %d purchased !", amount);
	                    SCM(playerid, COLOR_WHITE, string);
						mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `ColorOne` = %i WHERE `ID` = %i;", VehicleInfo[key][vColorOne], VehicleInfo[key][vID]);
						mysql_tquery(handlesql, query);
	                }
	                else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds !"), CallRemoteFunction("VehMod", "i", playerid);
				}
		        case 2: // SELECT COLOR 2
		        {
		            if(!response) // RETURN TO MENU
		            {
		                SetPVarInt(playerid, "VEHSEC", 0);
		                CallRemoteFunction("VehMod", "i", playerid);
		                return true;
		            }
		            if(!strlen(inputtext)) return CallRemoteFunction("VehMod", "i", playerid);
	                if(strlen(inputtext) >= 7) return CallRemoteFunction("VehMod", "i", playerid);
	                new amount = strval(inputtext);
	                if(amount < 0) return CallRemoteFunction("VehMod", "i", playerid);
	                if(amount > 300) return CallRemoteFunction("VehMod", "i", playerid);
	                new cost = 500;
	                if(GetPVarInt(playerid, "DonateRank") >= 2) cost = 0;
	                if(GetPlayerMoneyEx(playerid) >= cost)
	                {
	                    new key = GetPVarInt(playerid, "VEHMODKEY"), query[65];
							
	                    GivePlayerMoneyEx(playerid, -cost);
	                    VehicleInfo[key][vColorTwo]=amount;
	                    ChangeVehicleColor(GetPlayerVehicleID(playerid), VehicleInfo[key][vColorOne], VehicleInfo[key][vColorTwo]);
	                    CallRemoteFunction("VehMod", "i", playerid);
	                    format(string, 128, "ColorID %d purchased !", amount);
	                    SCM(playerid, COLOR_WHITE, string);
	                    mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `ColorTwo` = %i WHERE `ID` = %i;", VehicleInfo[key][vColorTwo], VehicleInfo[key][vID]);
						mysql_tquery(handlesql, query);
	                }
	                else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds !"), CallRemoteFunction("VehMod", "i", playerid);
		        }
		        case 3: // SELECT WHEELS
		        {
		            if(!response) // RETURN TO MENU
		            {
		                SetPVarInt(playerid, "VEHSEC", 0);
		                CallRemoteFunction("VehMod", "i", playerid);
		                return true;
		            }
					ShowWheels(playerid);
		        }
		        case 4: // BODY MODS
		        {
		            if(!response) // RETURN TO MENU
		            {
		                SetPVarInt(playerid, "VEHSEC", 0);
		                CallRemoteFunction("VehMod", "i", playerid);
		                return true;
		            }
		            new key = GetPVarInt(playerid, "VEHMODKEY");
		            new price = 0;
		            if(GetPVarInt(playerid, "DonateRank") == 0) price = 1000;
	                if(GetPlayerMoneyEx(playerid) >= price)
	                {
	                    new comp[20], compname[20][128];
		                comp[0]=1087, compname[0]="Hydraulics";
		                switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
		                {
		                    case 534: // REMMINGTON
		                    {
		                        comp[1]=1100, compname[1]="Bullbar Chrome Grill";
		                        comp[2]=1101, compname[2]="Sideskirt Left `Chrome Flames`";
		                        comp[3]=1106, compname[3]="Sideskirt Right `Chrome Arches`";
		                        comp[4]=1122, compname[4]="Sideskirt Right `Chrome Flames`";
		                        comp[5]=1123, compname[5]="Bullbars Bullbar Chrome Bars";
		                        comp[6]=1124, compname[6]="Sideskirt Left `Chrome Arches`";
		                        comp[7]=1125, compname[7]="Bullbars Bullbar Chrome Lights";
		                        comp[8]=1126, compname[8]="Exhaust Chrome Exhaust";
		                        comp[9]=1127, compname[9]="Exhaust Slamin Exhaust";
		                        comp[10]=1178, compname[10]="Rear Bumper Slamin";
		                        comp[11]=1179, compname[11]="Front Bumper Chrome";
		                        comp[12]=1180, compname[12]="Rear Bumper Chrome";
		                        comp[13]=1185, compname[13]="Front Bumper Slamin";
		                    }
		                    case 535: // SLAMVAN
		                    {
		                        comp[1]=1109, compname[1]="Rear Bullbars Chrome";
		                        comp[2]=1110, compname[2]="Rear Bullbars Slamin";
		                        comp[3]=1111, compname[3]="Front Sign?Little Sign?";
		                        comp[4]=1112, compname[4]="Front Sign?Little Sign?";
		                        comp[5]=1113, compname[5]="Exhaust Chrome";
		                        comp[6]=1114, compname[6]="Exhaust Slamin";
		                        comp[7]=1115, compname[7]="Front Bullbars Chrome";
		                        comp[8]=1116, compname[8]="Front Bullbars Slamin";
		                        comp[9]=1117, compname[9]="Front Bumper Chrome";
		                        comp[10]=1118, compname[10]="Sideskirt Right `Chrome Trim`";
		                        comp[11]=1119, compname[11]="Sideskirt Right `Wheelcovers`";
		                        comp[12]=1120, compname[12]="Sideskirt Left `Chrome Trim`";
		                        comp[13]=1121, compname[13]="Sideskirt Left `Wheelcovers`";
						    }
		                    case 536: // BLADE
		                    {
		                        comp[1]=1103, compname[1]="Roof Covertible";
		                        comp[2]=1104, compname[2]="Exhaust Chrome";
		                        comp[3]=1105, compname[3]="Exhaust Slamin";
		                        comp[4]=1107, compname[4]="Sideskirt Left `Chrome Strip`";
		                        comp[5]=1108, compname[5]="Sideskirt Right `Chrome Strip`";
		                        comp[6]=1128, compname[6]="RoofVinyl Hardtop";
		                        comp[7]=1181, compname[7]="Front Bumper Slamin";
		                        comp[8]=1182, compname[8]="Front Bumper Chrome";
		                        comp[9]=1183, compname[9]="Rear Bumper Slamin";
		                        comp[10]=1184, compname[10]="Rear Bumper Chrome";
		                    }
		                    case 567: // SAVANNA
		                    {
                                comp[1]=1102, compname[1]="Sideskirt Left `Chrome Strip`";
		                        comp[2]=1129, compname[2]="Exhaust Chrome";
		                        comp[3]=1130, compname[3]="Roof Hardtop";
		                        comp[4]=1131, compname[4]="Roof Softtop";
		                        comp[5]=1132, compname[5]="Exhaust Slamin";
		                        comp[6]=1133, compname[6]="Sideskirt Right `Chrome Strip`";
		                        comp[7]=1186, compname[7]="Rear Bumper Slamin";
		                        comp[8]=1187, compname[8]="Rear Bumper Chrome";
		                        comp[9]=1188, compname[9]="Front Bumper Slamin";
		                        comp[10]=1189, compname[10]="Front Bumper Chrome";
		                    }
		                    case 558: // URANUS
		                    {
		                        comp[1]=1088, compname[1]="Roof Alien";
		                        comp[2]=1089, compname[2]="Exhaust X-Flow";
		                        comp[3]=1090, compname[3]="SideskirtRight Alien";
		                        comp[4]=1091, compname[4]="RoofX-Flow";
		                        comp[5]=1092, compname[5]="Exhaust Alien";
		                        comp[6]=1093, compname[6]="Sideskirt Left X-Flow";
		                        comp[7]=1094, compname[7]="Sideskirt Left Alien";
		                        comp[8]=1095, compname[8]="Sideskirt Right X-Flow";
		                        comp[9]=1163, compname[9]="SpoilerX-Flow";
		                        comp[10]=1164, compname[10]="Spoiler Alien";
		                        comp[11]=1165, compname[11]="Front Bumper X-Flow";
		                        comp[12]=1166, compname[12]="Front Bumper Alien";
		                        comp[13]=1167, compname[13]="Rear Bumper X-Flow";
		                        comp[14]=1168, compname[14]="Rear Bumper Alien";
		                    }
		                    case 559: // JESTER
		                    {
		                        comp[1]=1065, compname[1]="Exhaust Alien";
		                        comp[2]=1066, compname[2]="Exhaust X-Flow";
		                        comp[3]=1067, compname[3]="Roof Alien";
		                        comp[4]=1068, compname[4]="Roof X-Flow";
		                        comp[5]=1069, compname[5]="Right Alien Sideskirt";
		                        comp[6]=1070, compname[6]="Right X-Flow Sideskirt";
		                        comp[7]=1071, compname[7]="Left Alien Sideskirt";
		                        comp[8]=1072, compname[8]="Left X-Flow Sideskirt";
		                        comp[9]=1158, compname[9]="SpoilerX-Flow";
		                        comp[10]=1159, compname[10]="Rear BumperAlien";
		                        comp[11]=1160, compname[11]="Front BumperAlien";
		                        comp[12]=1161, compname[12]="Rear BumperX-Flow";
		                        comp[13]=1162, compname[13]="Spoiler Alien";
		                        comp[14]=1173, compname[14]="Front BumperX-Flow";
		                    }
		                    case 560: // SULTAN
		                    {
		                	    comp[1]=1026, compname[1]="Sideskirt Right Alien";
		                        comp[2]=1027, compname[2]="Sideskirt Left Alien";
		                        comp[3]=1028, compname[3]="Exhaust Alien";
		                        comp[4]=1029, compname[4]="Exhaust X-Flow";
		                        comp[5]=1030, compname[5]="Sideskirt Left X-Flow";
		                        comp[6]=1031, compname[6]="Sideskirt Right X-Flow";
		                        comp[7]=1032, compname[7]="RoofAlien Roof Vent";
		                        comp[8]=1033, compname[8]="RoofX-Flow Roof Vent";
		                        comp[9]=1138, compname[9]="Spoiler Alien";
		                        comp[10]=1139, compname[10]="SpoilerX-Flow";
		                        comp[11]=1140, compname[11]="Rear BumperX-Flow";
		                        comp[12]=1141, compname[12]="Rear Bumper Alien";
		                        comp[13]=1169, compname[13]="Front Bumper Alien";
		                        comp[14]=1170, compname[14]="Front BumperX-Flow";
		                    }
		                    case 561: // stratum
		                    {
		                        comp[1]=1055, compname[1]="Roof Alien";
		                        comp[2]=1056, compname[2]="SideskirtRight Alien";
		                        comp[3]=1057, compname[3]="SideskirtRight X-Flow";
		                        comp[4]=1058, compname[4]="Spoiler Alien";
		                        comp[5]=1059, compname[5]="ExhaustX-Flow";
		                        comp[6]=1060, compname[6]="SpoilerX-Flow";
		                        comp[7]=1061, compname[7]="RoofX-Flow";
		                        comp[8]=1062, compname[8]="SideskirtLeft Alien";
		                        comp[9]=1063, compname[9]="SideskirtLeft X-Flow";
		                        comp[10]=1064, compname[10]="Exhaust Alien";
		                        comp[11]=1154, compname[11]="Rear BumperAlien";
		                        comp[12]=1155, compname[12]="Front BumperAlien";
		                        comp[13]=1156, compname[13]="Rear BumperX-Flow";
		                        comp[14]=1157, compname[14]="Front BumperX-Flow";
		                    }
		                    case 562: // elegy
		                    {
		                        comp[1]=1034, compname[1]="Exhaust Alien";
		                        comp[2]=1035, compname[2]="RoofX-Flow Roof Vent";
		                        comp[3]=1036, compname[3]="SideSkirt Right Alien";
		                        comp[4]=1037, compname[4]="ExhaustX-Flow";
		                        comp[5]=1038, compname[5]="RoofAlien Roof Vent";
		                        comp[6]=1039, compname[6]="SideSkirtLeft X-Flow";
		                        comp[7]=1040, compname[7]="SideSkirtLeft Alien";
		                        comp[8]=1041, compname[8]="SideSkirtRight X-Flow";
		                        comp[9]=1146, compname[9]="SpoilerX-Flow";
		                        comp[10]=1147, compname[10]="Spoiler Alien";
		                        comp[11]=1148, compname[11]="Rear BumperX-Flow";
		                        comp[12]=1149, compname[12]="Rear BumperAlien";
		                        comp[13]=1171, compname[13]="Front BumperAlien";
		                        comp[14]=1172, compname[14]="Front BumperX-Flow";
		                    }
		                    case 565: // flash
		                    {
		                        comp[1]=1045, compname[1]="ExhaustX-Flow";
		                        comp[2]=1046, compname[2]="Exhaust Alien";
		                        comp[3]=1047, compname[3]="SideSkirtRight Alien";
		                        comp[4]=1048, compname[4]="SideSkirtRight X-Flow";
		                        comp[5]=1049, compname[5]="Spoiler Alien";
		                        comp[6]=1050, compname[6]="Spoiler X-Flow";
		                        comp[7]=1051, compname[7]="SideSkirtLeft Alien";
		                        comp[8]=1052, compname[8]="SideSkirtLeft X-Flow";
		                        comp[9]=1053, compname[9]="RoofX-Flow";
		                        comp[10]=1054, compname[10]="Roof Alien";
		                        comp[11]=1150, compname[11]="Bumper Alien";
		                        comp[12]=1151, compname[12]="BumperX-Flow";
		                        comp[13]=1152, compname[13]="BumperX-Flow";
		                        comp[14]=1153, compname[14]="Bumper Alien";
		                    }
		                    case 575: // broadway
		                    {
		                        comp[1]=1042, compname[1]="SideSkirt Right Chrome";
		                        comp[2]=1043, compname[2]="Exhaust Slamin";
		                        comp[3]=1044, compname[3]="Exhaust Chrome";
		                        comp[4]=1099, compname[4]="SideskirtLeft Chrome";
		                        comp[5]=1174, compname[5]="Front Bumper Chrome";
		                        comp[6]=1175, compname[6]="Rear Bumper Slamin";
		                        comp[7]=1176, compname[7]="Front Bumper Chrome";
		                        comp[8]=1177, compname[8]="Rear Bumper Slamin";
		                    }
		                    case 576: // tornado
		                    {
		                        comp[1]=1134, compname[1]="SideSkirt Right `Chrome Strip`";
		                        comp[2]=1135, compname[2]="Exhaust Slamin";
		                        comp[3]=1136, compname[3]="Exhaust Chrome";
		                        comp[4]=1137, compname[4]="SideskirtLeft `Chrome Strip`";
		                        comp[5]=1190, compname[5]="Front Bumper Slamin";
		                        comp[6]=1191, compname[6]="Front Bumper Chrome";
		                        comp[7]=1192, compname[7]="Rear Bumper Chrome";
		                        comp[8]=1193, compname[8]="Rear Bumper Slamin";
		                    }
		                }
		                
		                new query[300];
	                    key = GetPVarInt(playerid, "VEHMODKEY");
	                    GivePlayerMoneyEx(playerid, -price);
	                    AddVehicleComponent(GetPlayerVehicleID(playerid), comp[listitem]);
	                    format(string, 128, "%s purchased for $%d!", compname[listitem], price);
	                    SCM(playerid, COLOR_WHITE, string);
	                    CallRemoteFunction("VehMod", "i", playerid);
	                    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	                    AddVehMod(key, comp[listitem]);
	                    mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Mod1` = %i, `Mod2` = %i, `Mod3` = %i, `Mod4` = %i, `Mod5` = %i, `Mod6` = %i, `Mod7` = %i, \
																						     `Mod8` = %i, `Mod9` = %i, `Mod10` = %i, `Mod11` = %i WHERE `ID` = %i;",
                                     VehicleInfo[key][vMod][0], VehicleInfo[key][vMod][1], VehicleInfo[key][vMod][2], VehicleInfo[key][vMod][3], VehicleInfo[key][vMod][4], VehicleInfo[key][vMod][5],
                                     VehicleInfo[key][vMod][6], VehicleInfo[key][vMod][7], VehicleInfo[key][vMod][8], VehicleInfo[key][vMod][9], VehicleInfo[key][vMod][10], VehicleInfo[key][vID]);
						mysql_tquery(handlesql, query);
	                }
	                else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds !"), CallRemoteFunction("VehMod", "i", playerid);
		        }
                case 5: // REMOVE MODS
		        {
	                new found, query[300];
	                    
	                key = GetPVarInt(playerid, "VEHMODKEY");
	                for(new i = 1; i < 10; i++)
                    {
						if(VehicleInfo[key][vMod][i] >= 1000 && VehicleInfo[key][vMod][i] <= 1193)
						{
							RemoveVehicleComponent(GetPlayerVehicleID(playerid), VehicleInfo[key][vMod][i]);
							found++;
							VehicleInfo[key][vMod][i]=0;
						}
                    }
	                format(string, 128, "%d components removed !", found);
	                SCM(playerid, COLOR_WHITE, string);
	                PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                    mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Mod1` = %i, `Mod2` = %i, `Mod3` = %i, `Mod4` = %i, `Mod5` = %i, `Mod6` = %i, `Mod7` = %i, \
																						 `Mod8` = %i, `Mod9` = %i, `Mod10` = %i, `Mod11` = %i WHERE `ID` = %i;",
                 			     VehicleInfo[key][vMod][0], VehicleInfo[key][vMod][1], VehicleInfo[key][vMod][2], VehicleInfo[key][vMod][3], VehicleInfo[key][vMod][4], VehicleInfo[key][vMod][5],
                                 VehicleInfo[key][vMod][6], VehicleInfo[key][vMod][7], VehicleInfo[key][vMod][8], VehicleInfo[key][vMod][9], VehicleInfo[key][vMod][10], VehicleInfo[key][vID]);
					mysql_tquery(handlesql, query);
                    SetPVarInt(playerid, "VEHSEC", 0);
		            CallRemoteFunction("VehMod", "i", playerid);
		        }
		    }
		}
		//==========//
		case 26:
		{
			format(string, sizeof(string),"%s", PlayerNameEx(playerid));
			switch(response)
	        {
		        case 0:
		        {
				    SetPlayerColor(playerid, COLOR_WHITE);
				    if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], COLOR_WHITE, string);
				}
		        case 1:
		        {
				    SetPlayerColor(playerid, 0x8080FFAA);
				    if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], 0x8080FFFF, string);
				}
		    }
		}
		//==========//
		case 27: // Roadblocks
	    {
	        switch(response)
	        {
	            case 1: // Selecting
	            {
	                new Float:X,Float:Y,Float:Z,Float:A;
	                GetPlayerPos(playerid, X, Y, Z);
		            GetPlayerFacingAngle(playerid,A);
		            RoadBlocks++;
					switch(listitem)
					{
					    case 0: RoadBlockObject[RoadBlocks] = CreateDynamicObject(973, X, Y+1, Z, 0, 0, A, 0);
					    case 1: RoadBlockObject[RoadBlocks] = CreateDynamicObject(997, X, Y, Z-1, 0, 0, A, 0);
					    case 2: RoadBlockObject[RoadBlocks] = CreateDynamicObject(1237, X, Y, Z-1, 0, 0, A, 0);
					    case 3: RoadBlockObject[RoadBlocks] = CreateDynamicObject(1282, X, Y, Z-0.5, 0, 0, A, 0);
					    case 4: RoadBlockObject[RoadBlocks] = CreateDynamicObject(1422, X, Y, Z-0.5, 0, 0, A, 0);
					    case 5: RoadBlockObject[RoadBlocks] = CreateDynamicObject(18646, X, Y, Z-1.0, 0, 0, A, 0);
					    case 6: RoadBlockObject[RoadBlocks] = CreateDynamicObject(978, X, Y, Z-0.2, 0, 0, A, 0);
					    case 7: RoadBlockObject[RoadBlocks] = CreateDynamicObject(3091, X, Y, Z-0.7, 0, 0, A, 0);
					    case 8: RoadBlockObject[RoadBlocks] = CreateDynamicObject(981, X, Y, Z-0.3, 0, 0, A, 0);
					}
	            }
	        }
	    }
	    //==========//
	    case 28:
	    {
	        switch(response)
	        {
	            case 1: // Selecting
	            {
	                switch(listitem)
	                {
	                    case 0: // LSPD
	                    {
	                        ShowPlayerDialog(playerid,29,DIALOG_STYLE_LIST,"Car Color","{33FF66}Black\n{33FF66}Blue\n{33FF66}Green\n{33FF66}Grey", "Select", "");
	                        SetPVarInt(playerid, "CarType", 1);
	                    }
	                    case 1: // SFPD
	                    {
							if(GetPVarInt(playerid, "Rank") >= 5)
							{
							    ShowPlayerDialog(playerid,29,DIALOG_STYLE_LIST,"Car Color","{33FF66}Black\n{33FF66}Blue\n{33FF66}Green\n{33FF66}Grey", "Select", "");
							    SetPVarInt(playerid, "CarType", 2);
				    		}
				    		else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
	                    }
	                    case 2: // LVPD
	                    {
							if(GetPVarInt(playerid, "Rank") >= 7)
							{
							    ShowPlayerDialog(playerid,29,DIALOG_STYLE_LIST,"Car Color","{33FF66}Black\n{33FF66}Blue\n{33FF66}Green\n{33FF66}Grey", "Select", "");
							    SetPVarInt(playerid, "CarType", 3);
				    		}
				    		else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
	                    }
	                    case 3: // S.W.A.T Truck
	                    {
							if(GetPVarInt(playerid, "Rank") >= 5) CreateLSPDVehicle(playerid,427,0,1,"LSPD");
				    		else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
	                    }
	                    case 4: // Ranger
	                    {
							if(GetPVarInt(playerid, "Rank") >= 5)
							{
							    ShowPlayerDialog(playerid,29,DIALOG_STYLE_LIST,"Car Color","{33FF66}Black\n{33FF66}Blue\n{33FF66}Green\n{33FF66}Grey", "Select", "");
							    SetPVarInt(playerid, "CarType", 4);
				    		}
				    		else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
	                    }
	                    case 5: // Police Bike
	                    {
							if(GetPVarInt(playerid, "Rank") >= 2) CreateLSPDVehicle(playerid,523,0,1,"LSPD");
				    		else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
	                    }
	                    case 6: // Rancher
	                    {
							if(GetPVarInt(playerid, "Rank") >= 4) CreateLSPDVehicle(playerid,490,0,0,"LSPD");
				    		else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
	                    }
	                    case 7: // LSPD Chopper
	                    {
							if(GetPVarInt(playerid, "Rank") >= 3) CreateLSPDVehicle(playerid,497,0,0,"LSPD");
				    		else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
	                    }
	                    case 8: // WATER TANK
	                    {
							if(GetPVarInt(playerid, "Rank") >= 3) CreateLSPDVehicle(playerid,601,0,0,"LSPD");
				    		else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
	                    }
						case 9: // Tow Truck
	                    {
							if(GetPVarInt(playerid, "Rank") >= 2) CreateLSPDVehicle(playerid,525,0,0,"LSPD");
				    		else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
	                    }
	                }
	            }
	        }
	    }
	    //==========//
	    case 29:
	    {
	        switch(listitem)
	        {
	            case 0: // Black
	            {
					switch(GetPVarInt(playerid, "CarType"))
					{
						case 1: CreateLSPDVehicle(playerid,596,0,1,"LSPD");
						case 2: CreateLSPDVehicle(playerid,597,0,1,"LSPD");
						case 3: CreateLSPDVehicle(playerid,598,0,1,"LSPD");
						case 4: CreateLSPDVehicle(playerid,599,0,1,"LSPD");
					}
	            }
	            case 1: // Blue
	            {
	                switch(GetPVarInt(playerid, "CarType"))
					{
						case 1: CreateLSPDVehicle(playerid,596,79,1,"LSPD");
						case 2: CreateLSPDVehicle(playerid,597,79,1,"LSPD");
						case 3: CreateLSPDVehicle(playerid,598,79,1,"LSPD");
						case 4: CreateLSPDVehicle(playerid,599,79,1,"LSPD");
					}
	            }
	            case 2: // Green
	            {
	                switch(GetPVarInt(playerid, "CarType"))
					{
						case 1: CreateLSPDVehicle(playerid,596,16,1,"LSPD");
						case 2: CreateLSPDVehicle(playerid,597,16,1,"LSPD");
						case 3: CreateLSPDVehicle(playerid,598,16,1,"LSPD");
						case 4: CreateLSPDVehicle(playerid,599,16,1,"LSPD");
					}
	            }
	            case 3: // Grey
	            {
	                switch(GetPVarInt(playerid, "CarType"))
					{
						case 1: CreateLSPDVehicle(playerid,596,29,29,"LSPD");
						case 2: CreateLSPDVehicle(playerid,597,29,29,"LSPD");
						case 3: CreateLSPDVehicle(playerid,598,29,29,"LSPD");
						case 4: CreateLSPDVehicle(playerid,599,29,29,"LSPD");
					}
	            }
	        }
	    }
		//==========//
		case 30: // Inventory Menu
		{
			if(!response) return true;
			new chosen = listitem, str[50];
			if(PlayerInfo[playerid][pDelay] > 0) return 1; // Block any fix inv breaks.
			if(chosen == MAX_INV_SLOTS) // STORE WEAPON SECTION !
			{
			    if(GetPVarInt(playerid, "JustChosen") == 1) return error(playerid, "You must wait a second.");
				cmd_putgun(playerid, "");
			    return true;
			} 
			else if(chosen == MAX_INV_SLOTS + 1) // DROP WEAPON SECTION !
			{
			    if(GetPVarInt(playerid, "PlayerLogged") != 1) return true;
			    if(GetPVarInt(playerid, "LSPD_Ta") == 1) return 1; // Block taser bug.
			    if(GetPVarInt(playerid, "JustChosen") == 1) return error(playerid, "You must wait a second.");
			    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_GREY, "You cannot give out weapons when your character has died.");
				if(PlayerInfo[playerid][pPlayerWeapon] == 0) return SendClientMessage(playerid, COLOR_GREY, "You aren't even holding a weapon.");
			    if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to use this!");
				new sweapon, sammo;
				for (new i = 0; i < 9; i++) {
					GetPlayerWeaponData(playerid, i, sweapon, sammo);
					if(sweapon == PlayerInfo[playerid][pPlayerWeapon]) {
						PlayerInfo[playerid][pPlayerAmmo]=sammo;
					}
				}
				if(PlayerInfo[playerid][pPlayerWeapon] >= 22 && PlayerInfo[playerid][pPlayerWeapon] <= 34)
				{
					new amount = PlayerInfo[playerid][pPlayerAmmo], am = 0;
					switch(PlayerInfo[playerid][pPlayerWeapon])
					{
						case 22 .. 24: am=7;
						case 25 .. 27: am=6;
						case 28 .. 32: am=30;
						case 33, 34: am=10;
					}
					if(amount > am)
					{
						switch(PlayerInfo[playerid][pAmmoType])
						{
							case 101: am=14;
							case 107: am=14;
							case 116: am=60;
							case 126: am=80;
							case 127: am=60;
						}
						amount = am;
					}
					PlayerInfo[playerid][pPlayerAmmo]=amount;
					if(PlayerInfo[playerid][pAmmoType] == 0) {
					PlayerInfo[playerid][pPlayerAmmo]=0; }
				}
				new Float:X, Float:Y, Float:Z, pw = PlayerInfo[playerid][pPlayerWeapon];
				GetPlayerPos(playerid, X, Y, Z);
				format(str, 50, "%s dropped!", PrintIName(pw));
				SendClientMessage(playerid, COLOR_WHITE, str);
				if(GetPVarInt(playerid, "Member") != 1 && PlayerInfo[playerid][pPlayerWeapon] != 42 && GetPVarInt(playerid, "Member") != 8)
				{
					CreateLoot(PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pPlayerAmmo], PlayerInfo[playerid][pAmmoType], PlayerInfo[playerid][pSerial], X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				}
				ResetPlayerWeapons(playerid);
				PlayerInfo[playerid][pPlayerWeapon]=0;
				PlayerInfo[playerid][pPlayerAmmo]=0;
				ResetPlayerWeaponsEx(playerid);
				format(str, 50, "%s dropped his %s", PlayerInfo[playerid][pName], PrintIName(pw));
				WepLog(str);
				SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
			    return true;
			}
			else if(chosen == MAX_INV_SLOTS + 2) // STORE AMMO SECTION !
			{
			    if(GetPVarInt(playerid, "LSPD_Ta") == 1) return 1; // Block taser bug.
			    if(GetPVarInt(playerid, "JustChosen") == 1) return error(playerid, "You must wait a second.");
			    if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to use this!");
			    if(CheckInv(playerid) == 1)
			    {
			        new sweapon, sammo;
                    for (new i = 0; i < 9; i++)
	                {
		                GetPlayerWeaponData(playerid, i, sweapon, sammo);
		                if(sweapon == PlayerInfo[playerid][pPlayerWeapon])
		                {
		                    PlayerInfo[playerid][pPlayerAmmo]=sammo;
						}
					}
					if(PlayerInfo[playerid][pPlayerWeapon] >= 22 && PlayerInfo[playerid][pPlayerWeapon] <= 34)
					{
		    			new amount = PlayerInfo[playerid][pPlayerAmmo], am = 0;
		    			switch(PlayerInfo[playerid][pPlayerWeapon])
		    			{
		        			case 22 .. 24: am=150;
		        			case 25 .. 27: am=150;
		        			case 28 .. 32: am=500;
		        			case 33, 34: am=250;
		    			}
		    			if(amount > am) {
						amount = am; }
					}
			        ResetPlayerWeapons(playerid);
			        GiveInvItem(playerid, PlayerInfo[playerid][pAmmoType], PlayerInfo[playerid][pPlayerAmmo], 0);
			        format(str, 50, "%s stored into your inventory!", PrintIName(PlayerInfo[playerid][pAmmoType]));
			        SendClientMessage(playerid, COLOR_WHITE, str);
			        PlayerInfo[playerid][pPlayerAmmo]=0, PlayerInfo[playerid][pAmmoType]=0;
			        SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
			    }
			    else SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
			    return true;
			}

			if(GetPVarInt(playerid, "Combining"))
			{
				if(PlayerInfo[playerid][pInvItem][GetPVarInt(playerid, "CombiningChose")] != PlayerInfo[playerid][pInvItem][chosen])
				{
					SendClientMessage(playerid, COLOR_GREY, "You can only combine items of the same type.");
					SetPVarInt(playerid, "Combining", 0);
					SetPVarInt(playerid, "CombiningChose", 0);
					return 1;
				}

				switch(PlayerInfo[playerid][pInvItem][GetPVarInt(playerid, "CombiningChose")])
				{
					case 500, 501, 502, 503, 504, 505, 506, 507:
					{
						if(PlayerInfo[playerid][pInvQ][chosen] + PlayerInfo[playerid][pInvQ][GetPVarInt(playerid, "CombiningChose")] > 100)
						{
							SetPVarInt(playerid, "Combining", 0);
							SetPVarInt(playerid, "CombiningChose", 0);
							return SendClientMessage(playerid, COLOR_GREY, "Your combination can't result in a package being bigger than 100.");
						}

						if(chosen == GetPVarInt(playerid, "CombiningChose"))
						{
							SetPVarInt(playerid, "Combining", 0);
							SetPVarInt(playerid, "CombiningChose", 0);
							return SendClientMessage(playerid, COLOR_GREY, "You can't combine an item with itself.");
						}

						PlayerInfo[playerid][pInvQ][chosen] += PlayerInfo[playerid][pInvQ][GetPVarInt(playerid, "CombiningChose")];
						RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][GetPVarInt(playerid, "CombiningChose")], 0, GetPVarInt(playerid, "CombiningChose"));
						SendClientMessage(playerid, COLOR_WHITE, "Items combined!");
					}
				}

				SetPVarInt(playerid, "Combining", 0);
				SetPVarInt(playerid, "CombiningChose", 0);
				return 1;
			}
	
			if(PlayerInfo[playerid][pInvItem][chosen] > 0) {
				new option_list[128];

				switch(PlayerInfo[playerid][pInvItem][chosen])
				{
					case 500, 501, 502, 503, 504, 505, 506, 507:
					{
						format(option_list, sizeof(option_list), "Use\nDrop\nCombine\nDivide");
					}

					default:
					{
						format(option_list, sizeof(option_list), "Use\nDrop");
					}
				}

				format(str, 50, "%s", PrintIName(PlayerInfo[playerid][pInvItem][chosen]));
				SetPVarInt(playerid, "InvChose", chosen);
				new id = GetPVarInt(playerid, "HouseEnter");
				new kez = -1;

				if(GetCloseHouseSafe(playerid, id) && HouseInfo[id][sLocked] != 1) {
					format(option_list, sizeof(option_list), "%s\nStore in Property", option_list);
				}

				id = GetPVarInt(playerid, "BizzEnter");
				if(GetCloseBizzSafe(playerid, id) && BizInfo[id][sLocked] != 1) {
					format(option_list, sizeof(option_list), "%s\nStore in Business", option_list);
				}

				new keyex = -1;
				if(PlayerToCar(playerid, 1, 4.0))
				{
					keyex = PlayerToCar(playerid, 2, 4.0);
					if(IsValidTCar(keyex))
					{
						if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
						{
							format(option_list, sizeof(option_list), "%s\nStore in %s", option_list, PrintVehName(keyex));
							kez = keyex;
						}
					}
					
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						kez = GetPlayerVehicleID(playerid);
						if(!IsHelmetCar(kez) && VehicleInfo[kez][vType] == VEHICLE_PERSONAL) {
							format(option_list, sizeof(option_list), "%s\nStore in Glovebox", option_list);
						} else kez = -1;
					}
				}

				if(kez == -1)
				{
					if(IsPoliceCar(playerid))
					{
						if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
						{
							format(option_list, sizeof(option_list), "%s\nStore in %s", option_list, PrintVehName(GetPoliceCarID(playerid)));
						}
					}
				}

				ShowPlayerDialog(playerid, 31, DIALOG_STYLE_LIST, str, option_list, "Select", "Back");
			} else CallRemoteFunction("PrintInv", "i", playerid);
		}
		case 31: // Inventory Menu
		{
			if(!response)
			{
			    DeletePVar(playerid, "InvChose");
			    CallRemoteFunction("PrintInv", "i", playerid);
			    return true;
			}
			new str2[50], chose = GetPVarInt(playerid, "InvChose");
			DeletePVar(playerid, "InvChose");
			switch(listitem)
			{
			    case 0: // USE
			    {
			        switch(PlayerInfo[playerid][pInvItem][chose])
			        {
						case 1 .. 99: // WEAPONS
						{
							if(PlayerInfo[playerid][pPlayerWeapon] != 0)
							{
							    SendClientMessage(playerid, COLOR_WHITE, "You already have a weapon equiped!");
							    CallRemoteFunction("PrintInv", "i", playerid);
			    			    return true;
							}
							if(PlayerInfo[playerid][pInvItem][chose] == 4) {
						        if(GetPVarInt(playerid, "ConnectTime") < 150) {
						            SendClientMessage(playerid, COLOR_WHITE, "You need (150) hours played to use a knife!");
						            return 1;
						        }
						    }
						    if(PlayerInfo[playerid][pInvItem][chose] >= 22 && PlayerInfo[playerid][pInvItem][chose] <= 34) {
						        if(GetPVarInt(playerid, "ConnectTime") < 8) {
						            SendClientMessage(playerid, COLOR_WHITE, "You need (8) hours played to use firearms!");
						            return 1;
						        }
						    }
						    //==========//
							PlayerInfo[playerid][pAmmoType]=PlayerInfo[playerid][pInvEx][chose];
						    GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pInvItem][chose], PlayerInfo[playerid][pInvQ][chose]);
							PlayerInfo[playerid][pSerial]=PlayerInfo[playerid][pInvS][chose];
						    //==========//
						    format(str2, 128, "%s equiped!", PrintIName(PlayerInfo[playerid][pInvItem][chose]));
						    SendClientMessage(playerid, COLOR_WHITE, str2);
						    //==========//
						    RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][chose], 0, chose);
						    //==========//
						    SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
						}
						case 100 .. 199: // AMMUNITION
						{
						    if(PlayerInfo[playerid][pPlayerWeapon] != 0 && PlayerInfo[playerid][pPlayerAmmo] != 0)
							{
							    SendClientMessage(playerid, COLOR_WHITE, "Your weapon is currently loaded!");
							    CallRemoteFunction("PrintInv", "i", playerid);
			    			    return true;
							}
							if(PlayerInfo[playerid][pPlayerWeapon] == 0)
							{
							    SendClientMessage(playerid, COLOR_WHITE, "You don't have any weapon equipped !");
							    CallRemoteFunction("PrintInv", "i", playerid);
			    			    return true;
							}
							if(CompatAmmo(playerid, PlayerInfo[playerid][pInvItem][chose]) == 0)
							{
							    SendClientMessage(playerid, COLOR_WHITE, "Ammunition is not compatible with this weapon !");
							    CallRemoteFunction("PrintInv", "i", playerid);
							    return true;
							}
							ApplyAnimation(playerid, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0);
							PlayerInfo[playerid][pAmmoType]=PlayerInfo[playerid][pInvItem][chose];
							GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pInvQ][chose]);
							PlayerInfo[playerid][pSerial]=PlayerInfo[playerid][pInvS][chose];
							//==========//
						    format(str2, 128, "%s reloaded with '%s'!", PrintIName(PlayerInfo[playerid][pPlayerWeapon]), PrintIName(PlayerInfo[playerid][pInvItem][chose]));
						    SendClientMessage(playerid, COLOR_WHITE, str2);
						    //==========//
						    RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][chose], 0, chose);
						    //==========//
						    SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
						}
						case 200 .. 299: // FOOD
						{
							new Float:health, rand;
							rand = random(50)+1;
							GetPlayerHealth(playerid, health);
							health+=float(rand)+20.0;
							if(health >= 100.0) health=99.0;
						    SetPlayerHealth(playerid, health);
						    //==========//
						    switch(PrintIid(PlayerInfo[playerid][pInvItem][chose]))
						    {
						        case 1: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
						        case 2: ApplyAnimation(playerid, "VENDING", "VEND_Drink2_P", 3.0, 0, 0, 0, 0, 0);
						    }
						    //==========//
						    format(str2, 128, "%s consumed!", PrintIName(PlayerInfo[playerid][pInvItem][chose]));
						    SendClientMessage(playerid, COLOR_WHITE, str2);
						    PlaySoundPlyRadius(playerid, 32200, 10.0);
						    //==========//
    	        		    format(string, sizeof(string), "consumed %s", PrintIName(PlayerInfo[playerid][pInvItem][chose]));
    	        		    ForceAME(playerid, string);
    	                    //==========//
						    SetPVarInt(playerid, "Hunger", 0);
						    //==========//
						    RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][chose], 0, chose);
						}
						case 300 .. 399: // SPECIAL ITEMS
						{
						    SetPlayerSpecialAction(playerid, PrintIid(PlayerInfo[playerid][pInvItem][chose]));
						    //==========//
						    format(str2, 128, "%s used!", PrintIName(PlayerInfo[playerid][pInvItem][chose]));
						    SendClientMessage(playerid, COLOR_WHITE, str2);
						    //==========//
						    RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][chose], 0, chose);
						}
						case 400 .. 499: // PVARS
						{
							new allow = 0;
							switch(PlayerInfo[playerid][pInvItem][chose])
							{
							    case 400 .. 405: { allow=PlayerInfo[playerid][pInvItem][chose]; }
							    case 408 .. 411: { allow=PlayerInfo[playerid][pInvItem][chose]; }
							    case 414 .. 415: { allow=PlayerInfo[playerid][pInvItem][chose]; }
							    case 417: { allow=PlayerInfo[playerid][pInvItem][chose]; }
							}
							if(allow == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this item!");
							switch(allow)
							{
					            case 400: // DICE
							    {
							        cmd_dice(playerid, "");
							        return true;
							    }
							    case 401: // MASK
							    {
							        if(GetPVarInt(playerid, "ConnectTime") <= 55) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need (56) and over hours played!");
							        switch(GetPVarInt(playerid, "MaskUse"))
    						        {
    						            case 0:
    						            {
    						                SetPVarInt(playerid, "MaskUse", 1);
    						                GameTextForPlayer(playerid, "~w~Mask ~g~On", 5000, 6);
    						                format(string, sizeof(string),"%s", PlayerNameEx(playerid));
    						                PlayerTag[playerid] = Create3DTextLabel("NULL",0xFFFFFFFF,0.0,0.0,0.0,8.0,0,1);
    						                Attach3DTextLabelToPlayer(PlayerTag[playerid], playerid, 0.0, 0.0, 0.1);
	        				                Update3DTextLabelText(PlayerTag[playerid], 0xFFFFFFFF,string);
	        				                foreach(new i : Player) { 
												if(GetPVarInt(i, "Admin") < 1) {
													ShowPlayerNameTagForPlayer(i,playerid,0); 
												}
											}
	        				                return true;
    						            }
    						            case 1:
    						            {
    						                SetPVarInt(playerid, "MaskUse", 0);
    						                GameTextForPlayer(playerid, "~w~Mask ~r~Off", 5000, 6);
    						                Delete3DTextLabel(PlayerTag[playerid]);
    						                foreach(new i : Player) { ShowPlayerNameTagForPlayer(i,playerid,1); }
	        				                return true;
    						            }
    						        }
							    }
							    case 402: // WALKIE TALKIE
							    {
							        cmd_wt(playerid, "");
							        return true;
							    }
							    case 404: // WATCH
							    {
							        cmd_time(playerid, "");
							        return true;
							    }
							    case 405: // PHONE
							    {
							        cmd_cellphone(playerid, "");
							        return true;
							    }
							    case 408: // MP5
							    {
							        cmd_mp3(playerid, "");
							        return true;
							    }
							    case 409, 410: // Cannabis Seeds / GROWING CHEMS
							    {
							        if (!CheckInvItem(playerid, 409))
							        {
							            SCM(playerid, COLOR_LIGHTRED, "You need cannabis seeds to continue!");
							            return true;
							        }
							        if (!CheckInvItem(playerid, 410))
							        {
							            SCM(playerid, COLOR_LIGHTRED, "You need growing chemicals to continue!");
							            return true;
							        }

							        new player_plants = 0;

		    				        for(new weed = 0; weed < sizeof(WeedInfo); weed++)
    	    				        {
								        if(WeedInfo[weed][wPlanted] != 0 && strcmp(PlayerInfo[playerid][pUsername], WeedInfo[weed][wName]) == 0)
										{
											player_plants++;
										}
							        }

							        if(player_plants >= MAX_PLAYER_WEED_PLANTS)
									{
										return SendClientMessage(playerid, COLOR_GREY, "You have already planted the maximum allowed amount of cannabis plants per player.");
									}

		    				        for(new weed = 0; weed < sizeof(WeedInfo); weed++)
    	    				        {
								        if(WeedInfo[weed][wPlanted] == 0 && WeedInfo[weed][wTime] == 0)
								        {
				    				        new Float:X,Float:Y,Float:Z;

				    				        RemoveInvItem(playerid, 409, 1); // Remove cannabis seeds
				    				        RemoveInvItem(playerid, 410, 1); // Remove growing chemical

                    				        ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
		            				        GetPlayerPos(playerid, X, Y, Z);

		            				        WeedInfo[weed][wObject] = CreateDynamicObject(3409, X, Y, Z-2.5, 0, 0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		            				        WeedInfo[weed][wX] = X;
		    						        WeedInfo[weed][wY] = Y;
		    						        WeedInfo[weed][wZ] = Z;
		    						        WeedInfo[weed][wWorld] = GetPlayerVirtualWorld(playerid);
		    						        WeedInfo[weed][wTime] = 60;
		    						        WeedInfo[weed][wPlanted] = 1;

		    						        format(WeedInfo[weed][wName], MAX_PLAYER_NAME + 1, "%s", PlayerInfo[playerid][pUsername]);
		    								SendClientMessage(playerid, COLOR_WHITE, "You have planted your cannabis, it will be fully grown in sixty minutes. (press 'H' to collect)");

		    								format(string, sizeof(string), "AdmWarn: %s(%i) has planted cannabis.", PlayerInfo[playerid][pUsername], playerid);
                	    					SendAdminMessage(COLOR_YELLOW, string);
                	    					return 1;
								        }
							        }
							    }
							    case 411: // Baking Soda
							    {
							        if(!CheckInvItem(playerid, 501))
							        {
							            SendClientMessage(playerid, COLOR_GREY, "You need Cocaine to continue.");
							            return true;
							        }
							        if(NotAbleToPlant(playerid))
							        {
							            SendClientMessage(playerid, COLOR_GREY, "You can't do this while in jail.");
							            return true;
							        }

		    				        for(new weed = 0; weed < sizeof(CrackInfo); weed++)
    	    				        {
								        if(CrackInfo[weed][cPlanted] == 0 && CrackInfo[weed][cTime] == 0)
								        {
											new hasitem = HasInvItem(playerid, 501, 100);
				    				        if(hasitem == -1) return SendClientMessage(playerid, COLOR_GREY, "You need 100 grams of Cocaine to continue.");

				    				        RemoveInvItem(playerid, 501, 100, hasitem);
				    				        RemoveInvItem(playerid, 411);

                    				        ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);

                    				        new Float:X,Float:Y,Float:Z;
		            				        GetPlayerPos(playerid, X, Y, Z);

		            				        CrackInfo[weed][cObject] = CreateDynamicObject(1554, X, Y, Z-1.0, 0, 0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		            				        CrackInfo[weed][cX] = X;
		    						        CrackInfo[weed][cY] = Y;
		    						        CrackInfo[weed][cZ] = Z;
		    						        CrackInfo[weed][cWorld] = GetPlayerVirtualWorld(playerid);
		    						        CrackInfo[weed][cTime] = 60;
		    						        CrackInfo[weed][cPlanted] = 1;

	                				        strmid(CrackInfo[weed][cName], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
		    						        SendClientMessage(playerid, COLOR_WHITE, "You have started cooking crack, it will be done in 60 minutes. (press 'H' to collect)");
		    						        return 1;
								        }
							        }
							    }
							    case 415:
							    {
							        if(!IsInLS(playerid)) {
							            scm(playerid, -1, "You need to be in Los Santos for any scanner reception.");
							            return 1;
							        }
							        switch(PlayerInfo[playerid][pScanner])
							        {
							            case 0:
							            {
							                PlayerInfo[playerid][pScanner] = 1;
							                GameTextForPlayer(playerid, "~w~Scanner~n~~g~On", 4000, 3);
							                format(string, sizeof(string), "turned %s police scanner on", CheckSex(playerid));
							                ForceAME(playerid, string);
							            }
							            case 1:
							            {
							                PlayerInfo[playerid][pScanner] = 0;
							                GameTextForPlayer(playerid, "~w~Scanner~n~~r~Off", 4000, 3);
							                format(string, sizeof(string), "turned %s police scanner off", CheckSex(playerid));
							                ForceAME(playerid, string);
							            }
							        }
							        return 1;
							    }								
							    case 417:
							    {
							    	for(new i = 0; i < MAX_CAMPFIRES; i++)
							    	{
							    		if(Campfire[i][cID] == 0)
							    		{
							    			new Float:x, Float:y, Float:z;
							    			GetPlayerPos(playerid, x, y, z);
							    			Campfire[i][cID] = CreateDynamicObject(19632, x, y, z - 1.0, 0, 0, 0);
							    			Campfire[i][cX] = x;
							    			Campfire[i][cY] = y;
							    			Campfire[i][cZ] = z;

							    			Campfire[i][cTimer] = SetTimerEx("DestroyCampfire", 600000, false, "i", i);

							    			SendClientMessage(playerid, COLOR_WHITE, "Campfire created. (use 'H' to extinguish)");
							    			break;
							    		}
							    	}
							    }
							}
							RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][chose], 0, chose);
						}
						case 500 .. 549: // NARCOTICS
						{
                            new Float:ar, Float:ar2, gpid = PlayerInfo[playerid][pInvItem][chose];
							if(GetPVarInt(playerid, "DrugTime") > 0)
							{
							    format(string, sizeof(string), "You must wait (%d) secons before using your narcotics!", GetPVarInt(playerid, "DrugTime"));
							    SCM(playerid, COLOR_GREY, string);
							    return true;
							}
							GetPlayerArmour(playerid, ar);
							switch(gpid)
							{
							    case 500 .. 501: SetPVarInt(playerid, "Addiction", GetPVarInt(playerid, "Addiction")+4), ar2=10.0;
							    case 502: ar2 = 5.0;
							    case 503 .. 505: SetPVarInt(playerid, "Addiction", GetPVarInt(playerid, "Addiction")+4), ar2=10.0;
							    case 506: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY), ar2=5.0;
							    case 507: SetPVarInt(playerid, "Addiction", GetPVarInt(playerid, "Addiction")+6), ar2=15.0;
							}
							SetPVarInt(playerid, "AddictionID", gpid);
						    SetPVarInt(playerid, "DrugTime", PrintIid(gpid)/4);
						    SetPVarInt(playerid, "DrugHigh", gpid);
							ar+=ar2;
							if(ar >= 99.0) ar = 99.0;
						    SetPlayerArmourEx(playerid, ar);
						    //==========//
						    format(str2, 128, "%s consumed!", PrintIName(gpid));
						    SendClientMessage(playerid, COLOR_WHITE, str2);
						    //==========//
						    RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][chose], 1, chose);
						    //==========//
						}
						case 1002: // Silencer
						{
							scm(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Use the command /silencer to attach/detach a silencer to/from a colt 45.");
							cmd_silencer(playerid, "");
							return true;
						}
						case 1003:
						{
							cmd_plantradio(playerid, "");
							return true;
						}
						case 1004: // bomb
						{
							cmd_v(playerid, "bomb");
							return true;
						}
						case 1005: // bullet-proof vest
						{
							SetPlayerArmourEx(playerid, 50.0);
							format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
							GiveNameSpace(sendername);
							format(string, sizeof(string), "*** %s put on a bulletproof vest, strapping it securely to %s torso.", sendername, CheckSex(playerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE);
							RemoveInvItem(playerid, 1005);
							return true;
						}
						case 1006: // Backpack
						{
							if(GetPVarInt(playerid, "Backpack") == 1) {
								error(playerid, "You're already wearing a backpack.");
								return scm(playerid, COLOR_BLUE, "[TIP] {FFFFFF}To take off your backpack type (/backpack).");
							}
							SetPVarInt(playerid, "Backpack", 1);
							RemoveInvItem(playerid, 1006);
							if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
							if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
							scm(playerid, COLOR_BLUE, "[TIP] {FFFFFF}To take off your backpack type (/backpack).");
							format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
							GiveNameSpace(sendername);
							format(string, sizeof(string), "*** %s puts on %s backpack.", sendername, CheckSex(playerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE);
							new query[82];
							mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET Backpack=1 WHERE `Name`='%s'",PlayerName(playerid));
							mysql_tquery(handlesql, query);
							SetPlayerAttachedObject(playerid, 6, 371, 1, 0.0, -0.14, 0.0, 0.0, 90, 359.5022, 1, 1, 1);
							return true;
						}
						case 1007: // Fishing rod
						{
							cmd_fish(playerid, "");
							return true;
						}
						case 1008: // GAS CAN
						{
							if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_GREY, "You must be onfoot to use this!");
							if (PlayerInfo[playerid][pInvQ][chose] < 1 || PlayerInfo[playerid][pInvEx][chose] == -1) { //Fill gas can.
								if(!IsAtGasStation(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not around any fuel pumps.");
								SetPVarInt(playerid, "GC_ItemSlot", chose);
								ShowPlayerDialog(playerid, FUEL_DIALOG_FILL_GASCAN, DIALOG_STYLE_LIST, "Fuel Pump", "{C9C9C9}Regular\n{3A0BC6}Premium\n{F2C71A}Diesel", "Ok", "Cancel");
							} else { //Use gas can.
								if(PlayerToCar(playerid,1,5.0)) {
									new carid = PlayerToCar(playerid,2,5.0);
									if(IsNotAEngineCar(carid)) return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't have an engine.");
									if(VehicleInfo[carid][vFuel] >= 100) return SendClientMessage(playerid, COLOR_LIGHTRED, "Vehicles fuel tank is full!");
									if(VehicleInfo[carid][vEngine] != 0 && VehicleInfo[carid][vFuel] >= 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Vehicle's engine must be off to use this!");
									new vmodel = GetVehicleModel(carid);
									if(PlayerInfo[playerid][pInvEx][chose] == GasType(vmodel)) {
										new amount = (100-VehicleInfo[carid][vFuel]);
										if(PlayerInfo[playerid][pInvQ][chose] > amount) {
											VehicleInfo[carid][vFuel] = 100;
											RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][chose], amount, chose);
											format(string, sizeof(string), "%sGas can{FFFFFF} used on the %s. You still have %i litres left in your gas can.", GasColor(GasType(vmodel)), VehicleName[vmodel-400], PlayerInfo[playerid][pInvQ][chose]);
										} else {
											VehicleInfo[carid][vFuel] = VehicleInfo[carid][vFuel]+PlayerInfo[playerid][pInvQ][chose];
											RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][chose], 0, chose);
											format(string, sizeof(string), "%sGas can{FFFFFF} used on the %s.", GasColor(GasType(vmodel)), VehicleName[vmodel-400]);
										}
										SendClientMessage(playerid, COLOR_WHITE, string);
									} else {
										format(string, sizeof(string), "Your gas can contains %s{AFAFAF} fuel, but the %s requires %s{AFAFAF} fuel.", FuelName(PlayerInfo[playerid][pInvEx][chose]), VehicleName[vmodel-400], FuelName(GasType(vmodel)));
										return SendClientMessage(playerid, COLOR_GREY, string);
									}
								} else {
									if(!IsAtGasStation(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You are not around any fuel pumps or vehicles.");
									SetPVarInt(playerid, "GC_ItemSlot", chose);
									ShowPlayerDialog(playerid, FUEL_DIALOG_FILL_GASCAN, DIALOG_STYLE_LIST, "Fuel Pump", "{C9C9C9}Regular\n{3A0BC6}Premium\n{F2C71A}Diesel", "Ok", "Cancel");
								}
							}
							return true;
						}
						case 1050: // Cigarettes
						{
							if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_CLOTH4)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4);
							SetPVarInt(playerid, "usingCig", 1);
							SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4, 19625, 6, 0.115, 0.031, 0.019, 102.9, 117.0, -110.5, 1.0, 1.0, 1.0);
							SendClientMessage(playerid,COLOR_WHITE,"Type (/drop cig) to drop your cigarette.");
							//==========//
							RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][chose], 1, chose);
							return true;
						}
						case 1051: // Worms
						{
							cmd_fish(playerid, "");
							return true;
						}
			        }
			    }
			    case 1: // DROP
			    {
			        if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
			        new Float:X, Float:Y, Float:Z;
			        GetPlayerPos(playerid, X, Y, Z);
			        switch(PlayerInfo[playerid][pInvItem][chose])
			        {
			            case 401:
			            {
			                if(GetPVarInt(playerid, "MaskUse") == 1) {
			                    SendClientMessage(playerid, COLOR_LIGHTRED, "You need to take your mask off!");
			                    return true;
			                }
			            }
			            case 1000 .. 1001:
			            {
			            	if((GetPVarInt(playerid, "Member") == 1 || GetPVarInt(playerid, "Member") == 8)) return error(playerid, "You can not do this to prevent LSPD and LSG weapon distribution.");
			            }
			        }
			        format(string, sizeof(string), "%s dropped!", PrintIName(PlayerInfo[playerid][pInvItem][chose]));
			        SendClientMessage(playerid, COLOR_WHITE, string);
			        //==========//
			        new allow = 0;
			        if(GetPVarInt(playerid, "Member") == 1 || GetPVarInt(playerid, "Member") == 8) { 
						allow++; 
					} else if(PlayerInfo[playerid][pInvItem][chose] == 42) allow++;
			        if(PlayerInfo[playerid][pInvItem][chose] > 200) allow=0;
					if(allow == 0) {
					CreateLoot(PlayerInfo[playerid][pInvItem][chose], PlayerInfo[playerid][pInvQ][chose], PlayerInfo[playerid][pInvEx][chose], PlayerInfo[playerid][pInvS][chose], X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)); }
			        //==========//
					RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][chose], 0, chose);
					//==========//
					SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
					//==========//
					Streamer_Update(playerid);
			    }
			    case 2: //Put in house inventory, business inventory OR Put in vehicle
			    {
			    	switch(PlayerInfo[playerid][pInvItem][chose])
			    	{
			    		case 500, 501, 502, 503, 504, 505, 506, 507:
			    		{
			    			new combine_string[128];
			    			format(combine_string, sizeof(combine_string), "Select an item that you would like to combine with %s(%i).", PrintIName(PlayerInfo[playerid][pInvItem][chose]), PlayerInfo[playerid][pInvQ][chose]);
			    			SendClientMessage(playerid, COLOR_WHITE, combine_string);
			    			SetPVarInt(playerid, "Combining", 1);
			    			SetPVarInt(playerid, "CombiningChose", chose);
			    			PrintInv(playerid);
			    		}

			    		default:
			    		{
			    			StorePlayerItemInHouse(playerid, chose, GetPVarInt(playerid, "HouseEnter"));
					        StorePlayerItemInBusiness(playerid, chose, GetPVarInt(playerid, "BizzEnter"));

							//Vehicle storing
							new kez = -1;
							new keyex = -1;
							if(PlayerToCar(playerid, 1, 4.0)) {
				    			keyex = PlayerToCar(playerid, 2, 4.0);
				    			if(IsValidTCar(keyex))
				    			{
			                    	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			                    	{
						        		kez = keyex;
						        	}
		         		    	}
							}
							if(kez == -1)
							{
						    	if(IsPoliceCar(playerid)) {
						        	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
						        	{
						        	    kez = GetPoliceCarID(playerid);
									}
									else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
						        	{
						        		kez = GetPlayerVehicleID(playerid);
						        	}
						    	}
							}

							if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				        	{
				        		kez = GetPlayerVehicleID(playerid);
				        	}

		                    if(kez == -1) return true;
		                    
		                    if(!response) return true;

				   	        StorePlayerItemInVehicle(playerid, chose, kez);
			    		}
			    	}
			        
			    }
			    case 3:
			    {
			    	switch(PlayerInfo[playerid][pInvItem][chose])
			    	{
			    		case 500, 501, 502, 503, 504, 505, 506, 507:
			    		{
			    			new divide_string[128];
			    			format(divide_string, sizeof(divide_string), "How much would you like to split off from your %s(%i)?", PrintIName(PlayerInfo[playerid][pInvItem][chose]), PlayerInfo[playerid][pInvQ][chose]);
			    			ShowPlayerDialog(playerid, 562, DIALOG_STYLE_INPUT, "Divivde", divide_string, "Confirm","Close");

			    			SetPVarInt(playerid, "Dividing", 1);
			    			SetPVarInt(playerid, "DividingChose", chose);
			    		}

			    		default:
			    		{
			    			StorePlayerItemInHouse(playerid, chose, GetPVarInt(playerid, "HouseEnter"));
					        StorePlayerItemInBusiness(playerid, chose, GetPVarInt(playerid, "BizzEnter"));

							//Vehicle storing
							new kez = -1;
							new keyex = -1;
							if(PlayerToCar(playerid, 1, 4.0)) {
				    			keyex = PlayerToCar(playerid, 2, 4.0);
				    			if(IsValidTCar(keyex))
				    			{
			                    	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			                    	{
						        		kez = keyex;
						        	}
		         		    	}
							}
							if(kez == -1)
							{
						    	if(IsPoliceCar(playerid)) {
						        	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
						        	{
						        	    kez = GetPoliceCarID(playerid);
									}
									else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
						        	{
						        		kez = GetPlayerVehicleID(playerid);
						        	}
						    	}
							}

							if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				        	{
				        		kez = GetPlayerVehicleID(playerid);
				        	}

		                    if(kez == -1) return true;
		                    
		                    if(!response) return true;

				   	        StorePlayerItemInVehicle(playerid, chose, kez);
			    		}
			    	}
			    }
			    case 4:
			    {
			    	switch(PlayerInfo[playerid][pInvItem][chose])
			    	{
			    		default:
			    		{
			    			StorePlayerItemInHouse(playerid, chose, GetPVarInt(playerid, "HouseEnter"));
					        StorePlayerItemInBusiness(playerid, chose, GetPVarInt(playerid, "BizzEnter"));

							//Vehicle storing
							new kez = -1;
							new keyex = -1;
							if(PlayerToCar(playerid, 1, 4.0)) {
				    			keyex = PlayerToCar(playerid, 2, 4.0);
				    			if(IsValidTCar(keyex) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				    			{
						        	kez = keyex;
		         		    	}
							}
							if(kez == -1)
							{
						    	if(IsPoliceCar(playerid)) {
						        	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
						        	{
						        	    kez = GetPoliceCarID(playerid);
									}
									else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
						        	{
						        		kez = GetPlayerVehicleID(playerid);
						        	}
						    	}
							}

							if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				        	{
				        		kez = GetPlayerVehicleID(playerid);
				        	}

		                    if(kez == -1) return true;
		                    
		                    if(!response) return true;

				   	        StorePlayerItemInVehicle(playerid, chose, kez);
			    		}
			    	}
			    }
			}
		}
		case 35: // LSPD ARMOURY DIALOG
		{
		    if(!response) return true;
		    if(PDItems[listitem][0] == 1000) return SetPlayerArmourEx(playerid, 99.0);
		    if(PDItems[listitem][0] == 1001) return SetPlayerHealth(playerid, 100.0);
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(listitem == sizeof(PDItems))
		    {
		        ResetPlayerWeaponsEx(playerid);
		        SetPlayerArmourEx(playerid, 0.0);
				for(new p = 0; p < MAX_INV_SLOTS; p++)
				{
				    if(PlayerInfo[playerid][pInvItem][p] >= 22 && PlayerInfo[playerid][pInvItem][p] <= 41) // Weapons
				    {
					    RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][p], 0, p);
					}

					if(PlayerInfo[playerid][pInvItem][p] >= 100 && PlayerInfo[playerid][pInvItem][p] <= 128) // Ammo
				    {
					    RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][p], 0, p);
					}
				}
				return 1;
		    }
			else
			{
			    switch(PDItems[listitem][0])
			    {
			        case 1 .. 99:
			        {
			            if(CheckInvItem(playerid, PDItems[listitem][0])) return SendClientMessage(playerid, COLOR_WHITE, "You already have this item!");
			            if(GetPVarInt(playerid, "ConnectTime") <= 7) return SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient hours played!");
			        }
			    }
			    if(GetPVarInt(playerid, "Rank") >= PDItems[listitem][1])
			    {
			        if(PDItems[listitem][0] == 3) GiveInvItem(playerid, PDItems[listitem][0], 1, 0);
			        else if(PDItems[listitem][0] == 41) GiveInvItem(playerid, PDItems[listitem][0], 1000, 0);
			        else GiveInvItem(playerid, PDItems[listitem][0], PrintIQ(PDItems[listitem][0]), 0, PlayerInfo[playerid][pWepSerial]);
			        format(string, 128, "%s selected!", PrintIName(PDItems[listitem][0]), PDItems[listitem][1]);
			        SendClientMessage(playerid, COLOR_WHITE, string);
		        }
			    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient rank!");
		    }
		}
		case 36:
		{
		    if(GetPVarInt(playerid, "VEHC") == 0) return true;
		    if(!response)
		    {
		        ShowPlayerDialog(playerid,37,DIALOG_STYLE_LIST,"DEALERSHIP","Select Vehicle (FORWARD)\nSelect Vehicle (BACKWARDS)\nPurchase Vehicle","Select", "Exit");
		        return true;
		    }
		    else
		    {
		        new maxe;
		        switch(GetPVarInt(playerid, "VEHMDL"))
			    {
			        case 1: maxe = sizeof(VehDealership)-1;
			        case 2: maxe = sizeof(GrotDealership)-1;
			        case 3: maxe = sizeof(BikeDealership)-1;
			        case 4: maxe = sizeof(BoatDealership)-1;
			    }
		        switch(GetPVarInt(playerid, "VEHFOR"))
		        {
		            case 0:
		            {
		                if(GetPVarInt(playerid, "VEHID") >= maxe) SetPVarInt(playerid, "VEHID", 0);
					    else SetPVarInt(playerid, "VEHID", GetPVarInt(playerid, "VEHID")+1);
					}
		            case 1:
		            {
		                if(GetPVarInt(playerid, "VEHID") <= 0) SetPVarInt(playerid, "VEHID", maxe);
					    else SetPVarInt(playerid, "VEHID", GetPVarInt(playerid, "VEHID")-1);
					}
		        }
		        CallRemoteFunction("VehCreation", "i", playerid);
		    }
		}
		case 37:
		{
		    new id = GetPVarInt(playerid, "VEHDEAL");
		    if(!response)
		    {
	            DeletePVar(playerid, "VEHC"), DeletePVar(playerid, "VEHMDL");
	            DeletePVar(playerid, "VEHID");
	            DeletePVar(playerid, "VEHDEAL");
	            if(GetPVarInt(playerid, "VEHVEH") >= 1) { DespawnVehicle(GetPVarInt(playerid, "VEHVEH")); }
	            DeletePVar(playerid, "VEHVEH");
	            SetPlayerPosEx(playerid, Dealerships[id][0], Dealerships[id][1], Dealerships[id][2]);
                SetPlayerVirtualWorld(playerid, 0);
                SetCameraBehindPlayer(playerid);
				TempFreeze(playerid);
			    DeletePVar(playerid, "LOADDEAL");
			    return true;
			}
            //==========//
		    switch(listitem)
		    {
		        case 0:
		        {
		            SetPVarInt(playerid, "VEHFOR", 0);
					CallRemoteFunction("VehCreation", "i", playerid);
		        }
		        case 1:
		        {
		            SetPVarInt(playerid, "VEHFOR", 1);
					CallRemoteFunction("VehCreation", "i", playerid);
		        }
		        case 2:
		        {
		            new id2 = GetPVarInt(playerid, "VEHID"), vehmdl = GetPVarInt(playerid, "VEHMDL"), carmdl, col = 0, id3 = GetPVarInt(playerid, "VEHDEAL"); //tls, col = 0;
		            DeletePVar(playerid, "VEHC"), DeletePVar(playerid, "VEHMDL");
	                DeletePVar(playerid, "VEHID");
	                DeletePVar(playerid, "VEHDEAL");
	                if(GetPVarInt(playerid, "VEHVEH") >= 1) { DespawnVehicle(GetPVarInt(playerid, "VEHVEH")); }
	                DeletePVar(playerid, "VEHVEH");
	                SetPlayerPosEx(playerid, Dealerships[id3][0], Dealerships[id3][1], Dealerships[id3][2]);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetCameraBehindPlayer(playerid);
			        TogglePlayerControllableEx(playerid, true);
			        DeletePVar(playerid, "LOADDEAL");
				    if(VJB == 1)
					{
					    SCM(playerid, -1, "A vehicle has just been bought, please retry!");
					    return true;
					}
			        switch(vehmdl)
			        {
			            case 1: // Vehicle NORMAL Dealership
			            {
			                carmdl=VehDealership[id2][0];
			                price=VehDealership[id2][1];
			            }
			            case 2: // Vehicle GROTTI Dealership
			            {
			                carmdl=GrotDealership[id2][0];
			                price=GrotDealership[id2][1];
			            }
			            case 3: // Vehicle BIKE Dealership
			            {
			                carmdl=BikeDealership[id2][0];
			                price=BikeDealership[id2][1];
			            }
			            case 4: // Vehicle BOAT Dealership
			            {
			                carmdl=BoatDealership[id2][0];
			                price=BoatDealership[id2][1];
			            }
			        }
			        if(GetPVarInt(playerid, "CarTicket") >= 1)
			        {
			            if(price >= 125000) price -=125000, SetPVarInt(playerid, "CTU", 2);
			            else price = 0, SetPVarInt(playerid, "CTU", 1);
			        }
	                if(GetPlayerMoneyEx(playerid) >= price)
	                {
						new query[75];
				        mysql_format(handlesql, query, sizeof(query), "SELECT NULL FROM `vehicles` WHERE `Owner` = '%e';", PlayerInfo[playerid][pUsername]);
				        mysql_tquery(handlesql, query, "OnDealershipVehicleBought", "iiiii", playerid, carmdl, id3, col, price);
                    }
	                else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
					TempFreeze(playerid);
		        }
		    }
		}
		case 38: // Cellphone Dialog
	    {
            switch(listitem)
	        {
	            case 0: // Call Number
	            {
	                if (GetPVarInt(playerid, "Mobile") != INVALID_MAXPL) return SendClientMessage(playerid, COLOR_GREY, "You are already on a call."), cmd_cellphone(playerid, "");
	                if (GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't do this while handcuffed/tazed."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid,COLOR_LIGHTRED,"WARNING: You are currently muted."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead."), cmd_cellphone(playerid, "");
                    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water"), cmd_cellphone(playerid, "");
	                ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
	            }
	            case 1: // Contacts
	            {
                    if (GetPVarInt(playerid, "Mobile") != INVALID_MAXPL) return SendClientMessage(playerid, COLOR_GREY, "You are already on a call."), cmd_cellphone(playerid, "");
	                if (GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't do this while handcuffed/tazed."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid,COLOR_LIGHTRED,"WARNING: You are currently muted."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead."), cmd_cellphone(playerid, "");
                    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water"), cmd_cellphone(playerid, "");
                    new diatxt[516];
               		for(new i = 1; i < 11; i++)
					{
					    if(i != 11)
					    {
					        //Contact system
						    new contactname[40], contactnumber[40], cname[50];
						    format(contactname, sizeof(contactname), "ContactName%d", i);
						    format(contactnumber, sizeof(contactnumber), "ContactNumber%d", i);
						    GetPVarString(playerid, contactname, cname, 50);
						    if(strlen(cname) < 2) format(cname, sizeof(cname), "None");
						    format(diatxt, sizeof(diatxt), "%s\n{FFFFFF}%s {33FF66}(%d)",diatxt, cname, GetPVarInt(playerid, contactnumber));
						}
					}
					ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST,"Contacts", diatxt, "Select","Edit");
	            }
	            case 2: // Text Message
	            {
	                if (GetPVarInt(playerid, "Mobile") != INVALID_MAXPL) return SendClientMessage(playerid, COLOR_GREY, "You are already on a call."), cmd_cellphone(playerid, "");
	                if (GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't do this while handcuffed/tazed."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Jailed") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Mute") == 1) return SendClientMessage(playerid,COLOR_LIGHTRED,"WARNING: You are currently muted."), cmd_cellphone(playerid, "");
                    if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while dead."), cmd_cellphone(playerid, "");
                    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-water"), cmd_cellphone(playerid, "");
	                ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
	            }
	            case 3: // Pickup Call
	            {
					new found = 0;
	                foreach(new i : Player)
	                {
	                    if(GetPVarInt(i, "PlayerLogged") == 1)
		                {
		                    if(GetPVarInt(i, "Mobile") == playerid)
		                    {
		                        found++;
		                        SetPVarInt(playerid, "Mobile", i);
		                        SetPVarInt(playerid, "RingTone", 0);
		                        SetPVarInt(playerid, "RingPhone", 0);
		                        SetPVarInt(GetPVarInt(playerid, "Mobile"), "RingPhone", 0);
				                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Call picked up.");
				                SendClientMessage(i, COLOR_LIGHTBLUE, "They picked up the call.");
		                        CellphoneState(playerid,1);
		                        DeletePVar(playerid, "CellMenu");
		                        CallRemoteFunction("LoadRadios","i", playerid);
		                        CallRemoteFunction("LoadRadios","i", i);
								break;
	                        }
	                    }
                	}
                	if(found == 0) SendClientMessage(playerid, COLOR_GREY, "You are not on any phone call."), cmd_cellphone(playerid, "");
	            }
	            case 4: // SPEAKER
	            {
	                switch(GetPVarInt(playerid, "Speaker"))
                    {
                        case 0:
                        {
                            SetPVarInt(playerid, "Speaker", 1);
    	                    GameTextForPlayer(playerid, "~w~Speaker ~g~On", 5000, 6);
                        }
                        case 1:
                        {
                            SetPVarInt(playerid, "Speaker", 0);
    	                    GameTextForPlayer(playerid, "~w~Speaker ~r~Off", 5000, 6);
                        }
                    }
                    DeletePVar(playerid, "ContactNum");
	                DeletePVar(playerid, "CellMenu");
	                CellphoneState(playerid,2);
	            }
	            case 5: // Pocket Phone
	            {
	                DeletePVar(playerid, "ContactNum");
	                DeletePVar(playerid, "CellMenu");
                    if(GetPVarInt(playerid, "Mobile") != INVALID_MAXPL)
                    {
                        if(GetPVarInt(playerid, "Mobile") < INVALID_MAXPL)
                        {
                            SendClientMessage(playerid, COLOR_GREY, "You hanged up.");
                            SendClientMessage(GetPVarInt(playerid, "Mobile"), COLOR_GREY, "The person on the other line has ended the call.");
                            if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "CellMenu") == 0) CellphoneState(GetPVarInt(playerid, "Mobile"),2);
                            SetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile", INVALID_MAXPL);
                            SetPVarInt(GetPVarInt(playerid, "Mobile"), "RingTone", 0);
                            SetPVarInt(GetPVarInt(playerid, "Mobile"), "RingPhone", 0);
                            CellphoneState(playerid,2);
      	                    if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "PayPhone") == 0)
      	                    {
			                    TogglePlayerControllableEx(GetPVarInt(playerid, "Mobile"),true);
				                DeletePVar(GetPVarInt(playerid, "Mobile"),"PayPhone");
                                DeletePVar(GetPVarInt(playerid, "Mobile"),"PhoneID");
		                    }
		                    CallRemoteFunction("LoadRadios","i", playerid);
		                    CallRemoteFunction("LoadRadios","i", GetPVarInt(playerid, "Mobile"));
		                    SetPVarInt(playerid, "Mobile", INVALID_MAXPL); // Disable the phone call.
		                    SetPVarInt(playerid, "RingPhone", 0);
		                    return 1;
		                }
                    }
                    foreach(new i : Player)
                    {
                        if(GetPVarInt(i, "Mobile") == playerid)
                        {
                            SetPVarInt(i, "RingTone", 0);
                            SetPVarInt(i, "RingPhone", 0);
                            SetPVarInt(i, "Mobile", INVALID_MAXPL); // Disable the phone call.
							cancelPayphone(i);
                            SendClientMessage(i, COLOR_GREY, "They hung up.");
	                        if(GetPVarInt(i, "CellMenu") == 0)
	                        {
							    CellphoneState(i,2);
							}
							CallRemoteFunction("LoadRadios","i", i);
                        }
                    }
                    SetPVarInt(playerid, "RingTone", 0);
                    SetPVarInt(playerid, "RingPhone", 0);
                    SetPVarInt(playerid, "Mobile", INVALID_MAXPL); // Disable the phone call.
	                CellphoneState(playerid,2);
	                CallRemoteFunction("LoadRadios","i", playerid);
	            }
	        }
		}
		case 39: // Calling
		{
			if(!response) {
				if(GetPVarInt(playerid, "usingPayphone") >= 0) {
					cancelPayphone(playerid);
					return 1;
				}
				return cmd_cellphone(playerid, "");
			}
			CallNumber(playerid, inputtext);
		}
		case 40: // Cellphone Texting FIND NUMBER
		{
		    switch(response)
	        {
	            case 0: cmd_cellphone(playerid, "");
	            case 1:
	            {
	                if(!strlen(inputtext))
	                {
	                    ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
						return 1;
	                }
	                if(strlen(inputtext) >= 15)
	                {
					    SendClientMessage(playerid, COLOR_WHITE, "Number is too long (15 Chars max).");
					    ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
					    return 1;
					}
	                foreach(new i : Player)
					{
		    			if(GetPVarInt(i, "PlayerLogged") == 1 && i != playerid)
		    			{
							format(string, 128, "%d", GetPVarInt(i, "PhoneNum"));
							if(strcmp(string, inputtext, true) == 0)
							{
							    if (i == playerid) ShowPlayerDialog(playerid,110,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
							    format(sendername, sizeof(sendername), "%s", PlayerNameEx(i));
      	    				    GiveNameSpace(sendername);
      	    				    format(string, sizeof(string),"Enter the message you would like to send to %s.", sendername);
      	    				    ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT,"Texting",string,"Enter", "Go Back");
		    				    strmid(PlayerInfo[playerid][pCellname], inputtext, 0, strlen(inputtext), 255);
							    return true;
							}
					    }
					}
					SendClientMessage(playerid, COLOR_GREY, "Could not find anyone with that number."), ShowPlayerDialog(playerid,110,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
	            }
			}
		}
		case 41: // Cellphone Texting SEND MESSAGE
		{
		    if(!response) return cmd_cellphone(playerid, "");
			SmsNumber(playerid, inputtext);
		}
		case 42: //Contact selected
		{
			if(response)
			{
				SetPVarInt(playerid, "SelectedContact", listitem + 1);
    			ShowPlayerDialog(playerid, 43, DIALOG_STYLE_MSGBOX, "Contacts", "Select your option.","Call","Text");
			}
			else
			{
			    SetPVarInt(playerid, "SelectedContact", listitem + 1);
			    ShowPlayerDialog(playerid, 44, DIALOG_STYLE_MSGBOX, "Contacts", "What would you like to edit?","Name","Number");
			}
		}
		case 43: //Call or text contact
		{
		    if(!response)
		    {
		    	new contactnumber[40], i = GetPVarInt(playerid, "SelectedContact"), number[50];
			    format(contactnumber, sizeof(contactnumber), "ContactNumber%d", i);
				format(number, sizeof(number), "%d", GetPVarInt(playerid, contactnumber));
				new found = 0;
				foreach(new ip : Player)
				{
		    	    if(GetPVarInt(ip, "PlayerLogged") == 1 && ip != playerid)
		    		{
					    format(string, 128, "%d", GetPVarInt(ip, "PhoneNum"));
						if(strcmp(string, number, true) == 0)
						{
						    found++;
						    if (ip == playerid) ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
							format(sendername, sizeof(sendername), "%s", PlayerNameEx(ip));
      	    				GiveNameSpace(sendername);
      	    				format(string, sizeof(string),"Enter the message you would like to send to %s.", sendername);
      	    				ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT,"Texting",string,"Enter", "Go Back");
		    				strmid(PlayerInfo[playerid][pCellname], number, 0, strlen(number), 255);
		    				return true;
					    }
				    }
				}
				if(found == 0)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Could not find anyone with that number.");
				    ShowPlayerDialog(playerid,41,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
				}
		    }
		    else
		    {
		        new contactnumber[40], i, number[50];
       	 		i = GetPVarInt(playerid, "SelectedContact");
			    format(contactnumber, sizeof(contactnumber), "ContactNumber%d", i);
				format(number, sizeof(number), "%d", GetPVarInt(playerid, contactnumber));
				CallNumber(playerid, number);
		    }
		}
		case 44: //Edit contact
		{
		    if(!response) //Number
		    {
		        ShowPlayerDialog(playerid, 45, DIALOG_STYLE_INPUT, "Contact", "Insert the number you'd like to assign to this slot.", "Select","Cancel");
		    }
		    if(response) //Name
		    {
		        ShowPlayerDialog(playerid, 46, DIALOG_STYLE_INPUT, "Contact", "Insert the name you'd like to assign to this slot.","Select","Cancel");
		    }
		}
		case 45: //Edit number
		{
		    if(!response) return cmd_cellphone(playerid, "");
			new number = strval(inputtext), i = GetPVarInt(playerid, "SelectedContact"), slot[50];
			format(slot, sizeof(slot), "ContactNumber%d", i);
			SetPVarInt(playerid, slot, number);
			SCM(playerid, -1, "Contact Editted!.");
            cmd_cellphone(playerid, "");
		}
		case 46: //Edit name
		{
		    if(!response) return cmd_cellphone(playerid, "");
			new name[50], i = GetPVarInt(playerid, "SelectedContact"), slot[50];
			format(name, 50, "%s", inputtext);
			format(slot, sizeof(slot), "ContactName%d", i);
			SetPVarString(playerid, slot, name);
			SCM(playerid, -1, "Contact Editted!.");
            cmd_cellphone(playerid, "");
		}
		case 54: // Hospital Floor
	    {
			new Float:X = 0.0, Float:Y = 0.0, Float:Z = 0.0;
	        switch(listitem)
	        {
	            case 0:
	            {
	                X=2038.4750;
	                Y-=1365.0499;
	                Z=1271.5000;
	            }
	            case 1:
	            {
	                X=2055.4756;
	                Y-=673.1822;
	                Z=1478.8860;
	            }
	            case 2:
	            {
	                X=1994.9702;
	                Y-=1534.0613;
	                Z=1174.6000;
	            }
	        }
	        TogglePlayerControllableEx(playerid, false);
	        SetPlayerPosEx(playerid, X, Y, Z+1.0);
	        SetTimerEx("TogglePlayerControllableEx", 3000, false, "ii", playerid, true);
	        Streamer_Update(playerid);
	    }
	    case 55: // BZIZ RADIO
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0: // Radio Stations
		        {
		            new result[2048];
		            for(new i = 0; i < sizeof(CarRadio); i++)
			        {
			            if(i == 0) { format(result, 2048, "%s", CarRadio[i][cName]); }
			            else { format(result, 2048, "%s\n%s", result, CarRadio[i][cName]); }
			        }
		            ShowPlayerDialog(playerid,56,DIALOG_STYLE_LIST,"Radio Stations", result, "Select", "Go Back");
		        }
		        case 1: // Direct Link
		        {
		            ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 URL you would like to play.", "Enter", "Go Back");
		        }
		        case 2: // Turn Off
		        {
		            strmid(BizInfo[GetPVarInt(playerid, "BizzKey")][bRadio], "None", 0, strlen("None"), 255);
		            GameTextForPlayer(playerid, "~w~Radio~n~~r~OFF", 4000, 3);
		            foreach(new i : Player)
		            {
		                if(GetPVarInt(i, "BizzEnter") == GetPVarInt(playerid, "BizzKey"))
		                {
		                    StopAudioStreamForPlayerEx(i);
		                }
		            }
		        }
		    }
		}
		case 56:
		{
		    if(!response) return cmd_biz(playerid, "radio");
		    if(listitem != 0) {
				PlayBizzRadio(GetPVarInt(playerid, "BizzKey"), CarRadio[listitem][cURL]);
			} else {
				PlayBizzRadio(GetPVarInt(playerid, "BizzKey"), RadioLSStream, 1);
				BizInfo[GetPVarInt(playerid, "BizzKey")][bOnRLS] = 1;
			}
		}
		case 57:
		{
		    if(!response) return cmd_biz(playerid, "radio");
		    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 URL you would like to play.", "Enter", "Go Back");
	        if(strlen(inputtext) > 256) return ShowPlayerDialog(playerid, 57, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 URL you would like to play.", "Enter", "Go Back");
		    PlayBizzRadio(GetPVarInt(playerid, "BizzKey"), inputtext);
		}
		case 58:
		{
		    if(response != 1) return DeletePVar(playerid, "RadioInfoID");
		    new id = GetPVarInt(playerid, "RadioInfoID");
		    switch(listitem)
	        {
	            case 0: ShowPlayerDialog(playerid,59,DIALOG_STYLE_INPUT,"BOOMBOX URL LINK","Enter in a direct .mp3 link and it will play on the radio\n{FF0000}Do not enter a link that will not respond.","Enter", "Close");
		        case 1: // Radio Stations
		        {
		            new result[2048];
		            for(new i = 0; i < sizeof(CarRadio); i++) {
			            if(i == 0) { format(result, 2048, "%s", CarRadio[i][cName]); }
			            else { format(result, 2048, "%s\n%s", result, CarRadio[i][cName]); }
			        }
		            ShowPlayerDialog(playerid, 60, DIALOG_STYLE_LIST, "Radio Stations", result, "Select", "Go Back");
		        }
	            case 2:
				{
				    DeletePVar(playerid, "RadioInfoID");
				    switch(RadioInfo[id][rStatus])
				    {
				        case 0:
				        {
				            if(strcmp(RadioInfo[id][rURL],"NULL", true) == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You must enter a URL before turning the radio on!");
				            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Boombox on!");
				            RadioInfo[id][rStatus]=1;
				            foreach(new i : Player)
							{
								if(GetPlayerZone(i) == RadioInfo[id][rAreaID])
								{
								    PlayAudioStreamForPlayerEx(i, RadioInfo[id][rURL], RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ], 50.0, 1);
								}
							}
				        }
				        case 1:
				        {
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "Boombox off!");
							RadioInfo[id][rStatus]=0;
							foreach(new i : Player)
							{
								if(GetPlayerZone(i) == RadioInfo[id][rAreaID])
								{
								    StopAudioStreamForPlayerEx(i);
								}
							}
				        }
				    }
	            }
	            case 3:
	            {
					if(!CheckInv(playerid)) {
						DeletePVar(playerid, "RadioInfoID");
						return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is full!");
					}
	                DeletePVar(playerid, "RadioInfoID");
	                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Boombox picked up!");
	                if(RadioInfo[id][rStatus] != 0)
	                {
						foreach(new ia : Player)
					    {
				            if(GetPlayerZone(ia) == RadioInfo[id][rAreaID])
					        {
						        StopAudioStreamForPlayerEx(ia);
						    }
						}
	                }
	                RadioInfo[id][rX] = 0.0;
		            RadioInfo[id][rY] = 0.0;
		            RadioInfo[id][rZ] = 0.0;
		            RadioInfo[id][rStatus] = 0;
		            RadioInfo[id][rAreaID] = 0;
		            strmid(RadioInfo[id][rOwner], "None", 0, strlen("None"), 255);
		            strmid(RadioInfo[id][rURL], "None", 0, strlen("None"), 255);
		            if(IsValidDynamicObject(RadioInfo[id][rObject])) DestroyDynamicObject(RadioInfo[id][rObject]);
                    DestroyDynamic3DTextLabel(RadioInfo[id][rText]);
					GiveInvItem(playerid, 1003, 1, 0);
	            }
	        }
		}
		case 59:
		{
		    if(response != 1) return DeletePVar(playerid, "RadioInfoID");
		    new id = GetPVarInt(playerid, "RadioInfoID");
		    for(new i=0;i<sizeof(RadioInfo);i++)
		    {
                if(strcmp(RadioInfo[i][rURL], inputtext, true) == 0)
			    {
		    	    if(RadioInfo[i][rAreaID] > 0 && i != id)
				    {
				        SendClientMessage(playerid, COLOR_WHITE, "You cannot use the same URL as another radio!");
				        DeletePVar(playerid, "RadioInfoID");
				        return true;
		    	    }
	    	    }
		    }
		    DeletePVar(playerid, "RadioInfoID");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Boombox URL set!");
			RadioInfo[id][rOnRLS] = 0;
			format(RadioInfo[id][rURL], 128, "%s", inputtext);
		    if(RadioInfo[id][rStatus] == 0) return true;
            foreach(new i : Player)
			{
			    if(GetPlayerZone(i) == RadioInfo[id][rAreaID])
				{
				    PlayAudioStreamForPlayerEx(i, inputtext, RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ], 50.0, 1);
				}
		    }
		}
		case 60:
		{
		    if(!response) return DeletePVar(playerid, "RadioInfoID");
		    new id = GetPVarInt(playerid, "RadioInfoID");
		    if(listitem != 0) {
				format(RadioInfo[id][rURL], 128, "%s", CarRadio[listitem][cURL]);
				RadioInfo[id][rOnRLS] = 0;
			} else {
				format(RadioInfo[id][rURL], 128, "%s", RadioLSStream);
				RadioInfo[id][rOnRLS] = 1;
			}
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Boombox station set!");
		    if(RadioInfo[id][rStatus] == 0) return true;
            foreach(new i : Player) {
			    if(GetPlayerZone(i) == RadioInfo[id][rAreaID]) {
				    PlayAudioStreamForPlayerEx(i, RadioInfo[id][rURL], RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ], 50.0, 1);
				}
		    }			
			DeletePVar(playerid, "RadioInfoID");
		}
	    case 64: // /holdo dialog
	    {
	        switch(response)
	        {
	            case 1:
	            {
	                SendClientMessage(playerid, COLOR_LIGHTRED, "WARNING: Make sure the object is properly roleplayed or you will be ajailed.");
	                switch(listitem)
		            {
		                case 0: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 2114, 6, 0.075940, 0.160764, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
		                case 1: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 1210, 6, 0.291194, 0.091378, 0.058045, 4.921525, 258.763824, 0.0, 1.0, 1.0, 1.0);
		                case 2: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 1212, 6, 0.105605, 0.043076, 0.019798, 0.0, 265.589691, 0.0, 1.0, 1.0, 1.0);
		                case 3: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 2881, 6, -0.028293, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
		                case 4: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 2880, 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
		                case 5: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 18632, 6, 0.087079, 0.048070, 0.031638, 185.621994, 0.0, 0.0, 1.0, 1.0, 1.0);
		                case 6: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 338, 6, 0.0, 0.0, 0.0);
		                case 7: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 366, 6, 0.0, 0.0, 0.0);
		                case 8: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 1277, 6, 0.074097, 0.016038, 0.009600, 359.580230, 350.386047, 14.481473, 0.250683, 1.0, 0.250702);
		                case 9: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 2103, 6, 0.347276, 0.018217, 0.056332, 15.577089, 265.794799, 0.0, 0.719023, 1.0, 0.554738);
		                case 10: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 19078, 4, -0.054276, 0.0, 0.028016, 195.591888, 204.274688, 0.0, 0.748166, 1.0, 0.740877);
		                case 11: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 18641, 5, 0.091820, 0.024471, -0.033493, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
		                case 12: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 18644, 6, 0.077635, 0.014523, 0.0, 174.836212, 7.079411, 0.0, 1.008414, 1.0, 0.747666);
		                case 13: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 18635, 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
		                case 14: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 19087, 6, 0.058083, 0.008219, 0.472783, 0.0, 0.0, 0.0, 1.674143, 1.0, 0.327090);
		                case 15: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 339, 6, 0.0, 0.0, 0.0);
		                case 16: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 341, 6, 0.0, 0.0, 0.0);
		                case 17: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 932, 1, -0.780373, 0.043744, 0.089657, 188.440246, 92.957847, 355.417968, 1.0, 1.0, 1.0);
		                case 18: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 18634, 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
		                case 19: SetPlayerAttachedObject(playerid, HOLDOBJECT_BENCH, 18633, 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
		            }
	            }
			}
		}
		case 65:
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 3) CreateEMSVehicle(playerid, 544, 3, 3);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		        case 1:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 3) CreateEMSVehicle(playerid, 407, 3, 3);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		        case 2:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 3) CreateEMSVehicle(playerid, 407, 6, 3);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		        case 3: CreateEMSVehicle(playerid, 416, 1, 3);
		        case 4: CreateEMSVehicle(playerid, 416, 3, 1);
		        case 5: CreateEMSVehicle(playerid, 416, 3, 3);
		        case 6: CreateEMSVehicle(playerid, 416, 1, 1);
		        case 7:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 3) CreateEMSVehicle(playerid, 599, 3, 1);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		        case 8:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 8) CreateEMSVehicle(playerid, 427, 6, 6);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		        case 9:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 8) CreateEMSVehicle(playerid, 490, 3, 3);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		        case 10:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 3) CreateEMSVehicle(playerid, 442, 1, 0);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		        case 11: CreateEMSVehicle(playerid, 525, 3, 3);
		        case 12:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 4) CreateEMSVehicle(playerid, 563, 3, 1);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		        case 13:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 3) CreateEMSVehicle(playerid, 497, 3, 1);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		        case 14:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 5) CreateEMSVehicle(playerid, 427, 3, 3);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		        case 15:
		        {
		            if(GetPVarInt(playerid, "Rank") >= 13) CreateEMSVehicle(playerid, 596, 3, 1);
				    else SendClientMessage(playerid,COLOR_GREY,"You are not high enough rank to do this.");
		        }
		    }
		}
		case 66: // SEXSHOP DIALOG
		{
		    if(!response) return true;
		    SetPVarInt(playerid, "PDBT", 7), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: $%d~n~Cash: $%d - Bank: $%d", SexItems[listitem][1], GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"));
		    ConfigPayment(playerid, 1, string);
		}
		case 67: // WAREHOUSE DIALOG
		{
		    if(!response) return true;
			if(listitem == sizeof(WarItems)) {
				if(!CheckInvItem(playerid, 404)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a watch to pawn.");
				RemoveInvItem(playerid, 404);
				GivePlayerMoneyEx(playerid,150);
				scm(playerid, COLOR_WHITE, "You've pawned a watch for $150.");
				return true;
			}
			if(listitem == (sizeof(WarItems)+1)) {
				if(!CheckInvItem(playerid, 405)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a cellphone to pawn.");
				RemoveInvItem(playerid, 405);
				GivePlayerMoneyEx(playerid,300);
				scm(playerid, COLOR_WHITE, "You've pawned a cellphone for $300.");
				return true;
			}
			if(listitem == (sizeof(WarItems)+2)) {
				if(!CheckInvItem(playerid, 408)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a MP3 player to pawn.");
				RemoveInvItem(playerid, 408);
				GivePlayerMoneyEx(playerid,75);
				scm(playerid, COLOR_WHITE, "You've pawned a MP3 player for $75.");
				return true;
			}
		    SetPVarInt(playerid, "PDBT", 8), SetPVarInt(playerid, "PDBTLI", listitem);
		    format(string, sizeof(string), "Would you like to purchase this item?~n~Cost: $%d~n~Cash: $%d - Bank: $%d", WarItems[listitem][1], GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"));
		    ConfigPayment(playerid, 1, string);
		}
		case 68: // HOUSE RADIO
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0: // Radio Stations
		        {
		            new result[2048];
		            for(new i = 0; i < sizeof(CarRadio); i++)
			        {
			            if(i == 0) { format(result, 2048, "%s", CarRadio[i][cName]); }
			            else { format(result, 2048, "%s\n%s", result, CarRadio[i][cName]); }
			        }
		            ShowPlayerDialog(playerid,69,DIALOG_STYLE_LIST,"Radio Stations", result, "Select", "Go Back");
		        }
		        case 1: // Direct Link
		        {
		            ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 URL you would like to play.", "Enter", "Go Back");
		        }
		        case 2: // Turn Off
		        {
		            strmid(HouseInfo[GetPVarInt(playerid, "HouseKey")][hRadioU], "None", 0, strlen("None"), 255);
		            GameTextForPlayer(playerid, "~w~Radio~n~~r~OFF", 4000, 3);
		            foreach(new i : Player)
		            {
		                if(GetPVarInt(i, "HouseEnter") == GetPVarInt(playerid, "HouseKey"))
		                {
		                    StopAudioStreamForPlayerEx(i);
		                }
		            }
		        }
		    }
		}
		case 69:
		{
		    if(!response) return cmd_house(playerid, "radio");
		    if(listitem != 0) {
				PlayHouseRadio(GetPVarInt(playerid, "HouseKey"), CarRadio[listitem][cURL]);
			} else {
				PlayHouseRadio(GetPVarInt(playerid, "HouseKey"), RadioLSStream, 1);
				HouseInfo[GetPVarInt(playerid, "HouseKey")][hOnRLS] = 1;
			}
		}
		case 70:
		{
		    if(!response) return cmd_house(playerid, "radio");
		    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 URL you would like to play.", "Enter", "Go Back");
	        if(strlen(inputtext) > 256) return ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 URL you would like to play.", "Enter", "Go Back");
		    PlayHouseRadio(GetPVarInt(playerid, "HouseKey"), inputtext);
		}
		case 72: // Walkstyle dialog
	    {
	        switch(response)
	        {
	            case 0: cmd_options(playerid, "");
	            case 1: // Selecting
	            {
	                cmd_options(playerid, "");
					switch(listitem)
					{
					     case 0: SetPlayerWalkStyle(playerid,WALKSTYLE_GANG1);
					     case 1: SetPlayerWalkStyle(playerid,WALKSTYLE_GANG2);
					     case 2: SetPlayerWalkStyle(playerid,WALKSTYLE_NORMAL);
					     case 3: SetPlayerWalkStyle(playerid,WALKSTYLE_SEXY);
					     case 4: SetPlayerWalkStyle(playerid,WALKSTYLE_OLD);
					     case 5: SetPlayerWalkStyle(playerid,WALKSTYLE_SNEAK);
					     case 6: SetPlayerWalkStyle(playerid,WALKSTYLE_BLIND);
					     case 7: SetPlayerWalkStyle(playerid,WALKSTYLE_ARMED);
					     case 8: SetPlayerWalkStyle(playerid,WALKSTYLE_POLICE);
					     case 9: RemovePlayerWalkStyle(playerid);
					}
	            }
	        }
	    }
	    case 73: {
		    if(GetPVarInt(playerid, "RentKey") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: You already rent a vehicle, (/unrent)!");
			if(GetPlayerMoneyEx(playerid) >= 50) {
			    if(GetPlayerScore(playerid) > 8){
				    GivePlayerMoneyEx(playerid, -50);
					SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your $50 purchase !");
				}
				
				SendClientMessage(playerid, COLOR_WHITE, "To unrent your rental vehicle type (/unrent).");
				new found = 0, foundid = 0;
				for(new r = 0; r < sizeof(RentalSpot); r++) {
				    if(IsPlayerInRangeOfPoint(playerid, 20.0, RentalSpot[r][0], RentalSpot[r][1], RentalSpot[r][2])) {
					    if(found == 0) {
						    found++;
							foundid=r;
					    }
				    }
				}
				
				new veh;
				new rancol = random(200) + 1;
				veh = CreateVehicle(gRentalIDs[listitem][0], RentalSpot[foundid][3], RentalSpot[foundid][4], RentalSpot[foundid][5], RentalSpot[foundid][6], rancol,rancol, -1);
				Iter_Add(Vehicle, veh);
				VehicleInfo[veh][vFuel]=100, VehicleInfo[veh][vEngine]=0;
    			VehicleInfo[veh][vWindows]=0, VehicleInfo[veh][vID]=0;
    			VehicleInfo[veh][vLights]=0, VehicleInfo[veh][vCreated]=1;
				VehicleInfo[veh][vType] = VEHICLE_RENTAL, VehicleInfo[veh][vJob]=0;
				VehicleInfo[veh][vLights] = 0, VehicleInfo[veh][vLock] = 0;
				SetVehicleNumberPlate(veh, "RENTAL");
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(veh,engine,lights,alarm,0,bonnet,boot,objective);
    			SetVehicleToRespawn(veh);
				SetPVarInt(playerid, "RentKey", veh);
		        PutPlayerInVehicleEx(playerid, veh, 0);
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds !");
		}
		/*case 74: // House Furniture Dialog
	    {
			if(!response) return true;
			new objectid=FurnitureObject[listitem][fmodel], Float:X, Float:Y, Float:Z, obj = 0;
			GetPlayerPos(playerid, X, Y, Z);
			obj = CreatePlayerObject(playerid, objectid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
			SetPVarInt(playerid, "FurnObject", obj);
			SetPVarInt(playerid, "EditorMode", 1);
			SetPVarInt(playerid, "Mute", 1);
			SetPVarInt(playerid, "FurnID", listitem);
			EditPlayerObject(playerid, obj);
			format(string, sizeof(string),"%d selected, use the SPRINT key to navigate.", );
			SendClientMessage(playerid, COLOR_WHITE, string);
		}*/
		case 75: // House Furniture AGREEMENT Dialog
	    {
	        if(!response) return true;
	        new keyex = FurnRight(playerid, 1);
            if(keyex == -1) return true;
			new cost = 250;
			if(GetPVarInt(playerid, "MonthDon") > 0) { cost = 0; }
			if(GetPlayerMoneyEx(playerid) >= cost) {
         	    if(GetPlayerInterior(playerid) == 0) {
             	    new Float:distance = GetDistanceFromPointToPoint(PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], HouseInfo[keyex][hXo], HouseInfo[keyex][hYo], HouseInfo[keyex][hZo]);
             	    if(distance > HOUSE_PLANT_DISTANCE) {
             	        scm(playerid, COLOR_LIGHTRED, "WARNING: Object is too far from the property and could not be planted!");
             	        return 1;
             	    } else {
						new found = 0;      
             	        for(new i = 0; i < sizeof(FurnObjs); i++) {
                            if(PlayerInfo[playerid][pFurnID] == FurnObjs[i]) {
							    found++;
								break;
                            }
	                    }
	                    if(found == 0) {
	                    	if(GetCount() > GetPVarInt(playerid, "OutDelay")) {
								format(string, sizeof(string), "AdmWarn: %s has planted objectid: %d(%s) outside of houseid: %d.", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pFurnID], GetObjName(PlayerInfo[playerid][pFurnID]), keyex);
								SendAdminMessage(COLOR_YELLOW, string);
								scm(playerid, COLOR_LIGHTRED, "WARNING: Abusing the outdoor objects system will result in a permanent ban!");
								SetPVarInt(playerid, "OutDelay", GetCount()+10000); 
							} else scm(playerid, COLOR_LIGHTRED, "You can only place 1 outdoor object every 10 seconds!");
						}
             	    }
				}			
          		format(string, sizeof(string),"~r~-$%d", cost);
          		GameTextForPlayer(playerid, string, 5000, 1);
             	GivePlayerMoneyEx(playerid, -cost);
           	    BuildHouseObject(playerid, PlayerInfo[playerid][pFurnID], PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], PlayerInfo[playerid][pFurnR][0], PlayerInfo[playerid][pFurnR][1], PlayerInfo[playerid][pFurnR][2]);
         	}
	        else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
	    }
	    case 76:
        {
            if(response)
            {
                new furnid = 0, furnitname[100];
				key = FurnRight(playerid, 1);
                furnitname="N/A";
				for(new xe;xe<sizeof(FurnObjs);xe++)
                {
                    if(HouseInfo[key][hoID][GetPVarInt(playerid, "FurnEditH")] == FurnObjs[xe])
                    {
                        format(furnitname, 100, "%d", FurnObjs[xe]);
                        furnid=xe;
						break;
		            }
                }
                //new priceex = 100;
                switch(listitem)
                {
                    case 0: // Edit Object
                    {
                        new obj = 0, h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1);
                        obj = CreatePlayerObject(playerid, HouseInfo[key2][hoID][h], HouseInfo[key2][hoX][h], HouseInfo[key2][hoY][h], HouseInfo[key2][hoZ][h], HouseInfo[key2][horX][h], HouseInfo[key2][horY][h], HouseInfo[key2][horZ][h], 100.0);
                        SetPVarInt(playerid, "FurnObject", obj);
			            SetPVarInt(playerid, "EditorMode", 2);
			            SetPVarInt(playerid, "Mute", 1);
			            PlayerInfo[playerid][pFurnID]=furnid;
			            EditPlayerObject(playerid, obj);
			            format(string, sizeof(string),"%s selected, use the SPRINT key to navigate.", furnitname);
			            SendClientMessage(playerid, COLOR_WHITE, string);
                    }
					case 1: // Input Position
					{
						if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						ShowPlayerDialog(playerid, 539, DIALOG_STYLE_LIST, "What axis do you want to edit?", "X-pos\nY-pos\nZ-pos\nX-rotation\nY-rotation\nZ-rotation", "Continue", "Close");
					}
					case 2: // Select Material
					{
					    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						SendClientMessage(playerid,COLOR_LIGHTRED,"WARNING: Editing an invalid-layer MAY cause parts of the object to turn invisible, resetting the layers material will fix this.");
						SendClientMessage(playerid,COLOR_LIGHTBLUE,"When you choose a layer to edit, that layer becomes highlighted in red.");
						ShowPlayerDialog(playerid, 503, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12", "Select", "Close");
					}
					case 3: // Reset Material
					{
						if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						new i = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1);
						if(IsValidDynamicObject(HouseInfo[key2][hObject][i])) DestroyDynamicObject(HouseInfo[key2][hObject][i]);
						HouseInfo[key2][hObject][i] = CreateDynamicObject(HouseInfo[key2][hoID][i], HouseInfo[key2][hoX][i], HouseInfo[key2][hoY][i], HouseInfo[key2][hoZ][i], HouseInfo[key2][horX][i], HouseInfo[key2][horY][i], HouseInfo[key2][horZ][i], key2);
						Streamer_Update(playerid);
						SendClientMessage(playerid,COLOR_LIGHTBLUE,"You've reset the selected objects material.");
						for(new v=0; v < 13; v++) {
							HouseMInfo[key2][i][v] = 0;
						}
						SaveFurnObj(key2, i);
					}
                    case 4: // Remove Object
                    {
                        if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
                        new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1), priceex = 100;
                        if(IsValidDynamicObject(HouseInfo[key2][hObject][h])) DestroyDynamicObject(HouseInfo[key2][hObject][h]);
			            HouseInfo[key2][hObject][h]=0;
			            HouseInfo[key2][hoID][h]=0;
		    	        HouseInfo[key2][hoX][h] = 0.0;
		                HouseInfo[key2][hoY][h] = 0.0;
			            HouseInfo[key2][hoZ][h] = 0.0;
			            HouseInfo[key2][horX][h] = 0.0;
		                HouseInfo[key2][horY][h] = 0.0;
			            HouseInfo[key2][horZ][h] = 0.0;
		                HouseInfo[key2][hoInt][h]--;
		                format(string, 128, "%s removed.", furnitname);
		                SendClientMessage(playerid,COLOR_WHITE,string);
		                GivePlayerMoneyEx(playerid, priceex);
		                SaveFurnObj(key2, h);
                    }
                }
            }
        }
        case 78:
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0: CreateGovVehicle(playerid, 560, 0, 0);
		        case 1: CreateGovVehicle(playerid, 426, 0, 0);
		        case 2: CreateGovVehicle(playerid, 490, 0, 0);
		        case 3: CreateGovVehicle(playerid, 409, 0, 0);
				case 4: CreateGovVehicle(playerid, 487, 0, 0);
		    }
		}
		case 79: // GOV ARMOURY DIALOG
		{
		    if(!response) return true;
		    if(GovItems[listitem][0] == 1000) return SetPlayerArmourEx(playerid, 99.0);
		    if(GovItems[listitem][0] == 1001) return SetPlayerHealth(playerid, 100.0);
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(listitem == sizeof(GovItems))
		    {
		        ResetPlayerWeaponsEx(playerid);
		        SetPlayerArmourEx(playerid, 0.0);
				for(new p = 0; p < MAX_INV_SLOTS; p++)
				{
				    if(PlayerInfo[playerid][pInvItem][p] >= 22 && PlayerInfo[playerid][pInvItem][p] <= 41) // Weapons
				    {
					    RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][p], 0, p);
					}

					if(PlayerInfo[playerid][pInvItem][p] >= 100 && PlayerInfo[playerid][pInvItem][p] <= 128) // Armmo
				    {
					    RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][p], 0, p);
					}
				}
				return 1;
		    }
			else
			{
			    switch(GovItems[listitem][0])
			    {
			        case 1 .. 99:
			        {
			            if(CheckInvItem(playerid, GovItems[listitem][0])) return SendClientMessage(playerid, COLOR_WHITE, "You already have this item!");
			            if(GetPVarInt(playerid, "ConnectTime") <= 7) return SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient hours played!");
			        }
			    }
			    if(GetPVarInt(playerid, "Rank") >= GovItems[listitem][1])
			    {
			        if(GovItems[listitem][0] == 3) GiveInvItem(playerid, GovItems[listitem][0], 1, 0);
			        else if(GovItems[listitem][0] == 41) GiveInvItem(playerid, GovItems[listitem][0], 1000, 0);
			        else if(GovItems[listitem][0] == 43) GiveInvItem(playerid, GovItems[listitem][0], 50, 0);
			        else GiveInvItem(playerid, GovItems[listitem][0], PrintIQ(GovItems[listitem][0]), 0, PlayerInfo[playerid][pWepSerial]);
			        format(string, 128, "%s selected!", PrintIName(GovItems[listitem][0]), GovItems[listitem][1]);
			        SendClientMessage(playerid, COLOR_WHITE, string);
		        }
			    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient rank!");
		    }
		}
		case 80:
		{
		    if(!response) return EnableUCP(playerid, 0);
		    switch(listitem)
		    {
		        case 0: ShowPlayerDialog(playerid, 81, DIALOG_STYLE_INPUT, "Chat Style", "Select a preferred chat-style animation for your character\nChoose from numbers (1-8)", "Enter", "Go Back");
		        case 1: ShowPlayerDialog(playerid,72,DIALOG_STYLE_LIST,"Walk Style","Gang 1\nGang 2\nNormal\nSexy\nOld\nSneaking\nBlind\nArmed\nPolice\nRemove","Select", "Go Back");
		        case 2:
                {
		            cmd_options(playerid, "");
		            switch(GetPVarInt(playerid, "TogPM"))
    	            {
        	            case 0:
        	            {
            	            SetPVarInt(playerid, "TogPM", 1);
            	            SendClientMessage(playerid, COLOR_GREY, "Private Messages disabled!");
        	            }
        	            case 1:
        	            {
            	            SetPVarInt(playerid, "TogPM", 0);
            	            SendClientMessage(playerid, COLOR_GREY, "Private Messages enabled!");
        	            }
    	            }
		        }
		        case 3:
		        {
		            cmd_options(playerid, "");
		            switch(GetPVarInt(playerid, "TogHud"))
    	            {
        	            case 0:
        	            {
            	            SetPVarInt(playerid, "TogHud", 1);
            	            SendClientMessage(playerid, COLOR_GREY, "HUD disabled!");
            	            TextDrawHideForPlayer(playerid,MoneyDraw[playerid]);
            	            TextDrawHideForPlayer(playerid,MoneyDraw2);
            	            TextDrawHideForPlayer(playerid,LocationDraw[playerid]);
        	            }
       	                case 1:
        	            {
            	            SetPVarInt(playerid, "TogHud", 0);
            	            SendClientMessage(playerid, COLOR_GREY, "HUD enabled!");
            	            TextDrawShowForPlayer(playerid,MoneyDraw[playerid]);
            	            TextDrawShowForPlayer(playerid,MoneyDraw2);
            	            TextDrawShowForPlayer(playerid,LocationDraw[playerid]);
        	            }
    	            }
		        }
		        case 4:
		        {
		            cmd_options(playerid, "");
		            if(GetPVarInt(playerid, "AudioT") == 0)
		            {
			            SetPVarInt(playerid, "AudioT", 1);
			            SCM(playerid, -1, "Audio toggled off.");
		            }
		            else
		            {
			            SetPVarInt(playerid, "AudioT", 0);
			            SCM(playerid, -1, "Audio toggled on.");
		            }
		        }
		        case 5:
		        {
		            cmd_options(playerid, "");
		            if(GetPVarInt(playerid, "AutoReload") == 0)
		            {
 			            SetPVarInt(playerid, "AutoReload", 1);
 			            SCM(playerid, -1, "Auto-reload toggled OFF.");
		            }
		            else
		            {
			            SetPVarInt(playerid, "AutoReload", 0);
			            SCM(playerid, -1, "Auto-reload toggled ON.");
		            }
		        }
		        case 6: ShowPlayerDialog(playerid,82,DIALOG_STYLE_LIST,"Money Bar Color","Green\nRed\nWhite\nYellow\nPink\nBlue","Select", "Go Back");
		        case 7: ShowPlayerDialog(playerid,88,DIALOG_STYLE_LIST,"Cellphone Color","Dark Orange\nBlue\nLight Orange\nBlack\nPink\nRed\nGreen\nDark Blue\nYellow\nGrey\nWhite","Select", "Go Back");
		        case 8:
		        {
		            cmd_options(playerid, "");
		            if(GetPVarInt(playerid, "TogNews") == 0)
		            {
 			            SetPVarInt(playerid, "TogNews", 1);
 			            SCM(playerid, -1, "San News Radio toggled OFF.");
		            }
		            else
		            {
			            SetPVarInt(playerid, "TogNews", 0);
			            SCM(playerid, -1, "San News Radio toggled ON.");
		            }
		        }
		        case 9:
		        {
		            cmd_options(playerid, "");
		            if(GetPVarInt(playerid, "TogRadio") == 0)
		            {
 			            SetPVarInt(playerid, "TogRadio", 1);
 			            SCM(playerid, -1, "RLS Radio toggled OFF.");
		            }
		            else
		            {
			            SetPVarInt(playerid, "TogRadio", 0);
			            SCM(playerid, -1, "RLS Radio toggled ON.");
		            }
		        }
		        case 10:
		        {
		            cmd_options(playerid, "");
		            if(GetPVarInt(playerid, "TogB") == 0)
		            {
 			            SetPVarInt(playerid, "TogB", 1);
 			            SCM(playerid, -1, "Local-OOC Chat toggled OFF.");
		            }
		            else
		            {
			            SetPVarInt(playerid, "TogB", 0);
			            SCM(playerid, -1, "Local-OOC Chat toggled ON.");
		            }
		        }
				case 11:
				{
					cmd_options(playerid, "");
					if(PlayerInfo[playerid][pBuyDialog] == 0) {
						PlayerInfo[playerid][pBuyDialog] = 1;
						SCM(playerid, -1, "Payment type textdraw disabled.");
						format(string, sizeof(string), "UPDATE `accounts` SET `BuyDialog`=1 WHERE Name='%s'", PlayerName(playerid));
						mysql_tquery(handlesql, string);
					} else {
						PlayerInfo[playerid][pBuyDialog] = 0;
						SCM(playerid, -1, "Payment type textdraw enabled.");
						format(string, sizeof(string), "UPDATE `accounts` SET `BuyDialog`=0 WHERE Name='%s'", PlayerName(playerid));
						mysql_tquery(handlesql, string);					
					}
				}
		    }
		}
		case 81:
		{
		    cmd_options(playerid, "");
		    if(!response) return true;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext);
	        if(amount <= 0) return true;
	        if(amount > 8) return true;
	        format(string, sizeof(string), "Chatstyle set to [%d].", amount);
	        SCM(playerid, COLOR_WHITE, string);
	        SetPVarInt(playerid, "ChatStyle", amount);
		}
		case 82:
		{
		    cmd_options(playerid, "");
		    if(!response) return true;
		    new result[50];
		    switch(listitem)
		    {
			    case 0: result="green";
			    case 1: result="red";
			    case 2: result="white";
			    case 3: result="yellow";
			    case 4: result="pink";
			    case 5: result="blue";
		    }
		    format(string, sizeof(string), "Moneybar color set to [%s].", result);
	        SCM(playerid, COLOR_WHITE, string);
		    SetPVarInt(playerid, "HudCol", listitem);
		    SetSlidedMoneyBar(playerid);
		}
		case 86:
		{
		    if(!response) return true;
		    format(string, sizeof(string),"GPS marker set on lcoation [%s]." , Locations[listitem][lname]);
		    SCM(playerid, COLOR_WHITE, string);
		    SetPlayerCheckpoint(playerid, Locations[listitem][lx], Locations[listitem][ly], Locations[listitem][lz], 1.5);
		}
		case 87:
		{
		    if(!response) return 1;
		    new i, text[128];
		    i = listitem;
		    format(text, sizeof(text), "Government: You took skin '%s'", Govskin[i][Name]);
	    	SetPlayerSkinEx(playerid, Govskin[i][SkinID]);
	    	SCM(playerid, -1, text);
		}
		case 88:
		{
		    cmd_options(playerid, "");
		    if(!response) return 1;
		    new object = 0;
		    switch(listitem)
		    {
		        case 0: object=18865;
		        case 1: object=18866;
		        case 2: object=18867;
		        case 3: object=18868;
		        case 4: object=18869;
		        case 5: object=18870;
		        case 6: object=18871;
		        case 7: object=18872;
		        case 8: object=18873;
		        case 9: object=18874;
		        case 10: object=19513;
		    }
		    SCM(playerid, COLOR_WHITE, "Cellphone color changed!");
		    SetPVarInt(playerid, "CellCol", object);
        }
        case 89:
        {
            new option[5], optionname[5][128];
            option[0]=1, optionname[0]="Last Location";
            if(GetPVarInt(playerid,"HouseKey") != 0) option[1]=1, optionname[1]="Property";
			if(GetPVarInt(playerid,"BizzKey") != 0) option[2]=1, optionname[2]="Business";
			if(GetPVarInt(playerid,"Member") == 1 || GetPVarInt(playerid,"Member") == 2) option[3]=1, optionname[3]="Faction HQ";
			for(new i = 1; i < 4; i++)
			{
				if(listitem == i && option[i] == 0)
				{
					listitem=i+1;
				}
			}
			format(string, sizeof(string), "Selected Spawnpoint: %s!", optionname[listitem]);
			SCM(playerid, COLOR_WHITE, string);
			switch(listitem)
			{
			    /*case 0: // Last Location
			    {
			    }*/
			    case 1: // Property
			    {
			        key = GetPVarInt(playerid,"HouseKey");
			        SetPVarFloat(playerid, "PosX", HouseInfo[key][hXi]);
			        SetPVarFloat(playerid, "PosY", HouseInfo[key][hYi]);
			        SetPVarFloat(playerid, "PosZ", HouseInfo[key][hZi]);
			        SetPVarInt(playerid, "World", key);
			        SetPVarInt(playerid, "Interior", HouseInfo[key][hIntIn]);
			    }
			    case 2: // Business
			    {
			        key = GetPVarInt(playerid,"BizzKey");
			        SetPVarFloat(playerid, "PosX", BizInfo[key][Xi]);
			        SetPVarFloat(playerid, "PosY", BizInfo[key][Xi]);
			        SetPVarFloat(playerid, "PosZ", BizInfo[key][Xi]);
			        SetPVarInt(playerid, "World", key);
			        SetPVarInt(playerid, "Interior", BizInfo[key][IntIn]);
			    }
			    case 3:
			    {
			        switch(GetPVarInt(playerid,"Member"))
			        {
			            case 1: // LSPD
			            {
			                SetPVarFloat(playerid, "PosX", 1553.4929);
			                SetPVarFloat(playerid, "PosY", -1675.7034);
			                SetPVarFloat(playerid, "PosZ", 16.1953);
			                SetPVarInt(playerid, "World", 0);
			                SetPVarInt(playerid, "Interior", 0);
			            }
			            case 2: // LSFD
			            {
			                SetPVarFloat(playerid, "PosX", 1182.5016);
			                SetPVarFloat(playerid, "PosY", -1321.9572);
			                SetPVarFloat(playerid, "PosZ", 13.5788);
			                SetPVarInt(playerid, "World", 0);
			                SetPVarInt(playerid, "Interior", 0);
			            }
			        }
			    }
			}
            SetPVarInt(playerid, "SpawnLocation", 0);
            SetTimerEx("OnLoginInit", 500, false, "ii", playerid, 1);
        }
        case 90: // FACTION SHIPMENT
        {
            // Options
            ShowPlayerDialog(playerid, 91, DIALOG_STYLE_LIST, "Shipment Options", "Order Info\nSelect Items\nProceed", "Select", "Close");
        }
        case 91:
        {
            if(!response) return true;
			new member = GetPVarInt(playerid, "Member");
            switch(listitem)
            {
                case 0: PrintShipment(playerid);
                case 1:
                {
                    if(FactionInfo[member][fShipment] > 0)
                    {
                        SCM(playerid, COLOR_LIGHTRED, "Your faction is currently in a shipping process already!");
                        PrintShipment(playerid);
                        return true;
                    }
					new result[624];
					for(new i=0; i < MAX_SHIPMENT_SLOTS; i++) {
						if(FactionInfo[member][fShipmentID][i] > 0) {						
							if(FactionInfo[member][fShipmentA][i] > 1 || IsQuantityItem(FactionInfo[member][fShipmentID][i])) {
								format(result, sizeof(result), "%s\n%s (%d)", result, PrintIName(FactionInfo[member][fShipmentID][i]), FactionInfo[member][fShipmentA][i]);
							} else format(result, sizeof(result), "%s\n%s", result, PrintIName(FactionInfo[member][fShipmentID][i]));
						} else format(result, sizeof(result), "%s\nEMPTY SLOT", result);
					}
					ShowPlayerDialog(playerid, 93, DIALOG_STYLE_LIST, "Select Slot", result, "Select", "Back");
                }
                case 2:
                {
					DeletePVar(playerid, "ShipmentSlot");
					if(FactionInfo[member][fShipment] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Your faction is currently waiting for a shipment to be delivered!");
                    new priceex = 0, added = 0, wepcount, drugcount;
					FactionInfo[member][fShipment] = 0;
					FactionInfo[member][fShipmentApproved] = 1;
					for(new i=0; i < MAX_SHIPMENT_SLOTS; i++) {
						if(FactionInfo[member][fShipmentID][i] < 1) continue;
						if(IsQuantityItem(FactionInfo[member][fShipmentID][i])) {
							priceex += (GetItemPrice(FactionInfo[member][fShipmentID][i])*FactionInfo[member][fShipmentA][i]);
						} else priceex += GetItemPrice(FactionInfo[member][fShipmentID][i]);
						switch(FactionInfo[member][fShipmentID][i])
						{
							case 22 .. 34:
							{
								if(added == 0) {
									added = 1;
									FactionInfo[member][fShipment] += 15;
								}
								wepcount++;
								FactionInfo[member][fShipment] += 15;
								if(FactionInfo[member][fShipmentID][i] > 27 && FactionInfo[member][fShipmentID][i] < 33) { FactionInfo[member][fShipmentApproved] = 0; }
							}
							case 100 .. 150:
							{
								if(added == 0) {
									added = 1;
									FactionInfo[member][fShipment] += 15;
								}
								FactionInfo[member][fShipment] += FactionInfo[member][fShipmentA][i];
							}
							case 409:
							{
								FactionInfo[member][fShipment] += 10;
							}
							case 500 .. 550:
							{
								drugcount += FactionInfo[member][fShipmentA][i];
								FactionInfo[member][fShipment] += (FactionInfo[member][fShipmentA][i]/2);
							}
							case 1002 .. 1020:
							{
								FactionInfo[member][fShipment] += FactionInfo[member][fShipmentA][i];
								if(FactionInfo[member][fShipmentID][i] == 1004) { FactionInfo[member][fShipmentApproved] = 0; }
							}
						}
					}
					if(FactionInfo[member][fShipment] < 1) {
						SendClientMessage(playerid, COLOR_LIGHTRED, "You have to select at least one item before ordering a faction shipment.");
						return PrintShipment(playerid);
					}
					if((FactionInfo[member][fWepCount]+wepcount) > FACTION_WEAPON_LIMIT || (FactionInfo[member][fDrugCount]+drugcount) > FACTION_DRUG_LIMIT) {
						format(string, sizeof(string), "Your faction can only order %d weapons and %d grams of drugs at this time.", (FACTION_WEAPON_LIMIT-FactionInfo[member][fWepCount]), (FACTION_DRUG_LIMIT-FactionInfo[member][fDrugCount]));
						SendFactionMessage(member, COLOR_LIGHTRED, string);
						SendFactionMessage(member, COLOR_BLUE, "[TIP] {FFFFFF}Every hour your faction can order 1 extra gun, and 100 grams more of any/all drugs.");
						FactionInfo[member][fShipment] = 0;
						return PrintShipment(playerid);					
					}
					new Float:Pos[3];
					if(FactionInfo[member][fShipmentApproved] == 0) {
						if(ShipmentCache[member][sUsed] == 1) SendClientMessage(playerid, COLOR_WHITE, "You've replaced your existing shipment request with a new one.");
						ShipmentCache[member][sUsed] = 1;
						ShipmentCache[member][sTime] = FactionInfo[member][fShipment];
						FactionInfo[member][fShipment] = 0;
						ShipmentCache[member][sPrice] = priceex;
						ShipmentCache[member][sWepCount] = wepcount;
						ShipmentCache[member][sDrugCount] = drugcount;
						GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
						ShipmentCache[member][sPosX] = Pos[0];
						ShipmentCache[member][sPosY] = Pos[1];
						ShipmentCache[member][sPosZ] = Pos[2];
						format(ShipmentCache[member][sName], MAX_PLAYER_NAME, "%s", PlayerName(playerid));
						for(new i=0; i < MAX_SHIPMENT_SLOTS; i++) {
							ShipmentCache[member][sShipmentID][i] = FactionInfo[member][fShipmentID][i];
							ShipmentCache[member][sShipmentA][i] = FactionInfo[member][fShipmentA][i];
						}
						SendClientMessage(playerid, COLOR_ORANGE, "[NOTICE] {FFFFFF}Your shipment request has been sent to online administrators for approval. If approved the shipment will spawn where you ordered it after the time listed has passed.");
						format(string, sizeof(string), "[NOTICE] {FFFFFF}The faction '%s' has submitted a shipment order that requires administrative approval. (/viewshipment %i)", FactionInfo[member][fName], member);
						SendAdminMessage(COLOR_ORANGE, string);
						SendFactionMessage(member, COLOR_ORANGE, "[NOTICE] {FFFFFF}Your faction has submitted a shipment order that requires administrative approval.");
					} else {
						if(GetPlayerMoneyEx(playerid) >= priceex)
						{
							FactionInfo[member][fWepCount] += wepcount;
							FactionInfo[member][fDrugCount] += drugcount;
							SaveFactionShipment(member);
							GivePlayerMoneyEx(playerid, -priceex);
							format(string, sizeof(string), "~r~-$%d", priceex);
							GameTextForPlayer(playerid, string, 5000, 1);
							SCM(playerid, COLOR_WHITE, "Shipment has been ordered!");
							format(string, sizeof(string), "Estimated Time: %d minutes.", FactionInfo[member][fShipment]);
							SCM(playerid, COLOR_WHITE, string);
							GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
							FactionInfo[member][fObj] = CreateDynamicObject(19606, Pos[0], Pos[1], Pos[2] + 0.05, 0.0, 0.0, 0.0, 0);
							format(string, sizeof(string), "Your faction can order %d more weapons and %d more grams of drugs at this time.", (FACTION_WEAPON_LIMIT-FactionInfo[member][fWepCount]), (FACTION_DRUG_LIMIT-FactionInfo[member][fDrugCount]));
							SendFactionMessage(member, COLOR_LIGHTBLUE, string);							
						}
						else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!"), PrintShipment(playerid);
					}
				}
            }
        }
        case 92:
        {
			if(!response) return PrintShipment(playerid);
			new member = GetPVarInt(playerid, "Member"), slot = GetPVarInt(playerid, "ShipmentSlot");
			
			if(listitem == 0) {
				FactionInfo[member][fShipmentID][slot]=0;
				FactionInfo[member][fShipmentA][slot]=0;
			} else {
				new index = listitem-1;
				switch(FactionInfo[member][fRights])
				{
					case 1:
					{
						FactionInfo[member][fShipmentID][slot]=FactGuns[index][0];
						if(FactGuns[index][0] > 27 && FactGuns[index][0] < 33) {
							SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Adding automatic weapons to this shipment will make it require administrative approval.");
						} else if(FactGuns[index][0] == 1004) { SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Adding car bombs to this shipment will make it require administrative approval."); }
						switch(FactGuns[index][0])
						{
							case 100 .. 199: { FactionInfo[member][fShipmentA][slot] = PrintIQ(FactGuns[index][0]); }
							default: { FactionInfo[member][fShipmentA][slot] = 0; }
						}
					}
					case 2:
					{
						FactionInfo[member][fShipmentID][slot]=FactDrug1[index][0];
						FactionInfo[member][fShipmentA][slot]=1;
					}
					case 3:
					{
						FactionInfo[member][fShipmentID][slot]=FactDrug2[index][0];
						FactionInfo[member][fShipmentA][slot]=1;
					}
				}
			}
			if(IsQuantityItem(FactionInfo[member][fShipmentID][slot])) {
				ShowPlayerDialog(playerid, DIALOG_SHIPMENT_QUANTITY, DIALOG_STYLE_INPUT, "Enter a quantity. (1-100)", "How much of this item would you like to order?", "Enter", "Back");
			} else {
				new result[624];
				for(new i=0; i < MAX_SHIPMENT_SLOTS; i++) {
					if(FactionInfo[member][fShipmentID][i] > 0) {						
						if(FactionInfo[member][fShipmentA][i] > 1 || IsQuantityItem(FactionInfo[member][fShipmentID][i])) {
							format(result, sizeof(result), "%s\n%s (%d)", result, PrintIName(FactionInfo[member][fShipmentID][i]), FactionInfo[member][fShipmentA][i]);
						} else format(result, sizeof(result), "%s\n%s", result, PrintIName(FactionInfo[member][fShipmentID][i]));
					} else format(result, sizeof(result), "%s\nEMPTY SLOT", result);
				}
				ShowPlayerDialog(playerid, 93, DIALOG_STYLE_LIST, "Select Slot", result, "Select", "Back");
			}
        }
        case 93: //Shipment slot-selection.
        {
			if(!response) return ShowPlayerDialog(playerid, 91, DIALOG_STYLE_LIST, "Shipment Options", "Order Info\nSelect Item\nProceed", "Select", "Close");
			SetPVarInt(playerid, "ShipmentSlot", listitem);
			if(FactionInfo[GetPVarInt(playerid, "Member")][fShipmentID][listitem] > 0 && IsQuantityItem(FactionInfo[GetPVarInt(playerid, "Member")][fShipmentID][listitem])) {
				ShowPlayerDialog(playerid, DIALOG_SHIPMENT_SLOTSELECTED, DIALOG_STYLE_LIST, "Shipment Options", "Select Item\nSelect Quantity", "Select", "Back");
			} else {
				ShowShipmentSelection(playerid);
			}
        }
		case DIALOG_SHIPMENT_SLOTSELECTED: 
		{
			if(!response) {
				DeletePVar(playerid, "ShipmentSlot");
				return ShowPlayerDialog(playerid, 91, DIALOG_STYLE_LIST, "Shipment Options", "Order Info\nSelect Items\nProceed", "Select", "Close");
			}
			if(listitem == 0) {
				ShowShipmentSelection(playerid);
			} else {
				ShowPlayerDialog(playerid, DIALOG_SHIPMENT_QUANTITY, DIALOG_STYLE_INPUT, "Enter a quantity. (1-100)", "How much of this item would you like to order?", "Enter", "Back");
			}
		}
		case DIALOG_SHIPMENT_QUANTITY: 
		{
			if(!response) {
				DeletePVar(playerid, "ShipmentSlot");
				return ShowPlayerDialog(playerid, 91, DIALOG_STYLE_LIST, "Shipment Options", "Order Info\nSelect Items\nProceed", "Select", "Close");
			}
			new amt = strval(inputtext);
			if(!amt || amt < 1 || amt > 100) {
				SendClientMessage(playerid, COLOR_WHITE, "You can only enter a quantity between 1 and 100 for this item.");
				return ShowPlayerDialog(playerid, DIALOG_SHIPMENT_QUANTITY, DIALOG_STYLE_INPUT, "Enter a quantity. (1-100)", "How much of this item would you like to order?", "Enter", "Back");
			}
			new member = GetPVarInt(playerid, "Member"), slot = GetPVarInt(playerid, "ShipmentSlot");
			if(IsQuantityItem(FactionInfo[member][fShipmentID][slot])) { FactionInfo[member][fShipmentA][slot] = amt; }
			DeletePVar(playerid, "ShipmentSlot");
			new result[624];
			for(new i=0; i < MAX_SHIPMENT_SLOTS; i++) {
				if(FactionInfo[member][fShipmentID][i] > 0) {						
					if(FactionInfo[member][fShipmentA][i] > 1 || IsQuantityItem(FactionInfo[member][fShipmentID][i])) {
						format(result, sizeof(result), "%s\n%s (%d)", result, PrintIName(FactionInfo[member][fShipmentID][i]), FactionInfo[member][fShipmentA][i]);
					} else format(result, sizeof(result), "%s\n%s", result, PrintIName(FactionInfo[member][fShipmentID][i]));
				} else format(result, sizeof(result), "%s\nEMPTY SLOT", result);
			}
			ShowPlayerDialog(playerid, 93, DIALOG_STYLE_LIST, "Select Slot", result, "Select", "Back");
		}
		case DIALOG_SHIPMENT_AVIEW: 
		{
			if(!response) {
				DeletePVar(playerid, "ShipmentAdmin");
				return 1;
			}
			ShowPlayerDialog(playerid, DIALOG_SHIPMENT_APPROVAL, DIALOG_STYLE_MSGBOX, "Shipment Request", "Would you like to approve or deny this factions request?", "Approve", "Deny");
		}
		case DIALOG_SHIPMENT_APPROVAL:
		{
			new factionid = GetPVarInt(playerid, "ShipmentAdmin");
			DeletePVar(playerid, "ShipmentAdmin");
			if(ShipmentCache[factionid][sUsed] == 0) return SendClientMessage(playerid, COLOR_WHITE, "There is no longer a pending shipment request from this faction.");
			if(!response) {
				format(string, sizeof(string), "[NOTICE] {FFFFFF}%s has denied your factions shipment request.", AdminName(playerid));
				SendFactionMessage(factionid, COLOR_ORANGE, string);
				ClearShipmentCache(factionid);
			} else {
				if(FactionInfo[factionid][fShipment] > 0) {
					SendFactionMessage(factionid, COLOR_ORANGE, "[NOTICE] {FFFFFF}Your pending faction shipment request has been cancelled since your faction is already waiting for an order to be delivered.");
					ClearShipmentCache(factionid);
					return 1;
				}			
				new found = -1;
				foreach(new i : Player) {
					if(strcmp(PlayerName(i), ShipmentCache[factionid][sName], true) == 0) {
						found = i;
						break;
					}
				}
				if(found == -1) {
					SendFactionMessage(factionid, COLOR_ORANGE, "[NOTICE] {FFFFFF}Your pending faction shipment request has been cancelled as the buyer is offline.");
					ClearShipmentCache(factionid);
					return SendClientMessage(playerid, COLOR_ORANGE, "[NOTICE] {FFFFFF}The player who ordered the shipment is no longer online, so the shipment has been cancelled.");
				}
				new wepcount = ShipmentCache[factionid][sWepCount], drugcount = ShipmentCache[factionid][sDrugCount];
				if((FactionInfo[factionid][fWepCount]+wepcount) > FACTION_WEAPON_LIMIT || (FactionInfo[factionid][fDrugCount]+drugcount) > FACTION_DRUG_LIMIT) {
					format(string, sizeof(string), "Pending shipment cancelled. Your faction can only order %d weapons and %d grams of drugs at this time.", (FACTION_WEAPON_LIMIT-FactionInfo[factionid][fWepCount]), (FACTION_DRUG_LIMIT-FactionInfo[factionid][fDrugCount]));
					SendFactionMessage(factionid, COLOR_LIGHTRED, string);
					SendFactionMessage(factionid, COLOR_BLUE, "[TIP] {FFFFFF}Every hour your faction can order 1 extra gun, and 100 grams more of any/all drugs.");
					return PrintShipment(playerid);					
				}				
				for(new i=0; i < MAX_SHIPMENT_SLOTS; i++) {
					FactionInfo[factionid][fShipmentID][i] = ShipmentCache[factionid][sShipmentID][i];
					FactionInfo[factionid][fShipmentA][i] = ShipmentCache[factionid][sShipmentA][i];
				}	
				new priceex = ShipmentCache[factionid][sPrice];
				if(GetPlayerMoneyEx(found) >= priceex) {
					FactionInfo[factionid][fShipment] = ShipmentCache[factionid][sTime];
					FactionInfo[factionid][fWepCount] += wepcount;
					FactionInfo[factionid][fDrugCount] += drugcount;
					SaveFactionShipment(factionid);					
					GivePlayerMoneyEx(found, -priceex);
					format(string, sizeof(string), "~r~-$%d", priceex);
					GameTextForPlayer(found, string, 5000, 1);
					SCM(found, COLOR_WHITE, "Shipment has been ordered!");
					format(string, sizeof(string), "Estimated Time: %d minutes.", FactionInfo[factionid][fShipment]);
					SCM(found, COLOR_WHITE, string);
					FactionInfo[factionid][fObj] = CreateDynamicObject(19606, ShipmentCache[factionid][sPosX], ShipmentCache[factionid][sPosY], ShipmentCache[factionid][sPosZ] + 0.05, 0.0, 0.0, 0.0, 0);
					format(string, sizeof(string), "[NOTICE] {FFFFFF}Admin %s has approved your factions pending shipment request, and the shipment has been ordered. Estimated Time: %d minutes.", AdminName(playerid), FactionInfo[factionid][fShipment]);
					SendFactionMessage(factionid, COLOR_ORANGE, string);
					format(string, sizeof(string), "Your faction can order %d more weapons and %d more grams of drugs at this time.", (FACTION_WEAPON_LIMIT-FactionInfo[factionid][fWepCount]), (FACTION_DRUG_LIMIT-FactionInfo[factionid][fDrugCount]));
					SendFactionMessage(factionid, COLOR_LIGHTBLUE, string);								
				} else {
					format(string, sizeof(string), "[NOTICE] {FFFFFF}Admin %s has approved your factions pending shipment request, but the buyer couldn't afford it.", AdminName(playerid));
					SendFactionMessage(factionid, COLOR_ORANGE, string);
				}			
				ClearShipmentCache(factionid);
			}
		}
        case 94: // CRATE OPTIONS
        {
            if(!response) return true;
            new id = GetPVarInt(playerid, "CrateID");
            switch(listitem)
            {
                case 0:
                {
                    new result[1000], found;
                    for(new i = 0; i < MAX_SHIPMENT_SLOTS; i++)
	                {
					    if(CrateInfo[id][cInvID][i] > 0)
					    {
					        found++;
							if(CrateInfo[id][cInvA][i] > 1 || IsQuantityItem(CrateInfo[id][cInvID][i])) {
								format(result, 1000, "%s\n%d: %s (%d)", result, i, PrintIName(CrateInfo[id][cInvID][i]), CrateInfo[id][cInvA][i]);
							} else format(result, 1000, "%s\n%d: %s", result, i, PrintIName(CrateInfo[id][cInvID][i]));
					    }
						else
					    {
					        format(result, 1000, "%s\n%d: EMPTY SLOT", result, i);
					    }
	                }
	                if(found == 0) return SCM(playerid, COLOR_LIGHTRED, "This crate is empty!");
					ShowPlayerDialog(playerid, 95, DIALOG_STYLE_LIST, "Crate Options", result, "Take", "Close");
                }
                case 1:
                {
					if(CrateInfo[id][cVeh] != 0) return SendClientMessage(playerid,COLOR_GREY,"This crate is currently bugged.");
				    new vehid = PlayerToCar(playerid,2,8.0);
   	        	    if (vehid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_WHITE, "No nearby vehicle found.");
   	        	    if (VehicleInfo[vehid][vType] != VEHICLE_PERSONAL) return SendClientMessage(playerid, COLOR_WHITE, "Crates can only be stored in personal vehicles.");
					if (!IsTrunkCar(GetVehicleModel(vehid))) return SendClientMessage(playerid, COLOR_WHITE, "This vehicle doesn't have an appropriate trunk.");
					if (VehicleInfo[vehid][vTrunk] == 0) return SendClientMessage(playerid, COLOR_GREY, "The vehicles trunk must be opened.");
					new weight = 0; // max weight 300 for non-heavy carry.
                    for(new i = 0; i < MAX_SHIPMENT_SLOTS; i++)
	                {
						if(CrateInfo[id][cInvID][i] > 0) {
							switch(CrateInfo[id][cInvID][i]) {
								case 22 .. 34: { weight += 20; }
								case 100 .. 150: { weight += 10; }
								case 409: { weight += 2; }
								case 500 .. 550: { weight += (CrateInfo[id][cInvA][i]*1); }
								case 1004: { weight += 30; }
								default: { weight += 2; }
							}
						}
	                }
					if(weight > 300 && !IsHeavyCar(vehid)) { //Too heavy for this car!
						format(string, sizeof(string), "This vehicle can't carry more than 300lbs! (Crate weight: %dlbs.)", weight);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					CrateInfo[id][cVeh]=vehid;
					if(IsValidDynamicObject(CrateInfo[id][cObject])) DestroyDynamicObject(CrateInfo[id][cObject]);
					CrateInfo[id][cObject]=0;
					DestroyDynamic3DTextLabel(CrateInfo[id][cText]);
					SendClientMessage(playerid, COLOR_WHITE, "Crate stored in your vehicle, type (/v crate) to unload it.");
                }
            }
        }
        case 95:
        {
            if(!response) return true;
            new id = GetPVarInt(playerid, "CrateID");
            if(CrateInfo[id][cInvID][listitem] == 0) return true;
			if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
            format(string, sizeof(string), "'%s' taken!", PrintIName(CrateInfo[id][cInvID][listitem]));
			SendClientMessage(playerid, COLOR_WHITE, string);
            GiveInvItem(playerid, CrateInfo[id][cInvID][listitem], CrateInfo[id][cInvA][listitem], 0);
			RemoveFromCrate(id, listitem);
        }
        case 96:
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0: // Radio Stations
		        {
		            new result[2048];
		            for(new i = 0; i < sizeof(CarRadio); i++)
			        {
			            if(i == 0) { format(result, 2048, "%s", CarRadio[i][cName]); }
			            else { format(result, 2048, "%s\n%s", result, CarRadio[i][cName]); }
			        }
		            ShowPlayerDialog(playerid,97,DIALOG_STYLE_LIST,"Radio Stations", result, "Select", "Go Back");
		        }
		        case 1: // Direct Link
		        {
		            ShowPlayerDialog(playerid, 98, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 URL you would like to play.", "Enter", "Go Back");
		        }
		        case 2: // Turn Off
		        {
		            GameTextForPlayer(playerid, "~w~MP3~n~~r~OFF", 4000, 3);
		            StopAudioStreamForPlayerEx(playerid);
		        }
		    }
		}
		case 97:
		{
		    if(!response) return cmd_mp3(playerid, "");
		    PlayAudioStreamForPlayerEx(playerid, CarRadio[listitem][cURL]);
		}
		case 98:
		{
		    if(!response) return cmd_mp3(playerid, "");
		    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, 98, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 URL you would like to play.", "Enter", "Go Back");
	        if(strlen(inputtext) > 256) return ShowPlayerDialog(playerid, 98, DIALOG_STYLE_INPUT, "Direct URL", "Enter the .mp3 URL you would like to play.", "Enter", "Go Back");
		    PlayAudioStreamForPlayerEx(playerid, inputtext);
		}
		case 99:
		{
		    switch(response)
	        {
	            case 0:
	            {
	                format(string,sizeof(string),"%s denied your marriage offer.",PlayerName(playerid));
	                SendClientMessage(GetPVarInt(playerid, "MarriagePlayer"),COLOR_WHITE,string);
	                DeletePVar(GetPVarInt(playerid, "MarriagePlayer"),"MarriagePlayer");
	                DeletePVar(playerid,"MarriagePlayer");
	            }
	            case 1:
	            {
	                strmid(PlayerInfo[playerid][pMarriedTo], PlayerName(GetPVarInt(playerid, "MarriagePlayer")), 0, strlen(PlayerName(GetPVarInt(playerid, "MarriagePlayer"))), 255);
	                strmid(PlayerInfo[GetPVarInt(playerid, "MarriagePlayer")][pMarriedTo], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 255);
	                format(string,sizeof(string),"Marriage News: We have a new lovely couple, %s & %s have been married.",PlayerName(playerid),PlayerName(GetPVarInt(playerid, "MarriagePlayer")));
	                SendClientMessage(playerid, COLOR_WHITE,string);
	                SendClientMessage(GetPVarInt(playerid, "MarriagePlayer"), COLOR_WHITE,string);
	                DeletePVar(GetPVarInt(playerid, "MarriagePlayer"),"MarriagePlayer");
	                DeletePVar(playerid,"MarriagePlayer");
	            }
			}
		}
		//=========//
		case 100:
		{
		    switch(response)
		    {
		        case 0: // NO
		        {
		            DeletePVar(playerid, "PDBT");
		        }
		        case 1: // YES
		        {
		            CallRemoteFunction("PurchaseItem","iiii", playerid, GetPVarInt(playerid, "PDBT"), GetPVarInt(playerid, "PDBTLI"), 1);
		        }
		    }
		}
		case 101: // Fire Dialog
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                switch(GetPVarInt(playerid, "FDDUTY"))
                    {
                        case 0:
                        {
                            SetPVarInt(playerid, "FDDUTY", 1);
	                        SetPlayerColor(playerid, 0xFF800096);
	                        SendClientMessage(playerid, COLOR_WHITE, "You are now on fire duty!");
	                        DeletePVar(playerid, "SubaGear");
                        }
                        case 1:
                        {
                            SetPVarInt(playerid, "FDDUTY", 0);
                            SetPlayerColor(playerid,0xFF8282AA);
                            RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH1);
                            RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH2);
                            RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH3);
                            RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4);
                            SendClientMessage(playerid, COLOR_WHITE, "You are now off fire duty!");
                            DeletePVar(playerid, "SubaGear");
                        }
                    }
	            }
	            case 1:
	            {
					if(GetPVarInt(playerid, "FDDUTY") == 0) return SendClientMessage(playerid, COLOR_GREY, "You aren't on duty!");
	                GiveInvItem(playerid, 42, 9999, 0);
	                SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH1, 366, 1, 0.39999988, -0.33199998, -0.07199998, 102.39997863, 132.00007629, -4.30000448, 1.07200002, 1.42599999, 1.25799977);
	                SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH2, 19472, 2, 0.000, 0.14700001, 0.00300004, 4.09999942, 87.90000915, 90.80001831, 0.48099988, 1.32099997, 1.07500040);
	                SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH3, 19033, 2, 0.08499999, 0.05699998, 0.00099998, 81.90000152, 85.39998626, 7.69999837, 1.00500023, 1.14899992, 1.03999996);
                    SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4, 18641, 2, 0.17600002, 0.04700000, 0.08900001, 84.69998168, -5.49999904, 0.000, 0.88199973, 0.98299992, 0.79199993);
                    SendClientMessage(playerid, COLOR_GREY, "Fire fighter items equiped!");
                    DeletePVar(playerid, "SubaGear");
	            }
	            case 2:
	            {
	                if(GetPVarInt(playerid, "FDDUTY") == 0) return SendClientMessage(playerid, COLOR_GREY, "You aren't on duty!");
	                SetPlayerSkin(playerid, 285);
		            SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH1, 19514, 2, 0.11199998, 0.01800000, 0.00600000, 0.000, 0.000, 0.000, 1.05900001, 1.03100013, 1.09200048);
		            SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH2, 19515, 1, 0.08199999, 0.03599999, 0.01700007, 0.000, 0.000, 0.000, 1.02300012, 1.03900003, 1.02300000);
		            SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH3, 19472, 2, 0.01000000, 0.12899997, 0.00600000, -18.59999847, 91.19998931, 102.59998321, 1.01100003, 1.14500010, 1.000);
		            SetPlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4, 19163, 2, 0.06099998, 0.04099998, 0.00699991, -5.59999370, 93.79998779, -175.49990844, 0.92300033, 0.94700014, 0.88500010);
                    SendClientMessage(playerid, COLOR_GREY, "Scuba gear equiped!");
                    SetPVarInt(playerid, "SubaGear", 1);
	            }
	        }
	    }
	    case 102: // BIZZ Furniture AGREEMENT Dialog
	    {
	        if(!response) return true;
	        new keyex = FurnRight(playerid, 2);
            if(keyex == -1) return true;
            new cost = 250;
            if(GetPVarInt(playerid, "MonthDon") > 0) { cost = 0; }
			if(GetPlayerMoneyEx(playerid) >= cost)
         	{
         	    if(GetPlayerInterior(playerid) == 0) {
             	    new Float:distance = GetDistanceFromPointToPoint(PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], BizInfo[keyex][Xo], BizInfo[keyex][Yo], BizInfo[keyex][Zo]);
             	    if(distance > BUSINESS_PLANT_DISTANCE) {
             	        scm(playerid, COLOR_LIGHTRED, "WARNING: Object is too far from the business and could not be planted!");
             	        return 1;
             	    } else {
						new found = 0;
             	        for(new i = 0; i < sizeof(FurnObjs); i++) {
                            if(PlayerInfo[playerid][pFurnID] == FurnObjs[i]) {
							    found++;
								break;
                            }
	                    }
	                    if(found == 0) {
							if(GetCount() > GetPVarInt(playerid, "OutDelay")) {
								format(string, sizeof(string), "AdmWarn: %s has planted objectid: %d(%s) outside of business ID: %d.", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pFurnID], GetObjName(PlayerInfo[playerid][pFurnID]), keyex);
								SendAdminMessage(COLOR_YELLOW,string);
								scm(playerid, COLOR_LIGHTRED, "WARNING: Abusing the outdoor objects will result in a permanent ban!"); 
								SetPVarInt(playerid, "OutDelay", GetCount()+10000); 
							} else scm(playerid, COLOR_LIGHTRED, "You can only place 1 outdoor object every 10 seconds!"); 
						}
             	    }
				}			
          		format(string, sizeof(string),"~r~-$%d", cost);
          		GameTextForPlayer(playerid, string, 5000, 1);
             	GivePlayerMoneyEx(playerid, -cost);
           	    BuildBizzObject(playerid, PlayerInfo[playerid][pFurnID], PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], PlayerInfo[playerid][pFurnR][0], PlayerInfo[playerid][pFurnR][1], PlayerInfo[playerid][pFurnR][2]);
         	}
	        else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
	    }
	    case 103:
        {
            if(response)
            {
                new furnid = 0, furnitname[100];
				key = FurnRight(playerid, 2);
                furnitname="N/A";
				for(new xe;xe<sizeof(FurnObjs);xe++)
                {
                    if(BizInfo[key][boID][GetPVarInt(playerid, "FurnEditH")] == FurnObjs[xe])
                    {
                        format(furnitname, 100, "%d", FurnObjs[xe]);
                        furnid=xe;
						break;
		            }
                }
                //new priceex = 100;
                switch(listitem)
                {
                    case 0: // Edit Object
                    {
                        new obj = 0, h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 2);
                        obj = CreatePlayerObject(playerid, BizInfo[key2][boID][h], BizInfo[key2][boX][h], BizInfo[key2][boY][h], BizInfo[key2][boZ][h], BizInfo[key2][borX][h], BizInfo[key2][borY][h], BizInfo[key2][borZ][h], 100.0);
                        SetPVarInt(playerid, "FurnObject", obj);
			            SetPVarInt(playerid, "EditorMode", 4);
			            SetPVarInt(playerid, "Mute", 1);
			            PlayerInfo[playerid][pFurnID]=furnid;
			            EditPlayerObject(playerid, obj);
			            format(string, sizeof(string),"%s selected, use the SPRINT key to navigate.", furnitname);
			            SendClientMessage(playerid, COLOR_WHITE, string);
                    }
					case 1: // Input Position
					{
						if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						ShowPlayerDialog(playerid, 541, DIALOG_STYLE_LIST, "What axis do you want to edit?", "X-pos\nY-pos\nZ-pos\nX-rotation\nY-rotation\nZ-rotation", "Continue", "Close");
					}
					case 2: // Select Material
					{
					    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						SendClientMessage(playerid,COLOR_LIGHTRED,"WARNING: Editing an invalid-layer MAY cause parts of the object to turn invisible, resetting the layers material will fix this.");
						SendClientMessage(playerid,COLOR_LIGHTBLUE,"When you choose a layer to edit, that layer becomes highlighted in red.");
						ShowPlayerDialog(playerid, 501, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12", "Select", "Close");
					}
					case 3: // Reset Material
					{
						if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 2);
						if(IsValidDynamicObject(BizInfo[key2][bObject][h])) DestroyDynamicObject(BizInfo[key2][bObject][h]);
						BizInfo[key2][bObject][h] = CreateDynamicObject(BizInfo[key2][boID][h], BizInfo[key2][boX][h], BizInfo[key2][boY][h], BizInfo[key2][boZ][h], BizInfo[key2][borX][h], BizInfo[key2][borY][h], BizInfo[key2][borZ][h], key2);
						Streamer_Update(playerid);
						SendClientMessage(playerid,COLOR_LIGHTBLUE,"You've reset the selected objects material.");
						for(new v=0; v < 13; v++) {
							BizMInfo[key2][h][v] = 0;
						}
						SaveBizzObj(key2, h);
					}
                    case 4: // Remove Object
                    {
                        if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
                        new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 2);
                        if(IsValidDynamicObject(BizInfo[key2][bObject][h])) DestroyDynamicObject(BizInfo[key2][bObject][h]);
			            BizInfo[key2][bObject][h]=0;
			            BizInfo[key2][boID][h]=0;
		    	        BizInfo[key2][boX][h] = 0.0;
		                BizInfo[key2][boY][h] = 0.0;
			            BizInfo[key2][boZ][h] = 0.0;
			            BizInfo[key2][borX][h] = 0.0;
		                BizInfo[key2][borY][h] = 0.0;
			            BizInfo[key2][borZ][h] = 0.0;
		                BizInfo[key2][boInt][h]--;
		                format(string, 128, "%s removed.", furnitname);
		                SendClientMessage(playerid,COLOR_WHITE,string);
						SaveBizzObj(key2, h);
                    }
                }
            }
        }
        case 104: // TREATWOUND DIALOG
		{
		    if(!response) return true;
		    new priceex = GetPVarInt(playerid,"WoundC");
		    if(GetPlayerMoneyEx(playerid) >= priceex)
		    {
		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		        format(string, sizeof(string),"~r~-$%d",priceex);
		        GameTextForPlayer(playerid, string, 5000, 1);
		        GivePlayerMoneyEx(playerid,-priceex);
		        DeathPlayer(playerid, "You need to rest to heal your wounds!");
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		}
		//====200 - 250 house system==//
		//
		//===========================//
		case 200: //House buy dialog
		{
			if(!response) return true;
			new foundid = 0;
			for(new h = 1; h < MAX_HOUSES; h++)
			{
			    if(HouseInfo[h][hID] != 0)
			    {
			        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
			        {
			            if(HouseInfo[h][hOwned] == 0)
			            {
			                foundid=h;
							break;
			            }
					}
				}
			}
			if(foundid == -1) return true;
			format(string, sizeof(string), "Do you want to buy this house?\nPrice: $%d \nBank Account: $%d", HouseInfo[foundid][hBuyValue], GetPVarInt(playerid, "Bank"));
	    	ShowPlayerDialog(playerid, 207, DIALOG_STYLE_MSGBOX, "Payment Type", string, "Buy", "Close");
		}
		case 201: //Business inventory
		{
		    if(!response) return SCM(playerid, -1, "You didn't take anything from the business.");
		    new hid = GetPVarInt(playerid, "BizzEnter");
			if(hid != 0 && GetPlayerVirtualWorld(playerid) == hid)
			{
				if(GetCloseBizzSafe(playerid, hid) && BizInfo[hid][sLocked] != 1)
				{
					new stri2[84];
					if(response)
					{
						if(CheckInv(playerid) == 0) return error(playerid, "Your inventory is full.");
						if(BizInfo[hid][InvID][listitem] == 0) return error(playerid, "Slot is empty.");
						GiveInvItem(playerid, BizInfo[hid][InvID][listitem], BizInfo[hid][InvQ][listitem], BizInfo[hid][InvE][listitem], BizInfo[hid][InvS][listitem]);
						format(stri2, sizeof(stri2), "You took a (%s) from the business.", PrintIName(BizInfo[hid][InvID][listitem]));
						scm(playerid, -1, stri2);
						format(stri2, sizeof(stri2), "takes a %s from the business.", PrintIName(BizInfo[hid][InvID][listitem]));
						ForceAME(playerid, stri2);
						BizInfo[hid][InvID][listitem] = 0;
						BizInfo[hid][InvQ][listitem] = 0;
						BizInfo[hid][InvE][listitem] = 0;
						BizInfo[hid][InvS][listitem] = 0;
						SaveBiz(hid);
					}
				}
			}
		}
		case 202: //House inventory
		{
		    if(!response) return SCM(playerid, -1, "You didn't take anything from the property.");
		    new hid = GetPVarInt(playerid, "HouseEnter");
		    if(hid != 0)
			{
			    if(GetPlayerVirtualWorld(playerid) == hid)
				{
				    if(GetCloseHouseSafe(playerid, hid) && HouseInfo[hid][sLocked] != 1)
				    {
		                new stri2[84];
		                if(response)
		                {
		                    if(CheckInv(playerid) == 0) return error(playerid, "Your inventory is full.");
		                    if(HouseInfo[hid][hInvID][listitem] == 0) return error(playerid, "Slot is empty.");
		                    GiveInvItem(playerid, HouseInfo[hid][hInvID][listitem], HouseInfo[hid][hInvQ][listitem], HouseInfo[hid][hInvE][listitem], HouseInfo[hid][hInvS][listitem]);
				            format(stri2, sizeof(stri2), "You took a (%s) from the property.", PrintIName(HouseInfo[hid][hInvID][listitem]));
				            scm(playerid, -1, stri2);
    			            format(stri2, sizeof(stri2), "takes a %s from the property.", PrintIName(HouseInfo[hid][hInvID][listitem]));
				            ForceAME(playerid, stri2);
		                    HouseInfo[hid][hInvID][listitem] = 0;
				            HouseInfo[hid][hInvQ][listitem] = 0;
				            HouseInfo[hid][hInvE][listitem] = 0;
							HouseInfo[hid][hInvS][listitem] = 0;
				            SaveHouse(hid);
				        }
		            }
				}
			}
		}
		case 203: //Vehicle inventory
		{
			new kez = -1, keyex = -1;
			if(PlayerToCar(playerid, 1, 4.0)) {
		        keyex = PlayerToCar(playerid, 2, 4.0);
		        if(IsValidTCar(keyex)) {
				kez = keyex; }
		    }
		    
		    if(kez == -1) {
		        if(IsPoliceCar(playerid)) {
				kez = GetPoliceCarID(playerid); }
		    }
			
 			if(kez == -1) return SendClientMessage(playerid, COLOR_GREY, "You are not around any valid vehicle!");
 			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return scm(playerid, -1, "You must be on foot to use this!");
   	        if(VehicleInfo[kez][vType] == VEHICLE_PERSONAL || VehicleInfo[kez][vType] == VEHICLE_LSPD)
   	        {
				new Float:xx,Float:yy,Float:zz;
                GetVehiclePos(kez,xx,yy,zz);
   	            if(IsPlayerInRangeOfPoint(playerid,10.0,xx,yy,zz))
   	            {
				    new stri2[84];
				    if(response)
				    {
				        if(CheckInv(playerid) == 0) return error(playerid, "Your inventory is full.");
						if(DisabledWeapon(GetPVarInt(playerid, "ConnectTime"), VehicleInfo[kez][vGBID][listitem])) return error(playerid, "You need 8 hours played to use take this.");
				        if(VehicleInfo[kez][vInvID][listitem] == 0) return error(playerid, "Slot is empty.");
				        if(VehicleInfo[kez][vInvID][listitem] <= 800 || VehicleInfo[kez][vInvID][listitem] >= 1002) {
						GiveInvItem(playerid, VehicleInfo[kez][vInvID][listitem], VehicleInfo[kez][vInvQ][listitem], VehicleInfo[kez][vInvE][listitem], VehicleInfo[kez][vInvS][listitem]); }
						format(stri2, sizeof(stri2), "You took a (%s) from your vehicle.", PrintIName(VehicleInfo[kez][vInvID][listitem]));
						scm(playerid, -1, stri2);
		    			format(stri2, sizeof(stri2), "takes a %s from the vehicle.", PrintIName(VehicleInfo[kez][vInvID][listitem]));
						ForceAME(playerid, stri2);
				        VehicleInfo[kez][vInvID][listitem] = 0;
						VehicleInfo[kez][vInvQ][listitem] = 0;
						VehicleInfo[kez][vInvE][listitem] = 0;
						VehicleInfo[kez][vInvS][listitem] = 0;
						//LoadCarIDObjects(kez);
				    }
				}
			}
		}
		case 204:
		{
			if(!response) return 1;
			if(listitem == 0)
			{
			    PrintInv(playerid);
			}
			if(listitem == 1)
			{
			    new hh = GetPVarInt(playerid, "HouseEnter");
				new bh = GetPVarInt(playerid, "BizzEnter");
				if(hh != 0 && GetCloseHouseSafe(playerid, hh) && HouseInfo[hh][sLocked] != 1)
				{
	   				PrintHouseInv(playerid);
				}
				else if(bh != 0 && GetCloseBizzSafe(playerid, bh) && BizInfo[bh][sLocked] != 1)
				{
					PrintBizInv(playerid);
				}
				else
				{
					if(!IsPlayerInAnyVehicle(playerid)) {
						key = -1;
						new keyex = -1;
						if(PlayerToCar(playerid, 1, 4.0)) {
						keyex = PlayerToCar(playerid, 2, 4.0);
						if(IsValidTCar(keyex)) {
						key = keyex; }
						}
						if(key == -1) {
						if(IsPoliceCar(playerid)) {
						key = GetPoliceCarID(playerid); }
						}
						if(key == -1) return 1;
						if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
							PrintVehInv(playerid, key); 
						}
					} else {
						PrintVehGB(playerid, GetPlayerVehicleID(playerid));
					}
				}	
			}
		}
		case 205:
		{
		    if(!response) return 1;
		    new text[128];
		    format(text, sizeof(text), "LSPD: You took skin '%s'", LSPDskin[listitem][Name]);
		    if(GetPVarInt(playerid, "Rank") < LSPDskin[listitem][Rank]) return error(playerid, "You are not allowed to wear this skin.");
	    	SetPlayerSkinEx(playerid, LSPDskin[listitem][SkinID]);
	    	SCM(playerid, -1, text);
		}
		case 206:
		{
		    if(response)
		    {
		        new pmtext[128], targetid;
		        GetPVarString(playerid, "APMMSG", pmtext, 128);
				targetid = GetPVarInt(playerid, "APMID");
				format(string, sizeof(string), "(( PM from [%d] %s: %s ))", playerid, PlayerName(playerid), pmtext);
				SendClientMessage(targetid,  0xF9F900FF, string);
				format(string, sizeof(string), "(( PM sent to [%d]%s: %s ))", targetid, PlayerName(targetid), pmtext);
				SendClientMessage(playerid,  0xE5C43EAA, string);
				PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				SetPVarInt(playerid, "APMWRN", 1);
		    }
		}
		case 207: // Property Buy Dialog
		{
			if(response) {
    			foreach(new h : HouseIterator) {
					if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently on a route!");
				    if(HouseInfo[h][hID] != 0)
				    {
				        if(GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut] && GetPlayerInterior(playerid) == HouseInfo[h][hIntOut] && IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
				        {
				            if(HouseInfo[h][hOwned] == 0)
				            {
				                if(GetPVarInt(playerid, "HouseKey") == 0)
				                {
			                		if(GetPVarInt(playerid, "Bank") < HouseInfo[h][hBuyValue])
									{
										error(playerid, "Insufficient funds.");
									}
									else
									{
						                SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") - HouseInfo[h][hBuyValue]);
						                SendClientMessage(playerid, -1, "Congratulations on your property!");
										SetPVarInt(playerid, "HouseKey", h);
										HouseInfo[h][hOwned] = 1;
										format(HouseInfo[h][hOwner], 25, "%s", PlayerName(playerid));
										HouseInfo[h][hCombo] = 1000+random(8999);
										SaveHouse(h);
										OnPlayerDataSave(playerid);
										return 1;
									}
				                }
				                else { error(playerid, "You already own a property."); }
				            }
				            else { error(playerid, "Property not for sale."); }
						}
					}
				}
			}
		}
		case 280: //Toys
		{
		    if(!response) return 1;
		    SetPVarInt(playerid, "ToyModelC", AttachmentObjects[listitem][attachmodel]);
			ShowPlayerDialog(playerid, 294, DIALOG_STYLE_LIST, "Select bone", "Spine\nHead\nLeft Upper Arm\nRight Upper Arm\nLeft Hand\nRight Hand\nLeft Thigh\nRight Thigh\nLeft foot\nRight Foot\nRight Calf\nLeft Calf\nLeftForearm\nRight Forearm\nLeft Shoulder\nRight Shoulder\nNeck\nJaw", "Select","Cancel");
		}
		case 281: //MDC
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        /*case 0: ShowPlayerDialog(playerid, 282, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the name.", "Continue","Back");
		        case 1: ShowPlayerDialog(playerid, 287, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the vehicle plate.", "Continue","Back");*/
		        case 2: ShowPlayerDialog(playerid, 433, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert a serial ID.", "Insert","Cancel");
		        /*case 3: ShowPlayerDialog(playerid, 289, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the Case ID.", "Continue","Back");
		        case 4:
				{
					if(GetPVarInt(playerid, "Member") == 1) ShowPlayerDialog(playerid, 297, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the phone number.", "Continue","Back");
					else nal(playerid);
				}*/
		    }
		}
		case 282: //MDC - Person
		{
		    if(!response) return ShowPlayerDialog(playerid, 281, DIALOG_STYLE_LIST, "Mobile data computer", "Check Person\nCheck Vehicle\nCheck Serial ID\nCase ID\nTrace Phone", "Select","Close");
			new input[500], query[400];
			mysql_escape_string(inputtext, input); //Protecting the database.
			format(MDCinfo[playerid][1][mChecking], 25, "%s", input);
			format(query, sizeof(query), "SELECT `PhoneNum`, `Name`, `Sex`, `Age`, `DriveLic` `GunLic`, `HouseKey`, `BizzKey` FROM `accounts` LEFT JOIN `vehicles` ON `accounts`.`Name` = `vehicles`.`Owner` WHERE `accounts`.`Name` = '%s'", input);
			mysql_function_query(handlesql, query, true, "MDCPlayer", "d", playerid);
		}
		case 283: //MDC - Check criminal record
		{
		    new query[128];
		    if(!response) return 1;
		    
			switch(listitem)
			{
				/*case 5 .. 7: //Vehicle
				{
				    if(MDCinfo[playerid][listitem - 4][mVID] == 0)
				    {
		   				format(query, sizeof(query), "SELECT * FROM accounts WHERE Name='%s'", MDCinfo[playerid][1][mChecking]);
						mysql_function_query(handlesql, query, true, "MDCPlayer", "d", playerid);
				    }
				    else
				    {
						format(query, sizeof(query), "SELECT * FROM vehicles WHERE ID=%d", MDCinfo[playerid][listitem - 4][mVID]);
						mysql_function_query(handlesql, query, true, "MDCPlayer4", "d", playerid);
					}
				}*/
				case 11: //Criminal record
				{
					format(query, sizeof(query), "SELECT * FROM criminals WHERE player='%s' AND type=1 ORDER BY ID DESC", MDCinfo[playerid][1][mChecking]);
					mysql_function_query(handlesql, query, true, "MDCPlayer2", "d", playerid);
				}
				case 12: //Ticket record
				{
					format(query, sizeof(query), "SELECT * FROM tickets WHERE player='%s' AND paid=0 ORDER BY ID DESC", MDCinfo[playerid][1][mChecking]);
					mysql_function_query(handlesql, query, true, "MDCPlayer5", "d", playerid);
				}
			}
		}
		case 284: //MDC - Check crime in detail
		{
		    new query[128];
			if(!response)
			{
   				format(query, sizeof(query), "SELECT * FROM accounts WHERE Name='%s'", MDCinfo[playerid][1][mChecking]);
				mysql_function_query(handlesql, query, true, "MDCPlayer", "d", playerid);
			}
			else
			{
				format(query, sizeof(query), "SELECT * FROM criminals WHERE time='%e' AND type=1", MDCinfo[playerid][listitem][mTime]);
				mysql_function_query(handlesql, query, true, "MDCPlayer3", "d", playerid);
			}
		}
		case 285: //MDC - Check crime in detail (selected)
		{
		    new query[128];
			format(query, sizeof(query), "SELECT * FROM criminals WHERE player='%s' AND type=1 ORDER BY ID DESC", MDCinfo[playerid][1][mChecking]);
			mysql_function_query(handlesql, query, true, "MDCPlayer2", "d", playerid);
		}
		case 286: //MDC - Check vehicle in detail (selected)
		{
		    new query[128];
			format(query, sizeof(query), "SELECT * FROM accounts WHERE Name='%s'", MDCinfo[playerid][1][mChecking]);
			mysql_function_query(handlesql, query, true, "MDCPlayer5", "d", playerid);
		}
		case 287: //MDC - Vehicle
		{
		    if(!response) return ShowPlayerDialog(playerid, 281, DIALOG_STYLE_LIST, "Mobile data computer", "Check Person\nCheck Vehicle\nCheck Serial ID\nCase ID\nTrace Phone", "Select","Close");
			new input[500], query[128];
			mysql_escape_string(inputtext, input); //Protecting the database.
			format(MDCinfo[playerid][1][mChecking], 25, "%s", input);
			format(query, sizeof(query), "SELECT * FROM vehicles WHERE Plate='%e'", input);
			mysql_function_query(handlesql, query, true, "MDCVehicle", "d", playerid);
		}
		case 288: //MDC - Vehicle in detail from vehicle (selected)
		{
		    ShowPlayerDialog(playerid, 287, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the vehicle plate.", "Continue","Back");
		}
		case 289: //MDC - Case ID
		{
		    if(!response) return ShowPlayerDialog(playerid, 281, DIALOG_STYLE_LIST, "Mobile data computer", "Check Person\nCheck Vehicle\nCheck Serial ID\nCase ID\nTrace Phone", "Select","Close");
			new input[500], query[128], inputid;
			mysql_escape_string(inputtext, input); //Protecting the database.
			format(MDCinfo[playerid][1][mChecking], 25, "%s", input);
			inputid = strval(input);
			format(query, sizeof(query), "SELECT * FROM criminals WHERE ID=%d", inputid - 900);
			mysql_function_query(handlesql, query, true, "MDCCase", "d", playerid);
		}
		case 290: //MDC - Case in detail from case ID (selected)
		{
  			ShowPlayerDialog(playerid, 289, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the Case ID.", "Continue","Back");
		}
		case 291: //MDC - Check crime in detail
		{
		    new query[128];
			if(!response)
			{
   				format(query, sizeof(query), "SELECT * FROM accounts WHERE Name='%s'", MDCinfo[playerid][1][mChecking]);
				mysql_function_query(handlesql, query, true, "MDCPlayer", "d", playerid);
			}
			else
			{
				format(query, sizeof(query), "SELECT * FROM tickets WHERE time='%e'", MDCinfo[playerid][listitem][mTime]);
				mysql_function_query(handlesql, query, true, "MDCPlayer6", "d", playerid);
			}
		}
		case 292:
		{
		    new query[128];
			format(query, sizeof(query), "SELECT * FROM tickets WHERE player='%s' ORDER BY ID DESC", MDCinfo[playerid][1][mChecking]);
			mysql_function_query(handlesql, query, true, "MDCPlayer5", "d", playerid);
		}
		//==========================================================//
		case 293: // Using /tickets
		{
		    new query[128];
			if(response)
			{
				format(query, sizeof(query), "SELECT * FROM tickets WHERE time='%s'", MDCinfo[playerid][listitem][mTime]);
				mysql_function_query(handlesql, query, true, "GetTicketsP2", "i", playerid);
			}
		}
		//==========================================================//
		case 294: //Toys
		{
		    if(!response) return 1;
		    SetPVarInt(playerid, "ToyBoneC", listitem + 1);
 			new countid = -1;
			for(new i = 0; i < 5; i++) {
			    if(ToyInfo[playerid][i][tModel] == 0) {
					countid = i;
					break;
				}
			}
			if(countid == -1) {
				SetPVarInt(playerid, "ToyBoneC", 0);
				return SendClientMessage(playerid, COLOR_RED, "No free toy slots!");
			}
			new modelid = GetPVarInt(playerid,"ToyModelC");
			new boneid = GetPVarInt(playerid,"ToyBoneC");
            SetPlayerAttachedObject(playerid, countid, modelid, boneid, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1);
            EditAttachedObject(playerid, countid);
		}
		case 295: //Toys buying
		{
 			new countid = -1;
			for(new i = 0; i < 5; i++) {
			    if(ToyInfo[playerid][i][tModel] == 0) {
					countid = i;
					break;
				}
			}
			if(countid == -1) {
				SetPVarInt(playerid, "ToyBoneC", 0);
				SetPVarInt(playerid, "ToyModelC", 0);
				return SendClientMessage(playerid, COLOR_RED, "No free toy slots!");
			}
		    if(!response) {
		        RemovePlayerAttachedObject(playerid, countid);
		        SetPVarInt(playerid, "ToyBoneC", 0);
		        SetPVarInt(playerid, "ToyModelC", 0);
		    } else {
			    if(GetPVarInt(playerid, "ToyModelC") > 0) //to avoid crashes.
			    {
			        ToyInfo[playerid][countid][tID] = countid;
			        ToyInfo[playerid][countid][tBone] = GetPVarInt(playerid, "ToyBoneC");
                    ToyInfo[playerid][countid][tModel] = GetPVarInt(playerid, "ToyModelC");
					ToyInfo[playerid][countid][toX] = GetPVarFloat(playerid, "ToyoX");
	    			ToyInfo[playerid][countid][toY] = GetPVarFloat(playerid, "ToyoY");
	    			ToyInfo[playerid][countid][toZ] = GetPVarFloat(playerid, "ToyoZ");
	    			ToyInfo[playerid][countid][trX] = GetPVarFloat(playerid, "ToyrX");
	    			ToyInfo[playerid][countid][trY] = GetPVarFloat(playerid, "ToyrY");
	    			ToyInfo[playerid][countid][trZ] = GetPVarFloat(playerid, "ToyrZ");
	    			ToyInfo[playerid][countid][tsX] = GetPVarFloat(playerid, "ToysX");
	    			ToyInfo[playerid][countid][tsY] = GetPVarFloat(playerid, "ToysY");
	    			ToyInfo[playerid][countid][tsZ] = GetPVarFloat(playerid, "ToysZ");
					if(IsPlayerAttachedObjectSlotUsed(playerid,countid)) {
						RemovePlayerAttachedObject(playerid, countid);
					}
	    			scm(playerid, -1, "Item bought - use /items to put it on.");
	    			new query[516];
	    			format(query, sizeof(query), "INSERT INTO toys (`PlayerName`, `indexID`,`modelid`,`bone`) VALUES ('%s',%d,%d,%d)", PlayerName(playerid), countid, ToyInfo[playerid][countid][tModel], ToyInfo[playerid][countid][tBone]);
	    			mysql_tquery(handlesql, query);
	    			SaveToys(playerid);
			    }
			}
		}
		case 296: //Edit/Take off/Delete items
		{
		    if(!response) return 1;
		    new diatxt[255], count = 0;
		    for(new i = 0; i < 5; i++) {
		        if(ToyInfo[playerid][i][tModel] != 0) {
		            count++;
					format(diatxt, sizeof(diatxt), "%s Slot %d: %s\n", diatxt, i,GetAttachmentName(ToyInfo[playerid][i][tModel]));
		        } else {
				    format(diatxt, sizeof(diatxt), "%s Slot %d: NONE\n", diatxt, i);
				}
		    }
		    if(count == 0) { ShowPlayerDialog(playerid, 400, DIALOG_STYLE_MSGBOX, "Items", "No items found", "Close", " "); }
		    switch(listitem)
		    {
		        case 0: //Edit
		        {
		        	ShowPlayerDialog(playerid, 401, DIALOG_STYLE_LIST, "Items", diatxt, "Select","Cancel");
		        }
				case 1: //Edit Color
				{
					ShowPlayerDialog(playerid, 563, DIALOG_STYLE_LIST, "Items", diatxt, "Select","Cancel");
				}
		        case 2: //Take off
		        {
		        	ShowPlayerDialog(playerid, 402, DIALOG_STYLE_LIST, "Items", diatxt, "Select","Cancel");
		        }
		        case 3: //Put on
		        {
		        	ShowPlayerDialog(playerid, 403, DIALOG_STYLE_LIST, "Items", diatxt, "Select","Cancel");
		        }
		        case 4: //Remove
		        {
		        	ShowPlayerDialog(playerid, 404, DIALOG_STYLE_LIST, "Items", diatxt, "Select","Cancel");
		        }
		    }
		}
		case 297:
		{
		    new found = 0;
			foreach(new i : Player)
			{
				if(GetPVarInt(i, "PlayerLogged") == 1)
				{
					format(string, 128, "%d", GetPVarInt(i, "PhoneNum"));
					if(strcmp(string, inputtext, true) == 0)
					{
					    found++;
					    if(GetPVarInt(i, "OnPhone") > 60)
					    {
					    	format(string, sizeof(string), "HQ: Officer %s requested a trace of (%d)",PlayerName(playerid), inputtext);
						    SendFactionMessage(1, COLOR_BLUE, string);
					    	format(string, sizeof(string), "HQ: Location: %s",GetPlayerArea(i));
						    SendFactionMessage(1, COLOR_BLUE, string);
					    }
					    else return scm(playerid, COLOR_BLUE, "HQ: Sorry, number could not be localized. It hasn't been in use for sixty seconds.");
					}
				}
			}
			if(found == 0) return scm(playerid, COLOR_BLUE, "HQ: Phone Number unknown.");
		}
		//==========================================================//
		case 300: //Bizz buy dialog
		{
			if(response)
			{
    			foreach(new h : BizIterator) {
					if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently on a route!");
				    if(BizInfo[h][ID] != 0) {
				        if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]))
				        {
				            if(BizInfo[h][Owned] == 0)
				            {
				                if(GetPVarInt(playerid, "BizzKey") == 0)
				                {
			                		if(GetPVarInt(playerid, "Bank") < BizInfo[h][Value])
									{
										error(playerid, "Insufficient funds.");
									}
									else
									{
						                SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") - BizInfo[h][Value]);
						                SendClientMessage(playerid, -1, "Congratulations on your property!");
										SetPVarInt(playerid, "BizzKey", h);
										BizInfo[h][Owned] = 1;
										format(BizInfo[h][Owner], 25, PlayerName(playerid));
										BizInfo[h][Combo] = 1000+random(8999);
										SaveBiz(h);
										OnPlayerDataSave(playerid);
										return 1;
									}
				                }
				                else
								{
								    error(playerid, "You already own a business.");
								}
				            }
				            else
				            {
				                error(playerid, "Property not for sale.");
				            }
						}
					}
				}
			}
		}
		case 301:
		{
		    if(!response) return 1;
		    if(strlen(inputtext) > 80) return error(playerid, "Slogan is too long.");
		    new bid = GetPVarInt(playerid, "BizzKey");
			format(BizInfo[bid][Slogan], 80, inputtext);
			scm(playerid, -1, "Slogan has been changed.");
			SaveBiz(bid);
			OnPlayerDataSave(playerid);
		}
		case 302:
		{
		    if(!response) return 1;
		    if(strval(inputtext) > 100 || strval(inputtext) < 1) return error(playerid, "Invalid number.");
		    new bid = GetPVarInt(playerid, "BizzKey");
		    BizInfo[bid][EnterPrice] = strval(inputtext);
			scm(playerid, -1, "Entrance Fee has been changed.");
			SaveBiz(bid);
			OnPlayerDataSave(playerid);
		}
		case 303:
		{
		    if(!response) return 1;
		    if(strlen(inputtext) > 14) return error(playerid, "Name is too long.");
		    new slg[128], bid = GetPVarInt(playerid, "BizzKey");
			mysql_escape_string(inputtext, slg);
			format(BizInfo[bid][Name], 80, slg);
			scm(playerid, -1, "Name has been changed.");
			SaveBiz(bid);
			OnPlayerDataSave(playerid);
		}
		case 401: //Edit item
		{
		    if(!response) return 1;
	        if(ToyInfo[playerid][listitem][tModel] != 0 && IsPlayerAttachedObjectSlotUsed(playerid, listitem))
	        {
 				EditAttachedObject(playerid, listitem);
	        }
			else
			{
			    error(playerid, "You have no equipped item in this slot.");
			}
		}
		case 402: //Take off item
		{
		    if(!response) return 1;
			if(ToyInfo[playerid][listitem][tModel] != 0 && IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
				RemovePlayerAttachedObject(playerid, listitem);
	        }
			else
			{
   				error(playerid, "You have no equipped item in this slot.");
			}
		}
		case 403: //Put on item
		{
		    if(!response) return 1;
			if(ToyInfo[playerid][listitem][tModel] == 0) return error(playerid, "You have no item in this slot.");
			if(IsPlayerAttachedObjectSlotUsed(playerid, listitem) == 0)
			{
				if(IsValidClothing(ToyInfo[playerid][listitem][tModel]))
				{
					SetPlayerAttachedObject(playerid, ToyInfo[playerid][listitem][tID], ToyInfo[playerid][listitem][tModel], ToyInfo[playerid][listitem][tBone],
	 				ToyInfo[playerid][listitem][toX],ToyInfo[playerid][listitem][toY],ToyInfo[playerid][listitem][toZ],
					ToyInfo[playerid][listitem][trX],ToyInfo[playerid][listitem][trY],ToyInfo[playerid][listitem][trZ],
					ToyInfo[playerid][listitem][tsX],ToyInfo[playerid][listitem][tsY],ToyInfo[playerid][listitem][tsZ],
					ARGBColors[ToyInfo[playerid][listitem][tColor]][Hex], ARGBColors[ToyInfo[playerid][listitem][tColor2]][Hex]);
				}
	        }
			else
			{
			    error(playerid, "You are already wearing this item.");
			}
		}
		case 404: //Delete item
		{
		    if(!response) return 1;
			if(ToyInfo[playerid][listitem][tModel] != 0)
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))RemovePlayerAttachedObject(playerid, listitem);
				new query[255];
				format(query, sizeof(query), "DELETE FROM `toys` WHERE PlayerName='%s' AND indexID=%d", PlayerName(playerid), listitem);
	  			mysql_tquery(handlesql, query);
				ToyInfo[playerid][listitem][tID] = 0;
				ToyInfo[playerid][listitem][tModel] = 0;
	        }
			else
			{
			    error(playerid, "You have no item in this slot.");
			}
		}
		case 405:
		{
			if(!response) return 1;
			new diatxt[1028];
			if(listitem == 0) //View
			{
				for(new i = 0; i < 19; i++)
				{
				    format(diatxt, sizeof(diatxt), "%s{cccccc}APB %d:{8BE0DF} %s\n", diatxt, i + 1, APB[i]);
				}
				ShowPlayerDialog(playerid, 406, DIALOG_STYLE_LIST, "APB", diatxt, "Close","");
			}
			if(listitem == 1) //Add
			{
			    new found = 0;
   				for(new i = 0; i < 19; i++)
				{
			    	if(strlen(APB[i]) > 3) found++;
				}
				if(found < 19) ShowPlayerDialog(playerid, 407, DIALOG_STYLE_INPUT, "APB", "Enter your APB", "Add","Cancel");
				else error(playerid, "No free spots.");
			}
			if(listitem == 2) //Remove
			{
				for(new i = 0; i < 19; i++)
				{
				    format(diatxt, sizeof(diatxt), "%s{cccccc}APB %d:{8BE0DF} %s\n", diatxt, i + 1, APB[i]);
				}
				ShowPlayerDialog(playerid, 408, DIALOG_STYLE_LIST, "APB", diatxt, "Remove APB","Cancel");
			}
		}
		case 407: //Add APB
		{
		    if(!response) return 1;
		    if(strlen(inputtext) > 80) return error(playerid, "APB too long.");
		    new found = -1;
			for(new i = 0; i < 19; i++)
			{
			    if(found == -1)
			    {
		    		if(strlen(APB[i]) < 3) found = i;
				}
			}
			if(found != -1)
			{
			    format(APB[found], 80, "%s",inputtext);
				scm(playerid, -1, "APB placed!");
			}
		}
		case 408:
		{
		    format(APB[listitem], 80, "");
		    scm(playerid, -1, "APB removed!");
		}
		case 409: //Clothing store
		{
			if(!response) return 1;
			if(listitem == 0) //Buy attachment
			{
				new countid = -1;
				for(new i = 0; i < 5; i++) {
					if(ToyInfo[playerid][i][tModel] == 0) {
						countid = i;
						break;
					}
				}
				if(countid == -1) return error(playerid, "You have no free slots left.");
				new oblist[sizeof(AttachmentObjects)];
				for(new i = 0; i < sizeof(AttachmentObjects); i++)
				{
			        oblist[i] = AttachmentObjects[i][attachmodel];
				}
				ShowModelSelectionMenuEx(playerid, oblist, sizeof(AttachmentObjects), "Select item", 1, 16.0, 0.0, -55.0);
			}
			if(listitem == 1)
			{
				switch(GetPVarInt(playerid,"Sex"))
				{
					case 1: ShowModelSelectionMenuEx(playerid, MaleSkins, sizeof(MaleSkins), "[UCP] Select skin (Male)", 5, 0.0, 0.0, 0.0);
					case 2: ShowModelSelectionMenuEx(playerid, FemaleSkins, sizeof(FemaleSkins), "[UCP] Select skin (Female)", 5, 0.0, 0.0, 0.0);
					default: ShowModelSelectionMenuEx(playerid, MaleSkins, sizeof(MaleSkins), "[UCP] Select skin (Male)", 5, 0.0, 0.0, 0.0);
				}
			}
		}
		case 410: //new house int
		{
		    if(!response) return 1;
		    new keyh = GetPVarInt(playerid, "HouseKey");
			scm(playerid, COLOR_ORANGE, "Don't forget to '/house removeall' to clean-up old house objects. This isn't automated in-case you didn't mean to change the interior.");
            new count = -1;
            new Houseclass = HouseInfo[keyh][hClass];
           	for(new i = 0; i < sizeof(HouseCor); i++)
			{
			    if(HouseCor[i][Class] == Houseclass)
			    {
			        if(count != listitem)
			        {
				        count++;
						HouseInfo[keyh][hXi] = HouseCor[i][mbX];
						HouseInfo[keyh][hYi] = HouseCor[i][mbY];
						HouseInfo[keyh][hZi] = HouseCor[i][mbZ];
						HouseInfo[keyh][hIntIn] = HouseCor[i][Houseint];
					}
			    }
			}
			scm(playerid, -1, "Interior changed.");
			SaveHouse(keyh);
		}
		case 411: //PCR - index
		{
		    if(!response) return 1;
	 		if(strlen(inputtext) < 3) return error(playerid, "Invalid entry");
		    new name[24], query[200];
			mysql_escape_string(inputtext, name);
			SetPVarString(playerid, "PCR-name", name);
			//ShowPlayerDialog(playerid, 412, DIALOG_STYLE_LIST, "Patient Care Report", "View record\nAdd record","Continue","Close");
			format(query, sizeof(query), "SELECT * FROM pcr WHERE player='%s'", name);
			mysql_function_query(handlesql, query, true, "PCRPlayer", "ii", playerid, 1);
		}
		case 412: //PCR - Name selected - NOT IN USE.
		{
	 		if(!response) return 1;
	 		if(strlen(inputtext) < 3) return error(playerid, "Invalid entry");
	 		new query[200], name[24];
	 		GetPVarString(playerid, "PCR-name", name, 24);
			switch(listitem)
			{
			    case 0:
			    {
					format(query, sizeof(query), "SELECT * FROM pcr WHERE player='%s'", name);
					mysql_function_query(handlesql, query, true, "PCRPlayer", "ii", playerid, 1);
			    }
			}
		}
		case 413: //PCR - See record
		{
		    new query[128], name[24];
	 		GetPVarString(playerid, "PCR-name", name, 24);
			if(!response)
			{
				format(query, sizeof(query), "SELECT * FROM pcr WHERE player='%s'", name);
				mysql_function_query(handlesql, query, true, "PCRPlayer", "ii", playerid, 1);
			}
			else
			{
			    if(listitem == 0)
			    {
			        ShowPlayerDialog(playerid, 414, DIALOG_STYLE_INPUT, "Patient Care Report", "Insert a short title/summary of the file.","Continue","");
			    }
			    else
			    {
					format(query, sizeof(query), "SELECT * FROM pcr WHERE time='%s'", MDCinfo[playerid][listitem -1][mTime]);
					mysql_function_query(handlesql, query, true, "PCRPlayer", "ii", playerid,2);
				}
			}
		}
		case 414: //PCR - Insert Name
		{
	 		if(strlen(inputtext) < 3) return error(playerid, "Invalid entry");
		    new title[50];
		    mysql_escape_string(inputtext, title);
		    SetPVarString(playerid, "PCR-insert-title", title);
		    ShowPlayerDialog(playerid, 415, DIALOG_STYLE_LIST, "Patient Care Report - Select impact", "{33A0FF}Check-up\n{33FF66}Casual\n{FFCC33}Normal\n{FF0000}Severe","Continue","");
		}
		case 415: //PCR - Insert Severity
		{
		    SetPVarInt(playerid, "PCR-insert-critic", listitem);
		    ShowPlayerDialog(playerid, 416, DIALOG_STYLE_INPUT, "Patient Care Report", "Insert the detailed text of the incident (max 400 words)","Continue","");
		}
		case 416: //PCR- Insert Text
		{
	 		if(strlen(inputtext) < 3) return error(playerid, "Invalid entry");
		    new text[400];
		    mysql_escape_string(inputtext, text);
		    SetPVarString(playerid, "PCR-insert-text", text);
		    
			new query[1024], year, month, day, hour, minute, second;
			getdate(year, month, day);
			gettime(hour,minute,second);
			new datum[64], time[64];
			new name[24], title[50];
	 		GetPVarString(playerid, "PCR-name", name, 24);
	 		GetPVarString(playerid, "PCR-insert-title", title, 50);
	 		
			format(time, sizeof(time), "%d:%d:%d", hour, minute, second);
		 	format(datum, sizeof(datum), "%d-%d-%d", year, month, day);
			format(query, sizeof(query), "INSERT INTO `pcr`(`player`, `medic`, `date`, `time`, `text`, `title`, `critic`) VALUES ('%s','%s','%s','%s','%s','%s','%d')",
			name, PlayerName(playerid), datum, time, text, title, GetPVarInt(playerid, "PCR-insert-critic"));
			mysql_tquery(handlesql, query);
	 		GetPVarString(playerid, "PCR-name", name, 24);
			format(query, sizeof(query), "SELECT * FROM pcr WHERE player='%s'", name);
			mysql_function_query(handlesql, query, true, "PCRPlayer", "ii", playerid, 1);

		}
		case 417: //PCR - See in detail
		{
		    new query[128], name[24];
	 		GetPVarString(playerid, "PCR-name", name, 24);
			format(query, sizeof(query), "SELECT * FROM pcr WHERE player='%s'", name);
			mysql_function_query(handlesql, query, true, "PCRPlayer", "ii", playerid, 1);
		}
		case 418: //Lottery
		{
		    if(strval(inputtext) < 1 || strval(inputtext) > 500) return ShowPlayerDialog(playerid, 418, DIALOG_STYLE_INPUT, "Lottery ticket", "What number would you like your ticket to be? \nInsert any number between 1-500", "Buy","");
			new number = strval(inputtext);
			new query[500];
			format(query, sizeof(query), "SELECT * FROM lottery WHERE Number=%d AND Active=1", number);
			mysql_function_query(handlesql, query, true, "LotteryCheck", "iii", playerid, 1, number);
		}
		case 419: // Using /lottery
		{
		
		}
		case 423: //Ingame UCP
		{
			if(!response) {
				SendClientMessage(playerid, COLOR_ORANGE, "Did you know? You can use 'N' to access your inventory, or the inventory of buildings/objects.");
				return 1;
			}
			switch(listitem)
	        {
				case 0: ShowPlayerDialog(playerid,424,DIALOG_STYLE_LIST,"[UCP] Player Options", "Change in-game name\nChange player model\nChange player age\nChange player gender\nChange password\nChange email", "Select", "Back");
				case 1: ShowPlayerDialog(playerid,80,DIALOG_STYLE_LIST,"[UCP] Settings","Select Chatstyle\nSelect Walkstyle\nToggle Private Messages\nToggle HUD\nToggle Basic Audios\nToggle Auto Reload\nMoney Bar Color\nCellphone Color\nToggle San News\nToggle RLS Radio\nToggle L-OOC Chat\nToggle Payment TD","Select", "Back");
				case 2:
				{
					if(GetPVarInt(playerid,"Admin") < 8)
					{
						new mymem = GetPVarInt(playerid, "Member");
						if(mymem == 0 || (GetPVarInt(playerid,"Rank") < MaxRank(mymem)))
						{
							SendClientMessage(playerid,COLOR_LIGHTRED,"You don't have access to Faction Management.");
						}
						else
						{
							ShowPlayerDialog(playerid,425,DIALOG_STYLE_LIST,"[UCP] Faction Options", "Faction management", "Select", "Back");
						}
					}
					else
					{
						ShowPlayerDialog(playerid,425,DIALOG_STYLE_LIST,"[UCP] Faction Options", "Faction management\nCreate a faction\nDelete a Faction", "Select", "Back");
					}
				}
				case 3: ShowPlayerDialog(playerid,427,DIALOG_STYLE_LIST,"[UCP] Staff Options", "Change staff name", "Select", "Back");
				case 4:
				{
					if(GetPVarInt(playerid,"Admin") > 2)
					{
						curPopVar[playerid] = 0;
						curPopVarEx[playerid] = 0;
						ShowPlayerDialog(playerid,430,DIALOG_STYLE_LIST,"[UCP] Admin Options", "Ban list\nSearch ban list", "Select", "Back");
					}
					else
					{
						//ShowPlayerDialog(playerid,430,DIALOG_STYLE_LIST,"[UCP] Admin Options", "No options", "Select", "Back");
						SendClientMessage(playerid,COLOR_YELLOW,"No options currently available for your admin-level.");
					}
				}
			}
		}
		case 424: //UCPRelated Player Options
		{
			if(!response) return EnableUCP(playerid, 0);
			switch(listitem)
			{
				case 0: //UCPRelated Change ingame name (dialogid: 426)
				{
					if(GetPVarInt(playerid,"UCPMode") != 1) {
						ShowPlayerDialog(playerid,426,DIALOG_STYLE_INPUT,"[UCP] Choose your name","Firstname_Lastname ($10,000 or NC Ticket)","Continue", "Cancel");
					} else { return SendClientMessage(playerid,COLOR_LIGHTRED,"You cannot change your name during your first use of the UCP."); }
				} 
				case 1: //UCPRelated Change player model (dialogid: 427)
				{
					new myint = GetPlayerInterior(playerid);
					if((myint != 1 && myint != 5 && myint != 15 && myint != 18 && myint != 14) && GetPVarInt(playerid,"UCPMode") != 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "You must be inside a clothing store to change your clothes.");
					}
					else
					{
						switch(GetPVarInt(playerid,"Sex"))
						{
							case 1: ShowModelSelectionMenuEx(playerid, MaleSkins, sizeof(MaleSkins), "[UCP] Select skin (Male)", 5, 0.0, 0.0, 0.0);
							case 2: ShowModelSelectionMenuEx(playerid, FemaleSkins, sizeof(FemaleSkins), "[UCP] Select skin (Female)", 5, 0.0, 0.0, 0.0);
							default: ShowModelSelectionMenuEx(playerid, MaleSkins, sizeof(MaleSkins), "[UCP] Select skin (Male)", 5, 0.0, 0.0, 0.0);
						}
					}
				}
				case 2: //UCPRelated Change player age (dialogid: 428)
				{
					ShowPlayerDialog(playerid,428,DIALOG_STYLE_INPUT,"[UCP] Choose your age","Age must be between 10 and 110.","Continue", "Cancel");
				}
				case 3: //UCPRelated Change player gender (dialogid: 429)
				{
					ShowPlayerDialog(playerid,429,DIALOG_STYLE_LIST,"[UCP] Choose your gender", "Male\nFemale", "Select", "Cancel");
				}
				case 4: //UCPRelated Change player password (dialogid: 442)
				{
					ShowPlayerDialog(playerid,442,DIALOG_STYLE_INPUT,"[UCP] Choose a new password","Enter your new password below","Continue", "Cancel");
				}
				case 5: //UCPRelated Change player email (dialogid: 516)
				{
					ShowPlayerDialog(playerid,516,DIALOG_STYLE_INPUT,"[UCP] Choose a new email","Enter your new email below","Continue", "Cancel");
				}
			}
		}
		case 425: //UCPRelated Faction Options
		{
			if(!response) return EnableUCP(playerid, 0);
			switch(listitem)
			{
				case 0: //Faction management
				{
					if(GetPVarInt(playerid,"Admin") < 8)
					{
						new mymem = GetPVarInt(playerid, "Member");
						if(mymem != 1 && (GetPVarInt(playerid, "Rank") >= MaxRank(mymem)))
						{
							new query[64];
							format(query,64,"SELECT Name FROM factions WHERE ID=%d",mymem);
							mysql_function_query(handlesql,query,true,"ManageFaction","d",playerid);
						}
					}
					else
					{
						mysql_function_query(handlesql,"SELECT Name FROM factions",true,"AManageFactions","d",playerid);
					}
				}
				case 1:
				{
					ShowPlayerDialog(playerid,438,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 1)","What is this factions ID? (number)", "Next", "Cancel");
				}
				case 2: //Delete-A-Faction
				{
					ShowPlayerDialog(playerid, 535, DIALOG_STYLE_INPUT, "Delete a faction", "What is the ID of the faction you'd like to delete?", "Go", "Cancel");
				}
			}
		}
		case 426: //UCPRelated Change ingame name
		{
			if(response != 1) return 1;
			if(!strlen(inputtext)) return 1;
			if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid,COLOR_LIGHTRED,"Names must be between 3 and 24 characters long.");
			if(!NameIsRP(inputtext)) return SendClientMessage(playerid,COLOR_LIGHTRED,"The name you have selected doesn't qualify as an RP name. (FORMAT: Firstname_Lastname)");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your request is being processed...");
			SetPVarString(playerid, "NCTo", inputtext);
			new query[82];
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM `accounts` WHERE `Name` = '%s'", inputtext);
			mysql_function_query(handlesql, query, true, "HandleNC", "i", playerid);
		}
		case 427: //Staff member options
		{
			if(!response) return EnableUCP(playerid, 0);
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid,431,DIALOG_STYLE_INPUT,"[UCP] Choose your staff-name","Pick your OOC staff-member name","Continue", "Cancel");
			}
		}
		case 428: //UCPRelated Change player age
		{
			if(!response) {
				if(GetPVarInt(playerid,"UCPMode") == 1) {
					SetPVarInt(playerid, "Age", 21);
					ShowPlayerDialog(playerid, 429, DIALOG_STYLE_LIST, "[UCP] Choose your gender", "Male\nFemale", "Select", "Cancel");
				}	
				return 1;
			}
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, 428, DIALOG_STYLE_INPUT,"[UCP] Choose your age","Age must be between 10 and 110.", "Continue", "Cancel");
			new age = strval(inputtext);
			if(age < 10 || age > 110) {
				ShowPlayerDialog(playerid, 428, DIALOG_STYLE_INPUT,"[UCP] Choose your age","Age must be between 19 and 110.", "Continue", "Cancel");
				return SendClientMessage(playerid, COLOR_LIGHTRED, "Your age must be between 10 and 110.");
			}
			SetPVarInt(playerid,"Age",age);
			format(string,sizeof(string),"Your age has been set to %i.",age);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			OnPlayerDataSave(playerid);
			if(GetPVarInt(playerid,"UCPMode") == 1) { ShowPlayerDialog(playerid, 429, DIALOG_STYLE_LIST, "[UCP] Choose your gender", "Male\nFemale", "Select", "Cancel"); }
		}
		case 429: //UCPRelated Change player gender
		{
			if(!response) {
				if(GetPVarInt(playerid,"UCPMode") == 1) { CallRemoteFunction("StartingUCP", "i", playerid); }
				return 1;
			}
			switch(listitem)
			{
				case 0:
				{
					SetPVarInt(playerid, "Sex", 1);
					SendClientMessage(playerid, COLOR_YELLOW, "Your gender has been set to 'Male'.");
					OnPlayerDataSave(playerid);
				}
				case 1:
				{
					SetPVarInt(playerid,"Sex",2);
					SendClientMessage(playerid, COLOR_YELLOW, "Your gender has been set to 'Female'.");
					OnPlayerDataSave(playerid);			
				}
			}
			if(GetPVarInt(playerid,"UCPMode") == 1) { CallRemoteFunction("StartingUCP", "i", playerid); }
		}
		case 430: //UCPRelated Admin UCP options
		{
			if(!response) return EnableUCP(playerid, 0);
			switch(listitem)
			{
				case 0:
				{
					mysql_tquery(handlesql,"SELECT bUsername FROM bans","PopulateBanList","i",playerid);
				}
				case 1: ShowPlayerDialog(playerid,437,DIALOG_STYLE_INPUT,"[UCP] Search for ban","Name or part of banned player name.","Continue", "Cancel");
				default: mysql_tquery(handlesql,"SELECT bUsername FROM bans","PopulateBanList","i",playerid);
			}
		}
		case 431: //UCPRelated Change Staff Name
		{
			if(response != 1) return 1;
			if(!strlen(inputtext)) return 1;
			if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid,COLOR_LIGHTRED,"Staff names must be between 3 and 24 characters long.");
			new safename[25];
			mysql_real_escape_string(inputtext, safename);
			mysql_format(handlesql, string, sizeof(string), "SELECT NULL FROM accounts WHERE ForumName='%s'", safename);
			mysql_tquery(handlesql, string, "CheckForumName", "is", playerid, inputtext);
		}
		case 432:
		{
		    if(response)
		    {
				SetPVarString(playerid,"CurBLPlayer",inputtext);
		        return ShowPlayerDialog(playerid,433,DIALOG_STYLE_LIST,"Ban list options","Previous page\nView ban info","Select", "Exit");
		    }
		    else
		    {
				if(GetPVarInt(playerid,"EndOfBL") == 1) return 1;
				curPopVar[playerid]++;
				mysql_tquery(handlesql, "SELECT bUsername FROM bans", "PopulateBanList", "i", playerid);
		    }
		}
		case 433:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					curPopVar[playerid]--;
					if(curPopVar[playerid] < 0) curPopVar[playerid] = 0;
					mysql_tquery(handlesql,"SELECT bUsername FROM bans","PopulateBanList","i",playerid);
				}
				case 1:
				{
					new curBanPly[MAX_PLAYER_NAME];
					GetPVarString(playerid,"CurBLPlayer",curBanPly,MAX_PLAYER_NAME);
					new query[80];
					format(query,80,"SELECT * FROM bans WHERE bUsername='%s'",curBanPly);
					mysql_tquery(handlesql,query,"ShowBanInfo","i",playerid);
				}
			}
		}
		case 434:
		{
		    if(response)
		    {
				SetPVarString(playerid,"CurBLPlayer",inputtext);
		        return ShowPlayerDialog(playerid,435,DIALOG_STYLE_LIST,"Ban list options","Previous page\nView ban info","Select", "Exit");
		    }
		    else
		    {
				if(GetPVarInt(playerid,"EndOfBL") == 1) return 1;
				curPopVarEx[playerid]++;
				new filter[128];
				GetPVarString(playerid,"CurBLFilter",filter,128);
				mysql_tquery(handlesql,"SELECT bUsername FROM bans","PopulateBanListEx","is",playerid,filter);
		    }
		}
		case 435:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					curPopVarEx[playerid]--;
					if(curPopVarEx[playerid] < 0) curPopVarEx[playerid] = 0;
					new filter[128];
					GetPVarString(playerid,"CurBLFilter",filter,128);
					mysql_tquery(handlesql,"SELECT bUsername FROM bans","PopulateBanListEx","is",playerid,filter);
				}
				case 1:
				{
					new curBanPly[MAX_PLAYER_NAME];
					GetPVarString(playerid,"CurBLPlayer",curBanPly,MAX_PLAYER_NAME);
					new query[80];
					format(query,80,"SELECT * FROM bans WHERE bUsername = '%s'",curBanPly);
					mysql_tquery(handlesql,query,"ShowBanInfo","i",playerid);
				}
			}
		}
		case 436:
		{	
		    if(!response) return 1;
			new curBanPly[MAX_PLAYER_NAME];
			GetPVarString(playerid,"CurBLPlayer",curBanPly,MAX_PLAYER_NAME);
			new query[128];
			format(query, sizeof(query), "DELETE FROM bans WHERE bUsername = '%s'", curBanPly);
			mysql_tquery(handlesql, query);
			format(string, 128, "AdmCmd: %s was un-banned by %s.", curBanPly, AdminName(playerid));
			SendClientMessageToAll(COLOR_LIGHTRED, string);	
			format(string, sizeof(string), "[UNBAN][%s] %s", PlayerName(playerid), string);
			BanLog(string);
		}
		case 437:
		{
			if(!response) return 1;
			if(!strlen(inputtext)) return 1;
			SetPVarString(playerid,"CurBLFilter",inputtext);
			mysql_tquery(handlesql,"SELECT bUsername FROM bans","PopulateBanListEx","is",playerid,inputtext);
		}
		case 438: //Create-A-Faction step1 (Faction ID)
		{
			if(!response)
			{
				DeletePVar(playerid,"NewF_ID");
				DeletePVar(playerid,"NewF_Name");
				DeletePVar(playerid,"NewF_Ranks");
				return SendClientMessage(playerid,COLOR_LIGHTRED,"Faction creation cancelled!");
			}
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,438,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 1)","What is this factions ID? (number)", "Next", "Cancel");
			new num = strval(inputtext);
			if(num < 1 || num > (MAX_FACTIONS-1)) return ShowPlayerDialog(playerid,439,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 1)","What is this factions ID? (1-49)", "Next", "Cancel");
			if(FactionInfo[num][fUsed] == 1) return SendClientMessage(playerid,COLOR_LIGHTRED,"A faction with this ID already exists.");
			SetPVarInt(playerid,"NewF_ID",num);
			ShowPlayerDialog(playerid,439,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 2)","Pick a name for the faction.", "Next", "Go back");
		}		
		case 439: //Create-A-Faction step2 (Pick a name)
		{
			if(!response) return ShowPlayerDialog(playerid,438,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 1)","What is this factions ID? (number)", "Next", "Cancel");
			if(!strlen(inputtext) || strlen(inputtext) < 1) return ShowPlayerDialog(playerid,439,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 2)","Pick a name for the faction.", "Next", "Go back");
			new eStr[128];
			mysql_real_escape_string(inputtext, eStr);
			SetPVarString(playerid,"NewF_Name",eStr);
			ShowPlayerDialog(playerid,440,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 3)","What is the max-rank in this faction?(1-25)", "Next", "Go back");
		}
		case 440: //Create-A-Faction step3 (What is the highest rank in this faction?)
		{
			if(!response) return ShowPlayerDialog(playerid,439,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 2)","Pick a name for the faction.", "Next", "Go back");
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,440,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 3)","What is the max-rank in this faction?(1-25)", "Next", "Go back");
			new num = strval(inputtext);
			if(num < 1 || num > 25) return ShowPlayerDialog(playerid,440,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 3)","What is the max-rank in this faction?(1-25)", "Next", "Go back");
			SetPVarInt(playerid,"NewF_Ranks",num);
			ShowPlayerDialog(playerid,441,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 4)","Does the faction have weapon/drug rights?\n(0-None/1-Guns/2-Drugs[1]/3-Drugs[2])", "Finish", "Go back"); 
		}
		case 441: //Create-A-Faction step4 (Should the faction have weapon rights?)
		{
			if(!response) return ShowPlayerDialog(playerid,440,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 3)","What is the max-rank in this faction?(1-25)", "Next", "Go back");
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid,441,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 4)","Does the faction have weapon/drug rights?\n(0-None/1-Guns/2-Drugs[1]/3-Drugs[2])", "Finish", "Go back");
			new num = strval(inputtext);
			if(num < 0 || num > 3) return ShowPlayerDialog(playerid,441,DIALOG_STYLE_INPUT,"Create-A-Faction (Step 4)","Does the faction have weapon/drug rights?\n(0-None/1-Guns/2-Drugs[1]/3-Drugs[2])", "Finish", "Go back"); 
			new name[48];
			GetPVarString(playerid,"NewF_Name",name,48);
			CreateFaction(playerid,GetPVarInt(playerid,"NewF_ID"),name,GetPVarInt(playerid,"NewF_Ranks"),num);
		}
		case 442: //UCPRelated Change password
		{
			if(response != 1) return 1;
			if(!strlen(inputtext)) return 1;
			if(strlen(inputtext) < 4) return SendClientMessage(playerid,COLOR_LIGHTRED,"Your password must be at least 4 characters long.");
			new newpass[128];
			format(newpass,128,"%s",inputtext);
			SetPVarString(playerid,"NewPass",newpass);
			ShowPlayerDialog(playerid,443,DIALOG_STYLE_INPUT,"Confirm your new password","Enter the same password.", "Finish", "Cancel"); 
		}
		case 443: //UCPRelated Confirm new password
		{
			if(response != 1) 
			{
				DeletePVar(playerid,"NewPass");
				return 1;
			}
			if(!strlen(inputtext)) 
			{
				DeletePVar(playerid,"NewPass");
				return 1;
			}
			if(strlen(inputtext) < 4) 
			{
				DeletePVar(playerid,"NewPass");
				return SendClientMessage(playerid,COLOR_LIGHTRED,"Your password must be at least 4 characters long.");
			}
			new newpass[128];
			GetPVarString(playerid,"NewPass",newpass,128);
			if(!strmatch(newpass,inputtext)) return SendClientMessage(playerid,COLOR_LIGHTRED,"The passwords you have entered do not match!");
			new query[256];
			SHA256_PassHash(newpass, HASH_KEY, newpass, 65);
			format(query,256,"UPDATE accounts SET Pass='%s' WHERE Name='%s'",newpass,PlayerName(playerid));
			mysql_tquery(handlesql, query);
			format(PlayerInfo[playerid][pPass],65,"%s",newpass);
			SendClientMessage(playerid, COLOR_GREEN, "Your password has been successfully changed!");
			DeletePVar(playerid,"NewPass");
		}
		case 447:
		{
		    if(!response) return 1;
		    new keyex = FurnRight(playerid, 2);
		    if(keyex == -1) return 1;
			CallRemoteFunction("SetBizCP", "ii", playerid, keyex);
		}
		case 501: //What layer do you want to change? Material-editing.
		{
			if(!response) return 1;
			SetPVarInt(playerid, "FurnEditL", listitem);
			new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 2);
			ChangeDynamicObjectMaterial(BizInfo[key2][bObject][h], listitem, 30);
			new list[2048];
			for(new i=0; i < sizeof(MaterialIDs); i++)
			{
				format(list,2048,"%s\n%s",list,MaterialIDs[i][Name]);
			}
			ShowPlayerDialog(playerid, 502, DIALOG_STYLE_LIST, "Material List", list, "Select", "Back");
		}
		case 502: //Object Material List
		{
			new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 2);
			if(!response) {
				if(IsValidDynamicObject(BizInfo[key2][bObject][h])) DestroyDynamicObject(BizInfo[key2][bObject][h]);
				BizInfo[key2][bObject][h] = CreateDynamicObject(BizInfo[key2][boID][h], BizInfo[key2][boX][h], BizInfo[key2][boY][h], BizInfo[key2][boZ][h], BizInfo[key2][borX][h], BizInfo[key2][borY][h], BizInfo[key2][borZ][h], key2);
				for( new v=0; v < 13; v++) {
					if(BizMInfo[key2][h][v] != 0) {
						ChangeDynamicObjectMaterial(BizInfo[key2][bObject][h], v, BizMInfo[key2][h][v]);
					}
				}
				Streamer_Update(playerid);
				DeletePVar(playerid,"FurnEditL");
				return ShowPlayerDialog(playerid, 501, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12", "Select", "Close");
			}
			if(listitem == 0) {
				BizMInfo[key2][h][GetPVarInt(playerid,"FurnEditL")] = 0;
				if(IsValidDynamicObject(BizInfo[key2][bObject][h])) DestroyDynamicObject(BizInfo[key2][bObject][h]);
				BizInfo[key2][bObject][h] = CreateDynamicObject(BizInfo[key2][boID][h], BizInfo[key2][boX][h], BizInfo[key2][boY][h], BizInfo[key2][boZ][h], BizInfo[key2][borX][h], BizInfo[key2][borY][h], BizInfo[key2][borZ][h], key2);
				for( new v=0; v < 13; v++) {
					if(BizMInfo[key2][h][v] != 0) {
						ChangeDynamicObjectMaterial(BizInfo[key2][bObject][h], v, BizMInfo[key2][h][v]);
					}
				}
				Streamer_Update(playerid);
				SaveBizzObj(key2, h);
				format(string, sizeof(string), "Object %d's material layer %d reset to default.",BizInfo[key2][bObject][h],GetPVarInt(playerid,"FurnEditL"));
				return SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			ChangeDynamicObjectMaterial(BizInfo[key2][bObject][h], GetPVarInt(playerid,"FurnEditL"), listitem);
			BizMInfo[key2][h][GetPVarInt(playerid,"FurnEditL")] = listitem;
			SaveBizzObj(key2, h);
			format(string, sizeof(string), "Object %d's material layer %d changed to: '%s'.",BizInfo[key2][bObject][h],GetPVarInt(playerid,"FurnEditL"),MaterialIDs[listitem][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			DeletePVar(playerid,"FurnEditL");
		}
		case 503: //What layer do you want to change? Material-editing.
		{
			if(!response) return 1;
			SetPVarInt(playerid, "FurnEditL", listitem);
			new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1);
			ChangeDynamicObjectMaterial(HouseInfo[key2][hObject][h], listitem, 30);
			new list[2048];
			for(new i=0; i < sizeof(MaterialIDs); i++)
			{
				format(list,2048,"%s\n%s",list,MaterialIDs[i][Name]);
			}
			ShowPlayerDialog(playerid, 504, DIALOG_STYLE_LIST, "Material List", list, "Select", "Back");
		}
		case 504: //Object Material List
		{
			new h = GetPVarInt(playerid, "FurnEditH"), key2 = FurnRight(playerid, 1);
			if(!response) {
				if(IsValidDynamicObject(HouseInfo[key2][hObject][h])) DestroyDynamicObject(HouseInfo[key2][hObject][h]);
				HouseInfo[key2][hObject][h] = CreateDynamicObject(HouseInfo[key2][hoID][h], HouseInfo[key2][hoX][h], HouseInfo[key2][hoY][h], HouseInfo[key2][hoZ][h], HouseInfo[key2][horX][h], HouseInfo[key2][horY][h], HouseInfo[key2][horZ][h], key2);
				for( new v=0; v < 13; v++) {
					if(HouseMInfo[key2][h][v] != 0) {
						ChangeDynamicObjectMaterial(HouseInfo[key2][hObject][h], v, HouseMInfo[key2][h][v]);
					}
				}
				Streamer_Update(playerid);	
				DeletePVar(playerid,"FurnEditL");
				return ShowPlayerDialog(playerid, 503, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12", "Select", "Close");
			}
			if(listitem == 0) {
				HouseMInfo[key2][h][GetPVarInt(playerid,"FurnEditL")] = 0;
				if(IsValidDynamicObject(HouseInfo[key2][hObject][h])) DestroyDynamicObject(HouseInfo[key2][hObject][h]);
				HouseInfo[key2][hObject][h] = CreateDynamicObject(HouseInfo[key2][hoID][h], HouseInfo[key2][hoX][h], HouseInfo[key2][hoY][h], HouseInfo[key2][hoZ][h], HouseInfo[key2][horX][h], HouseInfo[key2][horY][h], HouseInfo[key2][horZ][h], key2);
				for( new v=0; v < 13; v++) {
					if(HouseMInfo[key2][h][v] != 0) {
						ChangeDynamicObjectMaterial(HouseInfo[key2][hObject][h], v, HouseMInfo[key2][h][v]);
					}
				}
				Streamer_Update(playerid);
				SaveFurnObj(key2, h);
				format(string, sizeof(string), "Object %d's material layer %d reset to default.",HouseInfo[key2][hObject][h],GetPVarInt(playerid,"FurnEditL"));
				return SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			ChangeDynamicObjectMaterial(HouseInfo[key2][hObject][h], GetPVarInt(playerid,"FurnEditL"), listitem);
			HouseMInfo[key2][h][GetPVarInt(playerid,"FurnEditL")] = listitem;
			SaveFurnObj(key2, h);
			format(string, sizeof(string), "Object %d's material layer %d changed to: '%s'.",HouseInfo[key2][hObject][h],GetPVarInt(playerid,"FurnEditL"),MaterialIDs[listitem][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			DeletePVar(playerid,"FurnEditL");
		}
		case 505:
		{
		    if(response)
			{
				new found, foundid, Float:pos[3], result[500];
			    for(new i = 0; i < sizeof(CorpInfo); i++)
                {
                    if(CorpInfo[i][cUsed] == 1 && found == 0)
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 2.0, CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]))
                        {
                            found++;
                            foundid = i;
                        }
                    }
			    }
			    if(found == 0) return 1;
			    switch(listitem)
			    {
			        case 0: // Examine
			        {
						format(result, 500, "%s\n%s", CorpInfo[foundid][cNote1], CorpInfo[foundid][cNote2]);
			            ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Corpse Information", result, "Close", "");
			        }
			        case 1: // Store In Vehicle
			        {
			            if(GetPVarInt(playerid, "Dead") > 0) return 1;
	    	            if(GetPVarInt(playerid, "Mute") == 1) return 1;
	    	            if(GetPVarInt(playerid, "Cuffed") != 0) return 1;
	    	            new vehicleID = PlayerToCar(playerid, 2, 4.0);
                        if(vehicleID == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_GREY, "You aren't near any vehicles.");
						if(!IsTrunkCar(GetVehicleModel(vehicleID))) return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't have a suitable trunk!");
						if(VehicleInfo[vehicleID][vTrunk] == 0) return SendClientMessage(playerid, COLOR_GREY, "The vehicles trunk must be opened.");
                        GetVehiclePos(vehicleID, pos[0], pos[1], pos[2]);
		                if(IsPlayerInRangeOfPoint(playerid, 10.0, pos[0], pos[1], pos[2]))
						{
						    if(VehicleInfo[vehicleID][vCorp] > 0 && CorpInfo[VehicleInfo[vehicleID][vCorp]][cUsed] == 1) return scm(playerid, -1, "There's a corpse already in this vehicle!");
						    scm(playerid, -1, "Corpse stored in the vehicle!");
						    CorpInfo[foundid][cTime]=60;
						    CorpInfo[foundid][cVeh]=vehicleID;
						    VehicleInfo[vehicleID][vCorp]=foundid;
						    DestroyDynamic3DTextLabel(CorpInfo[foundid][cText]);
							if(IsValidActor(CorpInfo[foundid][cBody])) {
								DestroyActorEx(CorpInfo[foundid][cBody]);
							}
						}
						else SendClientMessage(playerid, COLOR_GREY, "You are not around your vehicle.");
			        }
			        case 2: // Corpse removed
			        {
			            RemoveCorpse(foundid);
			            scm(playerid, -1, "Corpse discarded.");
			        }
			    }
			}
		}
		case 506:
		{
		    if(!response) return 1;
			if(!IsNumeric(inputtext)) return scm(playerid,-1,"Safe-combos are numeric. (4-digits)");
			new combo = strval(inputtext);
			if(combo < 1000 || combo > 9999) return scm(playerid,-1,"Safe-combos are 4 digits long.");
		    new id = GetPVarInt(playerid,"HouseEnter");
			if(HouseInfo[id][hCombo] == combo) {
				HouseInfo[id][sLocked] = 0;
				scm(playerid,COLOR_ORANGE,"House safe(s) unlocked!");
				SaveHouse(id);
				format(string, sizeof(string), "%s tried to open house-safe #%i with the combination %i and succeeded.", PlayerName(playerid), id, inputtext);
				SafeLog(string);
			} else {
				SendMessageByName(HouseInfo[id][hOwner],COLOR_BLUE,"[Safe-Alert] Someone has entered an incorrect combination for your house-safe.");
				format(string, sizeof(string), "%s tried to open house-safe #%i with the combination %i and failed.", PlayerName(playerid), id, inputtext);
				SafeLog(string);
			}
		}
		case 507:
		{
		    if(!response) return 1;
			if(!IsNumeric(inputtext)) return scm(playerid,-1,"Safe-combos are numeric. (4-digits)");
			new combo = strval(inputtext);
			if(combo < 1000 || combo > 9999) return scm(playerid,-1,"Safe-combos are 4 digits long.");
		    new id = GetPVarInt(playerid,"BizzEnter");
			if(BizInfo[id][Combo] == combo) {
				BizInfo[id][sLocked] = 0;
				scm(playerid,COLOR_ORANGE,"Business safe(s) unlocked!");
				SaveBiz(id);
				format(string, sizeof(string), "%s tried to open business-safe #%i with the combination %i and succeeded.", PlayerName(playerid), id, inputtext);
				SafeLog(string);
			} else {
				SendMessageByName(BizInfo[id][Owner],COLOR_BLUE,"[Safe-Alert] Someone has entered an incorrect combination for your business-safe.");
				format(string, sizeof(string), "%s tried to open business-safe #%i with the combination %i and failed.", PlayerName(playerid), id, inputtext);
				SafeLog(string);
			}
		}
		case 508:
		{
			new mtg = GetPVarInt(playerid, "MarriagePlayer"), result[256];
			DeletePVar(playerid,"MarriagePlayer");
		    switch(response)
	        {
	            case 0:
	            {
	                format(string,sizeof(string),"%s denied your marriage offer.", PlayerName(playerid));
	                SendClientMessage(mtg, COLOR_WHITE, string);
	                DeletePVar(mtg, "MarriagePlayer");
	            }
	            case 1:
	            {
	                strmid(PlayerInfo[playerid][pMarriedTo], PlayerName(mtg), 0, strlen(PlayerName(mtg)), 255);
	                strmid(PlayerInfo[mtg][pMarriedTo], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 255);
	                if(GetPVarInt(playerid, "Sex") == GetPVarInt(mtg, "Sex")) {
	                format(result, 256,"(( Marriage News: We have a new lovely gay couple, %s & %s have been legally married. ))", PlayerName(playerid), PlayerName(mtg));
	                } else {
	                format(result, 256,"(( Marriage News: We have a new lovely couple, %s & %s have been married. ))", PlayerName(playerid), PlayerName(mtg)); }
	                SendClientMessageToAll(-1, result);
	                DeletePVar(mtg,"MarriagePlayer");
					GivePlayerMoneyEx(playerid,-20000);
					scm(playerid,COLOR_GREY,"You've spent $20,000 on your wedding.");
					OnPlayerDataSave(playerid);
					OnPlayerDataSave(mtg);
	            }
			}
		}
		case 509:
		{
		    if(!response) // RETURN TO MENU
			{
				DeletePVar(playerid, "RimID");
		        SetPVarInt(playerid, "VEHSEC", 0);
		        CallRemoteFunction("VehMod", "i", playerid);
				return 1;
		    }
			new id = GetPVarInt(playerid, "RimID");
			new rcost;
			if(GetPVarInt(playerid, "DonateRank") == 0) {
				rcost = Components[id][cPrice];
				format(string, sizeof(string), "You've bought '%s' rims for $%d.", Components[id][cName], rcost);
			}
			else {
				rcost = 0;
				format(string, sizeof(string), "You've bought '%s' rims. They were free because you are a donor.", Components[id][cName]);
			}
			if(GetPlayerMoneyEx(playerid) < rcost) {
				DeletePVar(playerid, "RimID");
		        SetPVarInt(playerid, "VEHSEC", 0);
		        CallRemoteFunction("VehMod", "i", playerid);
				return scm(playerid, COLOR_GREY, "You can't afford these rims.");
			}
			new keyex = GetPlayerVehicleID(playerid);
			AddVehicleComponent(keyex, Components[id][cID]);
			AddVehMod(keyex, Components[id][cID]);
			CallRemoteFunction("VehMod", "i", playerid);
			new query[300];
			mysql_format(handlesql, query, sizeof(query), "UPDATE `vehicles` SET `Mod1` = %i, `Mod2` = %i, `Mod3` = %i, `Mod4` = %i, `Mod5` = %i, `Mod6` = %i, `Mod7` = %i, \
																				 `Mod8` = %i, `Mod9` = %i, `Mod10` = %i, `Mod11` = %i WHERE `ID` = %i;",
						 VehicleInfo[keyex][vMod][0], VehicleInfo[keyex][vMod][1], VehicleInfo[keyex][vMod][2], VehicleInfo[keyex][vMod][3], VehicleInfo[keyex][vMod][4], VehicleInfo[keyex][vMod][5],
						 VehicleInfo[keyex][vMod][6], VehicleInfo[keyex][vMod][7], VehicleInfo[keyex][vMod][8], VehicleInfo[keyex][vMod][9], VehicleInfo[keyex][vMod][10], VehicleInfo[keyex][vID]);
			mysql_tquery(handlesql, query);
			GivePlayerMoneyEx(playerid, -rcost);
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			scm(playerid, -1, string);
			DeletePVar(playerid, "RimID");
		}
		case 510: // Application list
		{
			if(!response) return 1;
			SetPVarString(playerid, "ReviewName", inputtext);
			format(string, sizeof(string), "You are currently viewing %s's application.", inputtext);
			scm(playerid, -1, string);
			ShowPlayerDialog(playerid, 511, DIALOG_STYLE_LIST, "Options", "Approve Player\nDeny Player\nView Application", "Select", "Exit");
		}
		case 511: // View/Accept/Deny/
		{
			if(GetPVarInt(playerid, "Delay") > GetCount()) return scm(playerid, COLOR_WHITE, "Please try again - spam prevention stopped your last action.");
			new query[128];
			if(!response) {
				DeletePVar(playerid, "ReviewName");
				mysql_format(handlesql, query, sizeof(query), "SELECT `Name` FROM applications");
				mysql_tquery(handlesql, query, "PopulateAppMenu", "i", playerid);
				return 1;
			}
			switch(listitem)
			{
				case 0: //Approve app
				{
					new name[25];
					GetPVarString(playerid, "ReviewName", name, sizeof(name));
					mysql_format(handlesql, query, sizeof(query), "SELECT `Pass` FROM applications WHERE `Name`='%s'", name);
					mysql_tquery(handlesql, query, "OnPlayerRegister", "s", name);
					DeletePVar(playerid, "ReviewName");
					format(string, sizeof(string), "AdmCmd: %s approved player %s.", PlayerName(playerid), name);
      				SendAdminAndRegMessage(COLOR_LIGHTRED,string);
      				RegLog(string);
				}
				case 1: //Deny app
				{
					new name[25];
					GetPVarString(playerid, "ReviewName", name, sizeof(name));
					mysql_format(handlesql, query, sizeof(query), "DELETE FROM applications WHERE `Name`='%s'",name);
					mysql_tquery(handlesql, query);
					DeletePVar(playerid, "ReviewName");
					format(string, sizeof(string), "AdmCmd: %s denied player %s.", PlayerName(playerid), name);
      				SendAdminAndRegMessage(COLOR_LIGHTRED,string);
      				RegLog(string);		
					new targetid = FindPlayer(name);
					if(targetid != -1) {
						scm(targetid, COLOR_RED, "Your application has been denied, please read the rules posted on www.diverseroleplay.org and try again.");
						Kick(targetid);
					}
				}
				case 2: //View app
				{
					new name[25];
					GetPVarString(playerid, "ReviewName", name, sizeof(name));
					SetPVarInt(playerid, "AppPage", 0);
					mysql_format(handlesql, query, sizeof(query), "SELECT * FROM applications WHERE `Name`='%s'", name);
					mysql_tquery(handlesql, query, "ViewAppInfo", "is", playerid, name);
				}
			}
			SetPVarInt(playerid, "Delay", GetCount()+500);
		}
		case 512: // Currently viewing an app
		{
			if(!response) {
				DeletePVar(playerid, "AppPage");
				return ShowPlayerDialog(playerid, 511, DIALOG_STYLE_LIST, "Options", "Approve Player\nDeny Player\nView Application", "Select", "Exit");
			}
			new name[25];
			GetPVarString(playerid, "ReviewName", name, sizeof(name));
			switch(GetPVarInt(playerid, "AppPage"))
			{
				case 0:
				{
					SetPVarInt(playerid, "AppPage", 1);
				}
				case 1:
				{
					SetPVarInt(playerid, "AppPage", 2);
				}
				case 2:
				{
					SetPVarInt(playerid, "AppPage", 0);
				}
			}
			new query[72];
			mysql_format(handlesql, query, sizeof(query), "SELECT * FROM applications WHERE `Name`='%s'", name);
			mysql_tquery(handlesql, query, "ViewAppInfo", "is", playerid, name);
		}
		case 513: // Your application info
		{
			if(GetPVarInt(playerid, "AccountExist") == 1) return 1;
			if(GetPVarInt(playerid, "Delay") > GetCount()) return ShowPlayerDialog(playerid, 513, DIALOG_STYLE_MSGBOX, "Spam prevention", "You can only 'Refresh' this dialog once every 5 seconds.", "Refresh", "");
			new query[100];
			mysql_format(handlesql, query, sizeof(query), "SELECT `Time` FROM applications WHERE `Name`='%s'", PlayerName(playerid));
			mysql_tquery(handlesql, query, "RefreshAppStatus", "i", playerid);
			SetPVarInt(playerid, "Delay", GetCount()+5000);
		}
		case 514: // Bare switch are you sure check.
		{
			if(!response) return 1;
			CallRemoteFunction("DoBareSwitch","i",playerid);
		}
		case 515:
		{
		    if(!response) {
				DeletePVar(playerid, "ABizEdit");
				return 1;
			}
		    new keyex = GetPVarInt(playerid, "ABizEdit");
		    if(keyex == 0) return 1;
			CallRemoteFunction("SetBizCP", "ii", playerid, keyex);
			DeletePVar(playerid, "ABizEdit");
		}
		case 516: //UCPRelated Change email
		{
			if(!response) {
				if(GetPVarInt(playerid,"UCPMode") == 1) {
					ShowPlayerDialog(playerid, 428, DIALOG_STYLE_INPUT,"[UCP] Choose your age","Age must be between 10 and 110.", "Continue", "Cancel");
					SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}For password recovery reasons, please set your email by going to: '/ucp -> Player Options -> Change email'.");
				}
				return 1;
			}
	        if(!strlen(inputtext) || strlen(inputtext) > 54)
	        {
			    SendClientMessage(playerid, COLOR_WHITE, "Email is too long (54 Chars max).");
				ShowPlayerDialog(playerid,516,DIALOG_STYLE_INPUT,"[UCP] Choose a new email","Enter your new email below","Continue", "Cancel");
				return 1;
			}
			new newemail[54],query[256];
			mysql_real_escape_string(inputtext, newemail);
			mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET `email`='%s' WHERE Name='%s'", newemail, PlayerName(playerid));
			mysql_tquery(handlesql, query);
			format(string, sizeof(string), "Your email has been successfully changed to: %s.", inputtext);
			SendClientMessage(playerid, COLOR_GREEN, string);
			SendClientMessageEx(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Please make sure the email you entered was valid, for password recovery purposes. If it wasn't you can change it by going to: '/ucp -> Player Options -> Change email' at any time.");
			if(GetPVarInt(playerid,"UCPMode") == 1) { ShowPlayerDialog(playerid, 428, DIALOG_STYLE_INPUT,"[UCP] Choose your age","Age must be between 10 and 110.", "Continue", "Cancel"); }
		}
		case 517:
		{
		    if(!response) {
				DeletePVar(playerid, "MapperRemove");
				return 1;
			}
			new text[24];
			GetPVarString(playerid, "MapperRemove", text, 24);
			RemoveMapObject(text);
			format(string, sizeof(string), "You've removed all of %s's mapping.", text);
			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
			DeletePVar(playerid, "MapperRemove");
		}
		case 518: // Map Furniture AGREEMENT Dialog
	    {
	        if(!response) return true;
			BuildMapObject(playerid, PlayerInfo[playerid][pFurnID], PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], PlayerInfo[playerid][pFurnR][0], PlayerInfo[playerid][pFurnR][1], PlayerInfo[playerid][pFurnR][2]);
	    }
	    case 519:
        {
            if(response)
            {
                new furnid = 0, furnitname[100];
                furnitname="N/A";
				for(new xe;xe<sizeof(FurnObjs);xe++)
                {
                    if(MapInfo[GetPVarInt(playerid, "FurnEditH")][mID] == FurnObjs[xe])
                    {
                        format(furnitname, 100, "%d", FurnObjs[xe]);
                        furnid=xe;
						break;
		            }
                }
                switch(listitem)
                {
                    case 0: // Edit Object
                    {
                        new obj = 0, h = GetPVarInt(playerid, "FurnEditH");
                        obj = CreatePlayerObject(playerid, MapInfo[h][mID], MapInfo[h][mX], MapInfo[h][mY], MapInfo[h][mZ], MapInfo[h][mrX], MapInfo[h][mrY], MapInfo[h][mrZ], 100.0);
                        SetPVarInt(playerid, "FurnObject", obj);
			            SetPVarInt(playerid, "EditorMode", 7);
			            PlayerInfo[playerid][pFurnID]=furnid;
						Streamer_Update(playerid);
			            EditPlayerObject(playerid, obj);
			            format(string, sizeof(string),"%s selected, use the SPRINT key to navigate.", furnitname);
			            SendClientMessage(playerid, COLOR_WHITE, string);
                    }
					case 1: // Input Position
					{
						if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						ShowPlayerDialog(playerid, 533, DIALOG_STYLE_LIST, "What axis do you want to edit?", "X-pos\nY-pos\nZ-pos\nX-rotation\nY-rotation\nZ-rotation", "Continue", "Close");
					}
					case 2: // Select Material
					{
					    if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						SendClientMessage(playerid,COLOR_LIGHTRED,"WARNING: Editing an invalid-layer MAY cause parts of the object to turn invisible, resetting the layers material will fix this.");
						SendClientMessage(playerid,COLOR_LIGHTBLUE,"When you choose a layer to edit, that layer becomes highlighted in red.");
						ShowPlayerDialog(playerid, 520, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12", "Select", "Close");
					}
					case 3: // Reset Material
					{
						if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
						new h = GetPVarInt(playerid, "FurnEditH");
						if(IsValidDynamicObject(MapInfo[h][mObject])) DestroyDynamicObject(MapInfo[h][mObject]);
						MapInfo[h][mObject] = CreateDynamicObject(MapInfo[h][mID], MapInfo[h][mX], MapInfo[h][mY], MapInfo[h][mZ], MapInfo[h][mrX], MapInfo[h][mrY], MapInfo[h][mrZ], MapInfo[h][mVW]);
						Streamer_Update(playerid);
						SendClientMessage(playerid,COLOR_LIGHTBLUE,"You've reset the selected objects material.");
						for(new v=0; v < 13; v++) {
							MapMInfo[h][v] = 0;
						}
						SaveMapObj(h);
					}
                    case 4: // Remove Object
                    {
                        if (GetPVarInt(playerid, "PlayerLogged") != 1) return true;
                        new h = GetPVarInt(playerid, "FurnEditH");
                        if(IsValidDynamicObject(MapInfo[h][mObject])) DestroyDynamicObject(MapInfo[h][mObject]);
			            MapInfo[h][mObject]=0;
			            MapInfo[h][mID]=0;
		    	        MapInfo[h][mX] = 0.0;
		                MapInfo[h][mY] = 0.0;
			            MapInfo[h][mZ] = 0.0;
			            MapInfo[h][mrX] = 0.0;
		                MapInfo[h][mrY] = 0.0;
			            MapInfo[h][mrZ] = 0.0;
		                MapInfo[h][mInt] = 0;
						MapInfo[h][mVW] = 0;
		                mysql_format(handlesql, string, sizeof(string), "DELETE FROM `mapfurn` WHERE `ID`=%d", MapInfo[h][mDBID]);
						mysql_tquery(handlesql, string);
                    }
                }
            }
        }
		case 520: //What layer do you want to change? Material-editing.
		{
			if(!response) return 1;
			SetPVarInt(playerid, "FurnEditL", listitem);
			new h = GetPVarInt(playerid, "FurnEditH");
			ChangeDynamicObjectMaterial(MapInfo[h][mObject], listitem, 30);
			new list[2048];
			for(new i=0; i < sizeof(MaterialIDs); i++)
			{
				format(list,2048,"%s\n%s",list,MaterialIDs[i][Name]);
			}
			ShowPlayerDialog(playerid, 521, DIALOG_STYLE_LIST, "Material List", list, "Select", "Back");
		}
		case 521: //Object Material List
		{
			new h = GetPVarInt(playerid, "FurnEditH");
			if(!response) {
				if(IsValidDynamicObject(MapInfo[h][mObject])) DestroyDynamicObject(MapInfo[h][mObject]);
				MapInfo[h][mObject] = CreateDynamicObject(MapInfo[h][mID], MapInfo[h][mX], MapInfo[h][mY], MapInfo[h][mZ], MapInfo[h][mrX], MapInfo[h][mrY], MapInfo[h][mrZ], MapInfo[h][mVW]);
				for( new v=0; v < 13; v++) {
					if(MapMInfo[h][v] != 0) {
						ChangeDynamicObjectMaterial(MapInfo[h][mObject], v, MapMInfo[h][v]);
					}
				}
				Streamer_Update(playerid);	
				DeletePVar(playerid,"FurnEditL");
				return ShowPlayerDialog(playerid, 520, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12", "Select", "Close");
			}
			if(listitem == 0) {
				MapMInfo[h][GetPVarInt(playerid,"FurnEditL")] = 0;
				if(IsValidDynamicObject(MapInfo[h][mObject])) DestroyDynamicObject(MapInfo[h][mObject]);
				MapInfo[h][mObject] = CreateDynamicObject(MapInfo[h][mID], MapInfo[h][mX], MapInfo[h][mY], MapInfo[h][mZ], MapInfo[h][mrX], MapInfo[h][mrY], MapInfo[h][mrZ], MapInfo[h][mVW]);
				for( new v=0; v < 13; v++) {
					if(MapMInfo[h][v] != 0) {
						ChangeDynamicObjectMaterial(MapInfo[h][mObject], v, MapMInfo[h][v]);
					}
				}
				Streamer_Update(playerid);
				SaveMapObj(h);
				format(string, sizeof(string), "Object %d's material layer %d reset to default.",MapInfo[h][mObject],GetPVarInt(playerid,"FurnEditL"));
				return SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			ChangeDynamicObjectMaterial(MapInfo[h][mObject], GetPVarInt(playerid,"FurnEditL"), listitem);
			MapMInfo[h][GetPVarInt(playerid,"FurnEditL")] = listitem;
			SaveMapObj(h);
			format(string, sizeof(string), "Object %d's material layer %d changed to: '%s'.",MapInfo[h][mObject],GetPVarInt(playerid,"FurnEditL"),MaterialIDs[listitem][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			DeletePVar(playerid,"FurnEditL");
		}
		case 522: //Map-Editor selection
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					new oblist[76], idx = 0;
					for(new i = 321; i < 398; i++)
					{
						oblist[idx] = i;
						idx++;
					}
					ShowModelSelectionMenuEx(playerid, oblist, sizeof(oblist), "Weapons (Map Objects)", 13, 16.0, 0.0, -55.0);
				}
				case 1:
				{
					new oblist[25], idx = 0;
					for(new i = 700; i < 726; i++)
					{
						oblist[idx] = i;
						idx++;
					}
					ShowModelSelectionMenuEx(playerid, oblist, sizeof(oblist), "Nature (Map Objects)", 13, 16.0, 0.0, -55.0);
				}
				case 2:
				{
					new oblist[20], idx = 0;
					for(new i = 1000; i < 1021; i++)
					{
						oblist[idx] = i;
						idx++;
					}
					ShowModelSelectionMenuEx(playerid, oblist, sizeof(oblist), "Car Parts (Map Objects)", 13, 16.0, 0.0, -55.0);
				}
				case 3:
				{
					new oblist[25] = {
						2918, 1433, 1484, 1486, 1518,
						1655, 1765, 1766, 1211, 1209,
						1227, 1222, 1225, 1340, 2222,
						2985, 2964, 3267, 3279, 3761,
						4563, 8493, 9900, 13592, 13594
					};
					ShowModelSelectionMenuEx(playerid, oblist, sizeof(oblist), "Fun Stuff (Map Objects)", 13, 16.0, 0.0, -55.0);
				}
				case 4:
				{
					new oblist[30], idx = 0;
					for(new i = 5482; i < 5513; i++)
					{
						oblist[idx] = i;
						idx++;
					}
					ShowModelSelectionMenuEx(playerid, oblist, sizeof(oblist), "Roads (Map Objects)", 13, 16.0, 0.0, -55.0);
				}
				case 5:
				{
					new oblist[33], idx = 0;
					for(new i = 966; i < 999; i++)
					{
						oblist[idx] = i;
						idx++;
					}
					ShowModelSelectionMenuEx(playerid, oblist, sizeof(oblist), "Barriers (Map Objects)", 13, 16.0, 0.0, -55.0);
				}
				case 6:
				{
					new oblist[65] = {
						1206, 1210, 1216, 1219,
						1223, 1341, 1342, 1378,
						1384, 1383, 1543, 1562,
						1572, 1608, 1609, 1612,
						1622, 1684, 3092, 2803,
						2589, 2590, 2804, 2805,
						2806, 16410, 12961, 12986,
						2896, 2905, 2906, 2907,
						2908, 2976, 3082, 3007,
						3008, 3009, 3010, 3011,
						3012, 3028, 3070, 3071,
						3072, 2627, 2628, 2629,
						2630, 3074, 3077, 3086,
						3085, 3087, 3088, 3108,
						3113, 3114, 3115, 2114,
						1318, 1318, 1317, 1316,
						1559
					};
					ShowModelSelectionMenuEx(playerid, oblist, sizeof(oblist), "Various (Map Objects)", 13, 16.0, 0.0, -55.0);
				}
				case 7:
				{
					new oblist[316], idx = 0;
					for(new i = 1210; i < 1326; i++)
					{
						oblist[idx] = i;
						idx++;
					}
					for(new i = 1420; i < 1621; i++)
					{
						oblist[idx] = i;
						idx++;
					}
					ShowModelSelectionMenuEx(playerid, oblist, sizeof(oblist), "Misc (Map Objects)", 13, 16.0, 0.0, -55.0);
				}
				case 8:
				{
					new oblist[sizeof(FurnObjs)];
					for(new i = 0; i < sizeof(FurnObjs); i++)
					{
						oblist[i] = FurnObjs[i];
					}
					ShowModelSelectionMenuEx(playerid, oblist, sizeof(FurnObjs), "Furniture List", 13, 16.0, 0.0, -55.0);
				}
			}
		}
		case 523: //House-sale dialog
		{
			if(!response) return 1;
			new uid = GetPVarInt(playerid, "HouseKey");
			if(!strmatch(HouseInfo[uid][hOwner], PlayerName(playerid))) return error(playerid, "You only rent this property.");
			GivePlayerMoneyEx(playerid, floatround(HouseInfo[uid][hBuyValue]*0.8));
			SetPVarInt(playerid, "HouseKey", 0);
			HouseInfo[uid][hOwned] = 0;
			format(HouseInfo[uid][hOwner], 25, "None");
			SCM(playerid, -1, "Property sold.");
			SaveHouse(uid);
			OnPlayerDataSave(playerid);
			RemoveHouseObject(uid);
		}
		case 524: // RLS station list
		{
			if(!response) return 1;
			SetPVarInt(playerid, "RLSStation", listitem);
			ShowPlayerDialog(playerid, 525, DIALOG_STYLE_LIST, RLSInfo[listitem][Name], "Edit Name\nEdit URL\nPlay Song", "Select", "Back");
		}
		case 525: // RLS station options
		{
			if(!response) {
				DeletePVar(playerid, "RLSStation");
				PopulateRLS(playerid);
				return 1;
			}
			switch(listitem)
			{
				case 0: //Edit name
				{
					ShowPlayerDialog(playerid, 526, DIALOG_STYLE_INPUT, "Song Name", "What should this songs name be displayed as?", "Enter", "Cancel");
				}
				case 1: //Edit URL
				{
					ShowPlayerDialog(playerid, 527, DIALOG_STYLE_INPUT, "Song URL", "What is the URL that plays this song? (direct-link)", "Enter", "Cancel");
				}
				case 2: //Play Song
				{
					if(strlen(RLSInfo[GetPVarInt(playerid, "RLSStation")][URL]) < 3) {
						DeletePVar(playerid, "RLSStation");
						PopulateRLS(playerid);
						return 1;
					}
					CallRemoteFunction("PlayRLSSong", "s", RLSInfo[GetPVarInt(playerid, "RLSStation")][URL]);
					format(string, sizeof(string), "You've changed the Radio Los Santos stream to %s.", RLSInfo[GetPVarInt(playerid, "RLSStation")][Name]);
					scm(playerid, COLOR_LIGHTBLUE, string);
					DeletePVar(playerid, "RLSStation");
				}
			}
		}
		case 526: //RLS Station Name
		{
			if(!response) {
				DeletePVar(playerid, "RLSStation");
				return 1;
			}
			if(strlen(inputtext) < 1 || strlen(inputtext) > 72) {
				error(playerid, "The songs name can only be between 1 and 72 characters long.");
				return ShowPlayerDialog(playerid, 526, DIALOG_STYLE_INPUT, "Song Name", "What should this song's name be displayed as?", "Enter", "Cancel");
			}
			format(RLSInfo[GetPVarInt(playerid, "RLSStation")][Name], 72, "%s", inputtext);
			format(string, sizeof(string), "You've changed the Name of stream %d to %s.", GetPVarInt(playerid, "RLSStation"), inputtext);
			scm(playerid, COLOR_LIGHTBLUE, string);
			DeletePVar(playerid, "RLSStation");
		}
		case 527: //RLS Station URL
		{
			if(!response) {
				DeletePVar(playerid, "RLSStation");
				return 1;
			}
			if(strlen(inputtext) < 1 || strlen(inputtext) > 128) {
				error(playerid, "The songs URL can only be between 1 and 128 characters long.");
				return ShowPlayerDialog(playerid, 527, DIALOG_STYLE_INPUT, "Song URL", "What is the URL that plays this song? (direct-link)", "Enter", "Cancel");
			}
			format(RLSInfo[GetPVarInt(playerid, "RLSStation")][URL], 129, "%s", inputtext);
			format(string, sizeof(string), "You've changed the URL for %s to %s.", RLSInfo[GetPVarInt(playerid, "RLSStation")][Name], inputtext);
			scm(playerid, COLOR_LIGHTBLUE, string);
			DeletePVar(playerid, "RLSStation");
		}
		case 528:
		{
			if(!response) {
				DeletePVar(playerid, "CurEditMdl");
				return 1;
			}
			new count = 0;
			for(new h = 0; h < MAX_MAP_OBJ; h++)
			{
				if(MapInfo[h][mObject] != 0)
				{
					if(MapInfo[h][mID] == GetPVarInt(playerid, "CurEditMdl"))
					{
						if(count >= listitem)
						{
							CallRemoteFunction("SelectMapObj", "ii", playerid, h);
							break;
						}
						count++;
					}
				}
			}
		}
		case 529:
		{
			if(!response) {
				DeletePVar(playerid, "CurEditMdl");
				return 1;
			}
			new keyex = FurnRight(playerid, 1), count = 0;
			for(new h = 0; h < MAX_HOUSE_OBJ; h++)
			{
				if(HouseInfo[keyex][hObject][h] != 0)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[keyex][hoX][h], HouseInfo[keyex][hoY][h], HouseInfo[keyex][hoZ][h]))
					{
						if(HouseInfo[keyex][hoID][h] == GetPVarInt(playerid, "CurEditMdl"))
						{
							if(count >= listitem)
							{
								CallRemoteFunction("SelectHouseObj", "iii", playerid, h, keyex);
								break;
							}
							count++;
						}
					}
				}
			}
		}
		case 530:
		{
			if(!response) {
				DeletePVar(playerid, "CurEditMdl");
				return 1;
			}
			new keyex = FurnRight(playerid, 2), count = 0;
			for(new h = 0; h < MAX_HOUSE_OBJ; h++)
			{
				if(BizInfo[keyex][bObject][h] != 0)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[keyex][boX][h], BizInfo[keyex][boY][h], BizInfo[keyex][boZ][h]))
					{
						if(BizInfo[keyex][boID][h] == GetPVarInt(playerid, "CurEditMdl"))
						{
							if(count >= listitem)
							{
								CallRemoteFunction("SelectBizzObj", "iii", playerid, h, keyex);
								break;
							}
							count++;
						}
					}
				}
			}
		}
		case 531: // select which version of the same model-obj w/ range
		{
			if(!response) {
				DeletePVar(playerid, "CurEditMdl");
				return 1;
			}
			new count = 0;
			for(new h = 0; h < MAX_MAP_OBJ; h++)
			{
				if(MapInfo[h][mObject] != 0)
				{
					if(MapInfo[h][mID] == GetPVarInt(playerid, "CurEditMdl"))
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.5, MapInfo[h][mX], MapInfo[h][mY], MapInfo[h][mZ]))
						{
							if(count >= listitem)
							{
								CallRemoteFunction("SelectMapObj", "ii", playerid, h);
								break;
							}
							count++;
						}
					}
				}
			}
		}
		case 532:
		{
			if(!response) {
				DeletePVar(playerid, "CurEditMdl");
				return 1;
			}
			new count = 0;
			for(new h = 0; h < MAX_MAP_OBJ; h++)
			{
				if(MapInfo[h][mObject] != 0)
				{
					if(MapInfo[h][mID] == GetPVarInt(playerid, "CurEditMdl"))
					{
						if(strmatch(MapInfo[h][mOwner], PlayerName(playerid)))
						{
							if(count >= listitem)
							{
								CallRemoteFunction("SelectMapObj", "ii", playerid, h);
								break;
							}
							count++;
						}
					}
				}
			}
		}
		case 533:
		{
			if(!response) return 1;
			new h = GetPVarInt(playerid, "FurnEditH");
			new Float:fX = MapInfo[h][mX], Float:fY = MapInfo[h][mY], Float:fZ = MapInfo[h][mZ];
			new Float:fRotX = MapInfo[h][mrX], Float:fRotY = MapInfo[h][mrY], Float:fRotZ = MapInfo[h][mrZ];
			SetPVarInt(playerid, "MapOEType", listitem);
			switch(listitem)
			{
				case 0: // X-pos
				{
					format(string, sizeof(string), "Editing X-position: %.3f", fX);
					ShowPlayerDialog(playerid, 534, DIALOG_STYLE_INPUT, "Editing X-position", string, "Enter", "Cancel");
				}
				case 1: // Y-pos
				{
					format(string, sizeof(string), "Editing Y-position: %.3f", fY);
					ShowPlayerDialog(playerid, 534, DIALOG_STYLE_INPUT, "Editing Y-position", string, "Enter", "Cancel");
				}
				case 2: // Z-pos
				{
					format(string, sizeof(string), "Editing Z-position: %.3f", fZ);
					ShowPlayerDialog(playerid, 534, DIALOG_STYLE_INPUT, "Editing Z-position", string, "Enter", "Cancel");
				}
				case 3: // X-rotation
				{
					format(string, sizeof(string), "Editing X-rotation: %.3f", fRotX);
					ShowPlayerDialog(playerid, 534, DIALOG_STYLE_INPUT, "Editing X-rotation", string, "Enter", "Cancel");
				}
				case 4: // Y-rotation
				{
					format(string, sizeof(string), "Editing Y-rotation: %.3f", fRotY);
					ShowPlayerDialog(playerid, 534, DIALOG_STYLE_INPUT, "Editing Y-rotation", string, "Enter", "Cancel");
				}
				case 5: // z-rotation
				{
					format(string, sizeof(string), "Editing Z-rotation: %.3f", fRotZ);
					ShowPlayerDialog(playerid, 534, DIALOG_STYLE_INPUT, "Editing Z-rotation", string, "Enter", "Cancel");
				}
			}
		}
		case 534:
		{
			if(!response) {
				DeletePVar(playerid, "MapOEType");
				return 1;
			}
			new h = GetPVarInt(playerid, "FurnEditH");
			new Float:fX = MapInfo[h][mX], Float:fY = MapInfo[h][mY], Float:fZ = MapInfo[h][mZ];
			new Float:fRotX = MapInfo[h][mrX], Float:fRotY = MapInfo[h][mrY], Float:fRotZ = MapInfo[h][mrZ];
			switch(GetPVarInt(playerid, "MapOEType"))
			{
				case 0: // X-pos
				{
					fX = floatstr(inputtext);
				}
				case 1: // Y-pos
				{
					fY = floatstr(inputtext);
				}
				case 2: // Z-pos
				{
					fZ = floatstr(inputtext);
				}
				case 3: // X-rotation
				{
					fRotX = floatstr(inputtext);
				}
				case 4: // Y-rotation
				{
					fRotY = floatstr(inputtext);
				}
				case 5: // z-rotation
				{
					fRotZ = floatstr(inputtext);
				}
			}
			MoveDynamicObject(MapInfo[h][mObject], fX, fY, fZ, 50.0, fRotX, fRotY, fRotZ);
			MapInfo[h][mX]=fX;
			MapInfo[h][mY]=fY;
			MapInfo[h][mZ]=fZ;
			MapInfo[h][mrX]=fRotX;
			MapInfo[h][mrY]=fRotY;
			MapInfo[h][mrZ]=fRotZ;
			SaveMapObj(h);
		}
		case 535:
		{
			if(!response) return 1;
			new fid = strval(inputtext);
			if(fid < 5 || fid == 8 || fid > MAX_FACTIONS) return error(playerid, "Invalid faction-id.");
			if(FactionInfo[fid][fUsed] == 0) return error(playerid, "Faction slot isn't in use!");
			SetPVarInt(playerid, "FacTD", fid);
			format(string, sizeof(string), "Are you sure you want to delete\n%s?\n----\nWARNING: This is irreversible.", FactionInfo[fid][fName]);
			ShowPlayerDialog(playerid, 536, DIALOG_STYLE_MSGBOX, "Delete a faction", string, "Yes", "No");
		}
		case 536:
		{
			if(!response) {
				DeletePVar(playerid, "FacTD");
				return 1;
			}
			if(GetPVarInt(playerid, "Admin") < 8) {
				DeletePVar(playerid, "FacTD");
				return 1;
			}
			new fid = GetPVarInt(playerid, "FacTD");
			printf("Faction %s(%d) removed by: %s.", FactionInfo[fid][fName], fid, PlayerName(playerid));
			DeleteFaction(fid);
			format(string, sizeof(string), "Faction %d removed!", fid);
			scm(playerid, COLOR_ORANGE, string);
			DeletePVar(playerid, "FacTD");
		}
		case 537:
		{
			if(!response) {
				DeletePVar(playerid, "CurEditMdl");
				return 1;
			}
			new keyex = FurnRight(playerid, 1), count = 0;
			for(new h = 0; h < MAX_HOUSE_OBJ; h++)
			{
				if(HouseInfo[keyex][hObject][h] != 0)
				{
					if(HouseInfo[keyex][hoID][h] == GetPVarInt(playerid, "CurEditMdl"))
					{
						if(count >= listitem)
						{
							CallRemoteFunction("SelectHouseObj", "iii", playerid, h, keyex);
							break;
						}
						count++;
					}
				}
			}
		}
		case 538:
		{
			if(!response) {
				DeletePVar(playerid, "CurEditMdl");
				return 1;
			}
			new keyex = FurnRight(playerid, 2), count = 0;
			for(new h = 0; h < MAX_HOUSE_OBJ; h++)
			{
				if(BizInfo[keyex][bObject][h] != 0)
				{
					if(BizInfo[keyex][boID][h] == GetPVarInt(playerid, "CurEditMdl"))
					{
						if(count >= listitem)
						{
							CallRemoteFunction("SelectBizzObj", "iii", playerid, h, keyex);
							break;
						}
						count++;
					}
				}
			}
		}
		case 539:
		{
			if(!response) return 1;
			new keyex = FurnRight(playerid, 1);
			if(keyex != GetPVarInt(playerid, "HouseEnter")) return 1;
			new h = GetPVarInt(playerid, "FurnEditH");
			new Float:fX = HouseInfo[keyex][hoX][h], Float:fY = HouseInfo[keyex][hoY][h], Float:fZ = HouseInfo[keyex][hoZ][h];
			new Float:fRotX = HouseInfo[keyex][horX][h], Float:fRotY = HouseInfo[keyex][horY][h], Float:fRotZ = HouseInfo[keyex][horZ][h];
			SetPVarInt(playerid, "MapOEType", listitem);
			switch(listitem)
			{
				case 0: // X-pos
				{
					format(string, sizeof(string), "Editing X-position: %.4f", fX);
					ShowPlayerDialog(playerid, 540, DIALOG_STYLE_INPUT, "Editing X-position", string, "Enter", "Cancel");
				}
				case 1: // Y-pos
				{
					format(string, sizeof(string), "Editing Y-position: %.4f", fY);
					ShowPlayerDialog(playerid, 540, DIALOG_STYLE_INPUT, "Editing Y-position", string, "Enter", "Cancel");
				}
				case 2: // Z-pos
				{
					format(string, sizeof(string), "Editing Z-position: %.4f", fZ);
					ShowPlayerDialog(playerid, 540, DIALOG_STYLE_INPUT, "Editing Z-position", string, "Enter", "Cancel");
				}
				case 3: // X-rotation
				{
					format(string, sizeof(string), "Editing X-rotation: %.4f", fRotX);
					ShowPlayerDialog(playerid, 540, DIALOG_STYLE_INPUT, "Editing X-rotation", string, "Enter", "Cancel");
				}
				case 4: // Y-rotation
				{
					format(string, sizeof(string), "Editing Y-rotation: %.4f", fRotY);
					ShowPlayerDialog(playerid, 540, DIALOG_STYLE_INPUT, "Editing Y-rotation", string, "Enter", "Cancel");
				}
				case 5: // z-rotation
				{
					format(string, sizeof(string), "Editing Z-rotation: %.4f", fRotZ);
					ShowPlayerDialog(playerid, 540, DIALOG_STYLE_INPUT, "Editing Z-rotation", string, "Enter", "Cancel");
				}
			}
		}
		case 540:
		{
			if(!response) {
				DeletePVar(playerid, "MapOEType");
				return 1;
			}
			new keyex = FurnRight(playerid, 1);
			if(keyex != GetPVarInt(playerid, "HouseEnter")) return 1;
			new h = GetPVarInt(playerid, "FurnEditH");
			new Float:fX = HouseInfo[keyex][hoX][h], Float:fY = HouseInfo[keyex][hoY][h], Float:fZ = HouseInfo[keyex][hoZ][h];
			new Float:fRotX = HouseInfo[keyex][horX][h], Float:fRotY = HouseInfo[keyex][horY][h], Float:fRotZ = HouseInfo[keyex][horZ][h];
			switch(GetPVarInt(playerid, "MapOEType"))
			{
				case 0: // X-pos
				{
					fX = floatstr(inputtext);
				}
				case 1: // Y-pos
				{
					fY = floatstr(inputtext);
				}
				case 2: // Z-pos
				{
					fZ = floatstr(inputtext);
				}
				case 3: // X-rotation
				{
					fRotX = floatstr(inputtext);
				}
				case 4: // Y-rotation
				{
					fRotY = floatstr(inputtext);
				}
				case 5: // z-rotation
				{
					fRotZ = floatstr(inputtext);
				}
			}
			MoveDynamicObject(HouseInfo[keyex][hObject][h], fX, fY, fZ, 50.0, fRotX, fRotY, fRotZ);
			HouseInfo[keyex][hoX][h]=fX;
			HouseInfo[keyex][hoY][h]=fY;
			HouseInfo[keyex][hoZ][h]=fZ;
			HouseInfo[keyex][horX][h]=fRotX;
			HouseInfo[keyex][horY][h]=fRotY;
			HouseInfo[keyex][horZ][h]=fRotZ;
			SaveFurnObj(keyex, h);
		}
		case 541:
		{
			if(!response) return 1;
			new keyex = FurnRight(playerid, 2);
			if(keyex != GetPVarInt(playerid, "BizzEnter")) return 1;
			new h = GetPVarInt(playerid, "FurnEditH");
			new Float:fX = BizInfo[keyex][boX][h], Float:fY = BizInfo[keyex][boY][h], Float:fZ = BizInfo[keyex][boZ][h];
			new Float:fRotX = BizInfo[keyex][borX][h], Float:fRotY = BizInfo[keyex][borY][h], Float:fRotZ = BizInfo[keyex][borZ][h];
			SetPVarInt(playerid, "MapOEType", listitem);
			switch(listitem)
			{
				case 0: // X-pos
				{
					format(string, sizeof(string), "Editing X-position: %.4f", fX);
					ShowPlayerDialog(playerid, 542, DIALOG_STYLE_INPUT, "Editing X-position", string, "Enter", "Cancel");
				}
				case 1: // Y-pos
				{
					format(string, sizeof(string), "Editing Y-position: %.4f", fY);
					ShowPlayerDialog(playerid, 542, DIALOG_STYLE_INPUT, "Editing Y-position", string, "Enter", "Cancel");
				}
				case 2: // Z-pos
				{
					format(string, sizeof(string), "Editing Z-position: %.4f", fZ);
					ShowPlayerDialog(playerid, 542, DIALOG_STYLE_INPUT, "Editing Z-position", string, "Enter", "Cancel");
				}
				case 3: // X-rotation
				{
					format(string, sizeof(string), "Editing X-rotation: %.4f", fRotX);
					ShowPlayerDialog(playerid, 542, DIALOG_STYLE_INPUT, "Editing X-rotation", string, "Enter", "Cancel");
				}
				case 4: // Y-rotation
				{
					format(string, sizeof(string), "Editing Y-rotation: %.4f", fRotY);
					ShowPlayerDialog(playerid, 542, DIALOG_STYLE_INPUT, "Editing Y-rotation", string, "Enter", "Cancel");
				}
				case 5: // z-rotation
				{
					format(string, sizeof(string), "Editing Z-rotation: %.4f", fRotZ);
					ShowPlayerDialog(playerid, 542, DIALOG_STYLE_INPUT, "Editing Z-rotation", string, "Enter", "Cancel");
				}
			}
		}
		case 542:
		{
			if(!response) {
				DeletePVar(playerid, "MapOEType");
				return 1;
			}
			new keyex = FurnRight(playerid, 2);
			if(keyex != GetPVarInt(playerid, "BizzEnter")) return 1;
			new h = GetPVarInt(playerid, "FurnEditH");
			new Float:fX = BizInfo[keyex][boX][h], Float:fY = BizInfo[keyex][boY][h], Float:fZ = BizInfo[keyex][boZ][h];
			new Float:fRotX = BizInfo[keyex][borX][h], Float:fRotY = BizInfo[keyex][borY][h], Float:fRotZ = BizInfo[keyex][borZ][h];
			switch(GetPVarInt(playerid, "MapOEType"))
			{
				case 0: // X-pos
				{
					fX = floatstr(inputtext);
				}
				case 1: // Y-pos
				{
					fY = floatstr(inputtext);
				}
				case 2: // Z-pos
				{
					fZ = floatstr(inputtext);
				}
				case 3: // X-rotation
				{
					fRotX = floatstr(inputtext);
				}
				case 4: // Y-rotation
				{
					fRotY = floatstr(inputtext);
				}
				case 5: // z-rotation
				{
					fRotZ = floatstr(inputtext);
				}
			}
			MoveDynamicObject(BizInfo[keyex][bObject][h], fX, fY, fZ, 50.0, fRotX, fRotY, fRotZ);
			BizInfo[keyex][boX][h]=fX;
			BizInfo[keyex][boY][h]=fY;
			BizInfo[keyex][boZ][h]=fZ;
			BizInfo[keyex][borX][h]=fRotX;
			BizInfo[keyex][borY][h]=fRotY;
			BizInfo[keyex][borZ][h]=fRotZ;
			SaveBizzObj(keyex, h);
		}
		case 543: // Dealership menu
		{
		    if(!response) return true;
		    switch(listitem)
		    {
		        case 0:
		        {
		            new query[75];
		            mysql_format(handlesql, query, sizeof(query), "SELECT NULL FROM `vehicles` WHERE `Owner` = '%e';", PlayerInfo[playerid][pUsername]);
		            mysql_tquery(handlesql, query, "OnPlayerEntersDealership", "i", playerid);
		        }
		        case 1:
		        {
					if(CountSpawnedCars(playerid) > 1) return SendClientMessage(playerid, COLOR_GREY, "You can't upgrade vehicles while you have more than 1 spawned.");
		            new keyex = IsPlayerVehicleSpawned(playerid);
            		if(keyex == -1) return SendClientMessage(playerid, COLOR_GREY, "You do not have a vehicle spawned.");
   	                if (OwnableVehicle(keyex))
   	                {
				        if(IsNotAEngineCar(keyex)) return true;
				        format(string, sizeof(string), "Vehicle Upgrades (%s)", VehicleName[GetVehicleModel(keyex)-400]);
				        ShowPlayerDialog(playerid, 544, DIALOG_STYLE_LIST, string, "Insurance\nLock\nAlarm", "Select", "Close");
			        }
				}
		    }
		}
		case 544: // Vehicle Upgrades
		{
		    if(!response) return true;
		    new strie[1024];
		    switch(listitem)
		    {
		        case 0: // Insurance
		        {
                    strcat(strie, "{3366FF}Enter the insurance level you wish to purchase:");
                    strcat(strie, "\n\n{3366FF}Insurance will cost {FFFFFF}($150) {3366FF}each payday, failure to pay will result in penalty charges.");
                    strcat(strie, "\n\n{3366FF}Level {FFFFFF}1: {3366FF}Insurance will cover the damages when a vehicle is destroyed, ($1500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}2: {3366FF}Insurance will cover any scratches etc on the vehicle when spawned +lvl 1, ($2500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}3: {3366FF}Insurance will spawn your vehicle at full health after despawning with low hp +lvl 1-2, ($5000 to purchase).");
                    strcat(strie, "\n\n{FFFFFF}Insert '0' to remove this perk.");
		            ShowPlayerDialog(playerid, 545, DIALOG_STYLE_INPUT, "Vehicle Insurance", strie, "Purchase","Close");
		        }
		        case 1: // Lock
		        {
		            strcat(strie, "{3366FF}Enter the lock level you wish to purchase:");
                    strcat(strie, "\n\n{3366FF}Level {FFFFFF}1: {3366FF}Extended time when attempting to breakin the vehicle, ($875 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}2: {3366FF}Extra extended time when attempt to break into vehicle + breakin success more difficult, ($1500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}3: {3366FF}Superior extended time when attempt to break into vehicle {FFFFFF}+lvl 2{3366FF}, ($2000 to purchase).");
                    strcat(strie, "\n\n{FFFFFF}Insert '0' to remove this perk.");
		            ShowPlayerDialog(playerid, 546, DIALOG_STYLE_INPUT, "Vehicle Lock", strie, "Purchase","Close");
		        }
		        case 2: // Alarm
		        {
		            strcat(strie, "{3366FF}Enter the alarm level you wish to purchase:");
                    strcat(strie, "\n\n{3366FF}Level {FFFFFF}1: {3366FF}When someone successfully breaks into your vehicle the alarm will ring, ($950 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}2: {3366FF}Any attempts to break into your vehicle and the alarm will ring {FFFFFF}+lvl 1{3366FF}, ($1500 to purchase).");
                    strcat(strie, "\n{3366FF}Level {FFFFFF}3: {3366FF}Any theft or control attempts to your vehicle and the alarm will ring {FFFFFF}+lvl 1-2{3366FF}, ($3000 to purchase).");
                    strcat(strie, "\n\n{FFFFFF}Insert '0' to remove this perk.");
		            ShowPlayerDialog(playerid, 547, DIALOG_STYLE_INPUT, "Vehicle Alarm", strie, "Purchase","Close");
		        }
		    }
		}
		case 545: // Insurance Purchase
		{
		    if(!response) return true;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext), priceex;
	        if(amount < 0) return true;
	        if(amount >= 4) return true;
	        switch(amount)
			{
			    case 1: priceex=1500;
			    case 2: priceex=2500;
			    case 3: priceex=5000;
			}
			
			if(CountSpawnedCars(playerid) > 1) return SendClientMessage(playerid, COLOR_GREY, "You can't upgrade vehicles while you have more than 1 spawned.");
            new keyex = IsPlayerVehicleSpawned(playerid);
            if(keyex == -1) return SendClientMessage(playerid, COLOR_GREY, "You do not have a vehicle spawned.");
   	        if(VehicleInfo[keyex][vInsurance] == amount) return SendClientMessage(playerid, COLOR_WHITE, "You already have this insurance level!");
   	        if(amount == 0)
	        {
	            if(GetPVarInt(playerid, "UpgDelay") > 0) {
	            format(string, sizeof(string), "You must wait %d minutes before removing a upgrade!", GetPVarInt(playerid, "UpgDelay"));
	            scm(playerid, COLOR_LIGHTRED, string);
	            } else {
	                scm(playerid, -1, "Upgrade removed!");
	                VehicleInfo[keyex][vInsurance]=0;
				}
			    return 1;
	        }
   	        if(VehicleInfo[keyex][vInsurance] >= 3) return SendClientMessage(playerid, COLOR_WHITE, "You have exceeded the insurance amount!");
   	        if (OwnableVehicle(keyex))
   	        {
			    if(IsNotAEngineCar(keyex)) return true;
			    if(GetPlayerMoneyEx(playerid) >= priceex)
			    {
			        GivePlayerMoneyEx(playerid, -priceex);
			        format(string, sizeof(string),"~r~-$%d", priceex);
          		    GameTextForPlayer(playerid, string, 5000, 1);
          		    format(string, sizeof(string),"{3366FF}(%s UPGRADE): {FFFFFF}Congratulations on your level %d insurance for $%d!", VehicleName[GetVehicleModel(keyex)-400], amount, priceex);
          		    SCM(playerid, -1, string);
          		    VehicleInfo[keyex][vInsurance]=amount;
          		    SetPVarInt(playerid, "UpgDelay", 60);
			    }
			    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		    }
		}
		case 546: // Lock Purchase
		{
		    if(!response) return true;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext), priceex;
	        if(amount < 0) return true;
	        if(amount >= 4) return true;
	        switch(amount)
			{
			    case 1: priceex=875;
			    case 2: priceex=1500;
			    case 3: priceex=2000;
			}
			
			if(CountSpawnedCars(playerid) > 1) return SendClientMessage(playerid, COLOR_GREY, "You can't upgrade vehicles while you have more than 1 spawned.");
			new keyex = IsPlayerVehicleSpawned(playerid);
            if(keyex == -1) return SendClientMessage(playerid, COLOR_GREY, "You do not have a vehicle spawned.");
   	        if(VehicleInfo[keyex][vLockLvl] == amount) return SendClientMessage(playerid, COLOR_WHITE, "You already have this lock level!");
   	        if(amount == 0)
	        {
	            if(GetPVarInt(playerid, "UpgDelay") > 0) {
	            format(string, sizeof(string), "You must wait %d minutes before removing a upgrade!", GetPVarInt(playerid, "UpgDelay"));
	            scm(playerid, COLOR_LIGHTRED, string);
	            } else {
	                scm(playerid, -1, "Upgrade removed!");
	                VehicleInfo[keyex][vLockLvl]=0;
				} return 1;
	        }
   	        if(VehicleInfo[keyex][vLockLvl] >= 3) return SendClientMessage(playerid, COLOR_WHITE, "You have exceeded the lock level amount!");
   	        if (OwnableVehicle(keyex))
   	        {
			    if(IsNotAEngineCar(keyex)) return true;
			    if(GetPlayerMoneyEx(playerid) >= priceex)
			    {
			        GivePlayerMoneyEx(playerid, -priceex);
			        format(string, sizeof(string),"~r~-$%d", priceex);
          		    GameTextForPlayer(playerid, string, 5000, 1);
          		    format(string, sizeof(string),"{3366FF}(%s UPGRADE): {FFFFFF}Congratulations on your level %d lock for $%d!", VehicleName[GetVehicleModel(keyex)-400], amount, priceex);
          		    SCM(playerid, -1, string);
          		    VehicleInfo[keyex][vLockLvl]=amount;
          		    SetPVarInt(playerid, "UpgDelay", 60);
			    }
			    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		    }
		}
		case 547: // Alarm Purchase
		{
		    if(!response) return true;
		    if(!strlen(inputtext)) return true;
	        if(strlen(inputtext) >= 7) return true;
	        new amount = strval(inputtext), priceex;
	        if(amount < 0) return true;
	        if(amount >= 4) return true;
	        switch(amount)
			{
			    case 1: priceex=950;
			    case 2: priceex=1500;
			    case 3: priceex=3000;
			}
			
			if(CountSpawnedCars(playerid) > 1) return SendClientMessage(playerid, COLOR_GREY, "You can't upgrade vehicles while you have more than 1 spawned.");
			new keyex = IsPlayerVehicleSpawned(playerid);
            if(keyex == -1) return SendClientMessage(playerid, COLOR_GREY, "You do not have a vehicle spawned.");
   	        if(VehicleInfo[keyex][vAlarmLvl] == amount) return SendClientMessage(playerid, COLOR_WHITE, "You already have this alarm level!");
   	        if(amount == 0)
	        {
	            if(GetPVarInt(playerid, "UpgDelay") > 0) {
	            format(string, sizeof(string), "You must wait %d minutes before removing a upgrade!", GetPVarInt(playerid, "UpgDelay"));
	            scm(playerid, COLOR_LIGHTRED, string);
	            } else {
	                scm(playerid, -1, "Upgrade removed!");
	                VehicleInfo[keyex][vAlarmLvl]=amount;
				} return 1;
	        }
   	        if(VehicleInfo[keyex][vAlarmLvl] >= 3) return SendClientMessage(playerid, COLOR_WHITE, "You have exceeded the alarm amount!");
   	        if (OwnableVehicle(keyex))
   	        {
			    if(IsNotAEngineCar(keyex)) return true;
			    if(GetPlayerMoneyEx(playerid) >= priceex)
			    {
			        GivePlayerMoneyEx(playerid, -priceex);
			        format(string, sizeof(string),"~r~-$%d", priceex);
          		    GameTextForPlayer(playerid, string, 5000, 1);
          		    format(string, sizeof(string),"{3366FF}(%s UPGRADE): {FFFFFF}Congratulations on your level %d alarm for $%d!", VehicleName[GetVehicleModel(keyex)-400], amount, priceex);
          		    SCM(playerid, -1, string);
          		    VehicleInfo[keyex][vAlarmLvl]=amount;
          		    SetPVarInt(playerid, "UpgDelay", 60);
			    }
			    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		    }
		}
		case 548: // Drop keys
		{
			if(!response) return 1;
			if(CarKeys[playerid][listitem] != 0) {
				new query[128];
				mysql_format(handlesql, query, 128, "SELECT `Owner`,`Model` FROM `vehicles` WHERE `ID`=%d", CarKeys[playerid][listitem]);
				mysql_tquery(handlesql, query, "OnViewKey", "ii", playerid, listitem);
			} else {
				scm(playerid, COLOR_RED, "You don't have a key in that slot.");
				ShowCarKeys(playerid);
			}
		}
		case 549: // OnViewKey dialog
		{
			if(!response) {
				DeletePVar(playerid, "ViewKeyID");
				return ShowCarKeys(playerid);
			}
			TakeCarKeyEx(playerid, GetPVarInt(playerid, "ViewKeyID")); 
			DeletePVar(playerid, "ViewKeyID");
		}
		case 550: // Lend car-key to
		{
			if(!response) {
				DeletePVar(playerid, "LendKeysTo");
				return 1;
			}
			if(!IsPlayerConnected(GetPVarInt(playerid, "LendKeysTo"))) {
				DeletePVar(playerid, "LendKeysTo");
				scm(playerid, COLOR_ORANGE, "The player you're trying to lend your car-key to isn't online.");
				return 1;
			}
			new query[112];
			mysql_format(handlesql, query, sizeof(query), "SELECT `ID`, `Model` FROM `vehicles` WHERE `Owner` = '%e' LIMIT %i, %i;", PlayerInfo[playerid][pUsername], listitem, listitem + 1);
			mysql_tquery(handlesql, query, "LendCarKeys", "ii", playerid, GetPVarInt(playerid, "LendKeysTo"));
		}
		case 551: // Take car-key from
		{
			if(!response) {
				DeletePVar(playerid, "TakeKeysFrom");
				return 1;
			}
			if(!IsPlayerConnected(GetPVarInt(playerid, "TakeKeysFrom"))) {
				DeletePVar(playerid, "TakeKeysFrom");
				scm(playerid, COLOR_ORANGE, "The player you're trying to take your car-key from isn't online.");
				return 1;
			}
			new query[112];
			mysql_format(handlesql, query, sizeof(query), "SELECT `ID`, `Model` FROM `vehicles` WHERE `Owner` = '%e' LIMIT %i, %i;", PlayerInfo[playerid][pUsername], listitem, listitem + 1);
			mysql_tquery(handlesql, query, "TakeCarKeys", "ii", playerid, GetPVarInt(playerid, "TakeKeysFrom"));
		}
		case 552: // Payphone options dialog
		{
			if(!response) {
				cancelPayphone(playerid);
				return 1;
			}			
			switch(listitem)
			{
				case 0: //Call number
				{
					ShowPlayerDialog(playerid, 39, DIALOG_STYLE_INPUT, "Calling", "Enter the number you would like to call.", "Call", "Go Back");
				}
				case 1: //Services
				{
					ShowPlayerDialog(playerid, 553, DIALOG_STYLE_LIST, "Services", "Emergecy\nTaxi\nMechanic", "Okay", "Exit");
				}
			}
		}
		case 553: // Payphone services dialog
		{
			if(!response) {
				ShowPlayerDialog(playerid, 552, DIALOG_STYLE_LIST, phoneInfo[GetPVarInt(playerid,"usingPayphone")][phoneName], "Call number\nServices", "Okay", "Exit");
				return 1;
			}			
			switch(listitem)
			{
				case 0: //Emergecy
				{
					CallNumber(playerid, "911");
				}
				case 1: //Taxi
				{
					CallNumber(playerid, "411");
				}
				case 2: //Mechanic
				{
					CallNumber(playerid, "311");
				}
			}
		}
		case 554: // Crafting menu
		{
			if(!response) return 1;
			new strung[172];
			format(strung, 172, "Name: {33FF66}%s.\n{FFFFFF}Level: {33FF66}%d/%d.\n{FFFFFF}Cost: {33FF66}%d/%d materials.", CraftWeps[listitem][wName], PlayerInfo[playerid][pCraft], CraftWeps[listitem][wLvl], PlayerInfo[playerid][pMaterials], CraftWeps[listitem][wCost]);
			ShowPlayerDialog(playerid, 555, DIALOG_STYLE_MSGBOX, "Are you sure you want to craft this?", strung, "Craft", "Close");
			SetPVarInt(playerid, "CraftID", listitem);
		}
		case 555: // Crafting confirm
		{
			if(!response) {
				DeletePVar(playerid, "CraftID");
				return 1;
			}
			if(PlayerInfo[playerid][pMaterials] < CraftWeps[GetPVarInt(playerid, "CraftID")][wCost]) return SCM(playerid, COLOR_ORANGE, "You don't have enough materials for this!");
			ProgressBar(playerid, "Crafting item...", 10, 3);
			AddPlayerTag(playerid, "(crafting item)");
			scm(playerid, COLOR_ORANGE, "Don't forget to roleplay your crafting.");
		}
		case 556: //Vehicle glovebox
		{
			if(!IsPlayerInAnyVehicle(playerid)) return 1;
			new kez = GetPlayerVehicleID(playerid);
		    if(VehicleInfo[kez][vType] != VEHICLE_PERSONAL) return 1;
			if(IsHelmetCar(kez)) return 1;
 			if(kez == -1) return 1;
			new stri2[100];
			if(response)
			{
				if(CheckInv(playerid) == 0) return error(playerid, "Your inventory is full.");
				if(DisabledWeapon(GetPVarInt(playerid, "ConnectTime"), VehicleInfo[kez][vGBID][listitem])) return error(playerid, "You need 8 hours played to use take this.");
				if(VehicleInfo[kez][vGBID][listitem] == 0) return error(playerid, "Slot is empty.");
				if(VehicleInfo[kez][vGBID][listitem] <= 800 || VehicleInfo[kez][vGBID][listitem] >= 1002) {
				GiveInvItem(playerid, VehicleInfo[kez][vGBID][listitem], VehicleInfo[kez][vGBQ][listitem], VehicleInfo[kez][vGBE][listitem], VehicleInfo[kez][vGBS][listitem]); }
				format(stri2, sizeof(stri2), "You took a (%s) from your vehicles glovebox.", PrintIName(VehicleInfo[kez][vGBID][listitem]));
				scm(playerid, -1, stri2);
				format(stri2, sizeof(stri2), "takes a %s from the vehicles glovebox.", PrintIName(VehicleInfo[kez][vGBID][listitem]));
				ForceAME(playerid, stri2);
				VehicleInfo[kez][vGBID][listitem] = 0;
				VehicleInfo[kez][vGBQ][listitem] = 0;
				VehicleInfo[kez][vGBE][listitem] = 0;
				VehicleInfo[kez][vGBS][listitem] = 0;
				mysql_format(handlesql, string, sizeof(string), "UPDATE `vehicles` SET `GBID%d` = %i, `GBQ%d` = %i, `GBE%d` = %i WHERE `ID` = %i;",
				listitem, VehicleInfo[kez][vGBID][listitem], listitem, VehicleInfo[kez][vGBQ][listitem], listitem, VehicleInfo[kez][vGBE][listitem], listitem, VehicleInfo[kez][vID]);
				mysql_tquery(handlesql, string);
			}
		}
		case 557: // Delete vehicle
		{
		    if(response) {
				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You have to be in your vehicle in order to delete it.");
                new vehicleID = GetPlayerVehicleID(playerid);
            	if(!PlayerOwnsVehicle(playerid, vehicleID)) return SendClientMessage(playerid, COLOR_GREY, "You don't own this vehicle.");
				if(VehicleInfo[vehicleID][vDonate] == 0) return SendClientMessage(playerid, COLOR_GREY, "You can only delete donor vehicles, use (/v sell) instead.");
				SendClientMessage(playerid, COLOR_WHITE, "Vehicle deleted.");
				mysql_format(handlesql, string, sizeof(string), "DELETE FROM `vehicles` WHERE `ID` = %i;", VehicleInfo[vehicleID][vID]);
				mysql_tquery(handlesql, string);
				mysql_format(handlesql, string, sizeof(string), "DELETE FROM `vehiclefurn` WHERE VID=%i;", VehicleInfo[vehicleID][vID]);
				mysql_tquery(handlesql, string);						
				DespawnVehicle(vehicleID);
			}		
		}
		case 558:
		{
			if(!response) return 1;

			new houseid = GetPVarInt(playerid, "HouseKey");

			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You have to be on foot in order to do this.");
	  		if(!IsPlayerInRangeOfPoint(playerid, HOUSE_GARAGE_DISTANCE, HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo])) return SendClientMessage(playerid, COLOR_GREY, "You are too far away from your house entrance.");
	  		if(GetPlayerMoneyEx(playerid) < GARAGE_ENTRANCE_COST) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");

	  		// CallRemoteFunction("GivePlayerMoneyEx","ii", playerid, -GARAGE_ENTRANCE_COST);
	  		
	  		GivePlayerMoneyEx(playerid, -GARAGE_ENTRANCE_COST);

			new Float:x, Float:y, Float:z, Float:a;

			new string3[32];
			format(string3, sizeof(string3),"~r~-%s", FormatMoney(GARAGE_ENTRANCE_COST));
          	GameTextForPlayer(playerid, string3, 5000, 1);

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, a);

	  		if(HouseInfo[houseid][gIcon] != 0) DestroyDynamicCP(HouseInfo[houseid][gIcon]);
	  		HouseInfo[houseid][gIcon] = CreateDynamicCP(x, y, z, 3.0, 0, -1, -1, 3.0);
	  		HouseInfo[houseid][hgXo] = x;
			HouseInfo[houseid][hgYo] = y;
	        HouseInfo[houseid][hgZo] = z;
	        HouseInfo[houseid][hgAo] = a;
	        HouseInfo[houseid][gInterior] = 1;

	        if(HouseInfo[houseid][Garage] == 0)
	        {
	        	if(HouseInfo[houseid][hClass] == 2)
		        {
		        	HouseInfo[houseid][hgXi] = 286.7440;
					HouseInfo[houseid][hgYi] = 1080.8870;
			        HouseInfo[houseid][hgZi] = 1185.0172;
			        HouseInfo[houseid][hgAi] = 177.6385;
		        }
		        else
		        {
		        	HouseInfo[houseid][hgXi] = 603.3348;
					HouseInfo[houseid][hgYi] = 1829.4977;
			        HouseInfo[houseid][hgZi] = 1586.4860;
			        HouseInfo[houseid][hgAi] = 88.7960;
		        }
	        }

	        HouseInfo[houseid][Garage] = 1;

	        SendClientMessage(playerid, COLOR_WHITE, "Garage entrance has been set!");

	        SaveHouse(houseid);
		}
		case 559:
		{
			if(!response) return 1;

			if(GetPlayerMoneyEx(playerid) < GARAGE_EXIT_COST) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");

			// CallRemoteFunction("GivePlayerMoneyEx","ii", playerid, -GARAGE_EXIT_COST);
			
			GivePlayerMoneyEx(playerid, -GARAGE_EXIT_COST);

			new string3[32];
			format(string3, sizeof(string3),"~r~-%s", FormatMoney(GARAGE_EXIT_COST));
          	GameTextForPlayer(playerid, string3, 5000, 1);

			new houseid = GetPVarInt(playerid, "HouseKey");

			new Float:x, Float:y, Float:z, Float:a;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, a);

	        HouseInfo[houseid][gInterior] = GetPlayerInterior(playerid);
	        HouseInfo[houseid][hgXi] = x;
			HouseInfo[houseid][hgYi] = y;
	        HouseInfo[houseid][hgZi] = z;
	        HouseInfo[houseid][hgAi] = a;
			if(IsValidDynamicPickup(HouseInfo[houseid][gExit])) DestroyDynamicPickup(HouseInfo[houseid][gExit]);
			HouseInfo[houseid][gExit] = CreateDynamicPickup(1318, 1, HouseInfo[houseid][hgXi], HouseInfo[houseid][hgYi], HouseInfo[houseid][hgZi], houseid, HouseInfo[houseid][hIntIn]);

	        SendClientMessage(playerid, COLOR_WHITE, "Garage exit has been set!");

	        SaveHouse(houseid);
		}
		case 560:
		{
			if(!response) return 1;

			if(GetPlayerMoneyEx(playerid) < GARAGE_BARESWITCH_COST) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to do this.");

			new houseid = GetPVarInt(playerid, "HouseKey");

			if(GetPVarInt(playerid, "GarageEnter") != GetPVarInt(playerid, "HouseKey") && !IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[houseid][hgXo], HouseInfo[houseid][hgYo], HouseInfo[houseid][hgZo])) return SendClientMessage(playerid, COLOR_GREY, "You are not near your garage.");

			// CallRemoteFunction("GivePlayerMoneyEx","ii", playerid, -GARAGE_BARESWITCH_COST);
			
			GivePlayerMoneyEx(playerid, -GARAGE_BARESWITCH_COST);

			new string3[32];
			format(string3, sizeof(string3),"~r~-%s", FormatMoney(GARAGE_BARESWITCH_COST));
          	GameTextForPlayer(playerid, string3, 5000, 1);

			if(GetPVarInt(playerid, "GarageEnter") != 0)
	  		{
	  			HouseInfo[houseid][gInterior] = 1;
		        HouseInfo[houseid][hgXi] = 1402.7845;
				HouseInfo[houseid][hgYi] = 1.9748;
		        HouseInfo[houseid][hgZi] = 1000.9152;
		        HouseInfo[houseid][hgAi] = 182.1760;

		        SaveHouse(houseid);

		        SendClientMessage(playerid, COLOR_WHITE, "Garage has been reset!");

		        SetPlayerPosEx(playerid, HouseInfo[houseid][hgXi], HouseInfo[houseid][hgYi], HouseInfo[houseid][hgZi]);
		        SetPlayerInterior(playerid, HouseInfo[houseid][gInterior]);
	  		}
	  		else
	  		{
	  			HouseInfo[houseid][gInterior] = 1;
		        HouseInfo[houseid][hgXi] = 1402.7845;
				HouseInfo[houseid][hgYi] = 1.9748;
		        HouseInfo[houseid][hgZi] = 1000.9152;
		        HouseInfo[houseid][hgAi] = 182.1760;

		        SaveHouse(houseid);

		        SendClientMessage(playerid, COLOR_WHITE, "Garage has been reset!");
	  		}
		}
		case 561:
		{
			if(!response) return 1;

			new houseid = GetPVarInt(playerid, "HouseKey");

			if(HouseInfo[houseid][Garage] == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have a garage to remove.");

			HouseInfo[houseid][Garage] = 0;
			HouseInfo[houseid][gInterior] = 0;
	        HouseInfo[houseid][hgXi] = 0;
			HouseInfo[houseid][hgYi] = 0;
	        HouseInfo[houseid][hgZi] = 0;
	        HouseInfo[houseid][hgAi] = 0;
	        HouseInfo[houseid][hgXo] = 0;
			HouseInfo[houseid][hgYo] = 0;
	        HouseInfo[houseid][hgZo] = 0;
	        HouseInfo[houseid][hgAo] = 0;

	        if(HouseInfo[houseid][gIcon] != 0) DestroyDynamicCP(HouseInfo[houseid][gIcon]);

	        SaveHouse(houseid);

	        SendClientMessage(playerid, COLOR_WHITE, "Garage has been removed!");
		}
  		case 562:
  		{
  			if(response)
  			{
  				if(CheckInv(playerid) == 0)
  				{
  					SetPVarInt(playerid, "Dividing", 0);
					SetPVarInt(playerid, "DividingChose", 0);
  					return SendClientMessage(playerid, COLOR_GREY, "Your inventory is full.");
  				}

  				if(!IsNumeric(inputtext))
  				{
  					SetPVarInt(playerid, "Dividing", 0);
					SetPVarInt(playerid, "DividingChose", 0);
					return SendClientMessage(playerid, COLOR_GREY, "Invalid value.");
  				}
  				
  				if(strval(inputtext) <= 0 || strval(inputtext) >= PlayerInfo[playerid][pInvQ][GetPVarInt(playerid, "DividingChose")])
  				{
  					SetPVarInt(playerid, "Dividing", 0);
					SetPVarInt(playerid, "DividingChose", 0);
  					return SendClientMessage(playerid, COLOR_GREY, "Invalid value.");
  				}

  				PlayerInfo[playerid][pInvQ][GetPVarInt(playerid, "DividingChose")] -= strval(inputtext);
  				GiveInvItem(playerid, PlayerInfo[playerid][pInvItem][GetPVarInt(playerid, "DividingChose")], strval(inputtext), 0);

  				SetPVarInt(playerid, "Dividing", 0);
				SetPVarInt(playerid, "DividingChose", 0);

  				SendClientMessage(playerid, COLOR_WHITE, "Item divided!");
  			}
  			return 1;
  		}
		case 563: //Edit color
		{
			if(!response) return 1;
	        if(ToyInfo[playerid][listitem][tModel] != 0 && IsPlayerAttachedObjectSlotUsed(playerid, listitem)) {
				SetPVarInt(playerid, "ColorToy", listitem);
				ShowPlayerDialog(playerid, 564, DIALOG_STYLE_LIST, "Choose a layer.", "First\nSecond", "Select", "Close");
	        }
			else error(playerid, "You have no equipped item in this slot.");
			return 1;
		}
		case 564: //Edit color #2 (Layer)
		{
			if(!response) {
				DeletePVar(playerid, "ColorToy");
				return 1;
			}
			SetPVarInt(playerid, "ColorToyL", listitem);
			new diatxt[564];
			for (new i=0; i < sizeof(ARGBColors); i++) {
				format(diatxt, 564, "%s%s\n", diatxt, ARGBColors[i][Name]);
			}
			ShowPlayerDialog(playerid, 565, DIALOG_STYLE_LIST, "Choose a color.", diatxt, "Select", "Close");			
			return 1;
		}
		case 565: //Edit color #3 (Final)
		{
			if(!response) {
				DeletePVar(playerid, "ColorToy");
				DeletePVar(playerid, "ColorToyL");
				return 1;
			}
			SetToyColor(playerid, GetPVarInt(playerid, "ColorToy"), GetPVarInt(playerid, "ColorToyL"), listitem);
			DeletePVar(playerid, "ColorToy");
			DeletePVar(playerid, "ColorToyL");			
		}
		case DIALOG_PAYMENT: {
			if(!response) return 1;
			if(listitem == 0) { 
				CallRemoteFunction("PurchaseItem","iiii", playerid, GetPVarInt(playerid, "PDBT"), GetPVarInt(playerid, "PDBTLI"), 1);
			} else CallRemoteFunction("PurchaseItem","iiii", playerid, GetPVarInt(playerid, "PDBT"), GetPVarInt(playerid, "PDBTLI"), 2);
		}
		case DIALOG_HOUSE_REMOVEALL: {
			if(!response) return 1;
			new allow = FurnRight(playerid, 1);
		  	if(allow > 0) {
  				RemoveHouseObjects(allow);
				SendClientMessage(playerid, COLOR_WHITE, "All house furniture objects removed!");
  			}
		}
		case DIALOG_BUSINESS_REMOVEALL: {
			if(!response) return 1;
			new allow = FurnRight(playerid, 2);
		  	if(allow > 0) {
  				RemoveBizzObjects(allow);
				SendClientMessage(playerid, COLOR_WHITE, "All business furniture objects removed!");
  			}
		}		
		case FUEL_DIALOG_FILL_GASCAN: {
			if(!response) {
				DeletePVar(playerid, "GC_ItemSlot");
				return 1;
			}
			new slot = GetPVarInt(playerid, "GC_ItemSlot");
			if(PlayerInfo[playerid][pInvItem][slot] != 1008) {
				DeletePVar(playerid, "GC_ItemSlot");
				return 1;
			}
			SetPVarInt(playerid, "GC_FillType", listitem);
			format(string, sizeof(string), "Max: %dL", (100-PlayerInfo[playerid][pInvQ][slot]));
			ShowPlayerDialog(playerid, FUEL_DIALOG_FILL_GASAMT, DIALOG_STYLE_INPUT, "How many litres?", string, "Fill", "Cancel");
		}
		case FUEL_DIALOG_FILL_GASAMT: {
			if(!response) {
				DeletePVar(playerid, "GC_ItemSlot");
				DeletePVar(playerid, "GC_FillType");
				return 1;
			}
			new amt = strval(inputtext);
			if(amt < 1 || amt > 100) return SendClientMessage(playerid, COLOR_GREY, "You can only fill between 1 and 100 litres of fuel.");
			new slot = GetPVarInt(playerid, "GC_ItemSlot");
			if(PlayerInfo[playerid][pInvItem][slot] != 1008) {
				DeletePVar(playerid, "GC_ItemSlot");
				DeletePVar(playerid, "GC_FillType");
				return 1;
			}
			if(PlayerInfo[playerid][pInvEx][slot] != -1 && (PlayerInfo[playerid][pInvEx][slot] != GetPVarInt(playerid, "GC_FillType"))) {
				DeletePVar(playerid, "GC_ItemSlot");
				DeletePVar(playerid, "GC_FillType");
				return SendClientMessage(playerid, COLOR_GREY, "You can't mix different fuel types in a gas can.");
			}
			if(amt > (100-PlayerInfo[playerid][pInvQ][slot])) {
				SendClientMessage(playerid, COLOR_GREY, "This gas can can't hold that much fuel.");
				format(string, sizeof(string), "Max: %dL", (100-PlayerInfo[playerid][pInvQ][slot]));
				return ShowPlayerDialog(playerid, FUEL_DIALOG_FILL_GASAMT, DIALOG_STYLE_INPUT, "How many litres?", string, "Fill", "Cancel");
			}
			PlayerInfo[playerid][pInvEx][slot] = GetPVarInt(playerid, "GC_FillType");
			PlayerInfo[playerid][pInvQ][slot] = PlayerInfo[playerid][pInvQ][slot] + amt;
			DeletePVar(playerid, "GC_ItemSlot");
			OnPlayerDataSave(playerid);
		    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		    GiveNameSpace(sendername);
			format(string, sizeof(string), "*** %s fills the gas can with some %s {C2A2DA}fuel.", sendername, FuelName(GetPVarInt(playerid, "GC_FillType")));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE);
			DeletePVar(playerid, "GC_FillType");
		}
		case FISHING_DIALOG_SELL: {
			if(!response) {
				ResetFishingCP(playerid);
				return 1;
			}
			if(PlayerInfo[playerid][pInvItem][listitem] < FISHING_LOWEST_ID || PlayerInfo[playerid][pInvItem][listitem] > FISHING_HIGHEST_ID) {
				SellFish(playerid);
				return SendClientMessage(playerid, COLOR_WHITE, "You can only sell fish!");
			}
			new payout = GetFishPrice(PlayerInfo[playerid][pInvItem][listitem], PlayerInfo[playerid][pInvEx][listitem]); //probably unneccesary to store this in memory, may be better to call twice but the more fish we add the more we want to store this in memory.
			GivePlayerMoneyEx(playerid, payout);
			format(string, sizeof(string), "You've sold this %s for $%d.", PrintIName(PlayerInfo[playerid][pInvItem][listitem]), payout);
			RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][listitem], 0, listitem);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SellFish(playerid);
		}
		case DIALOG_VEHICLE_RELEASE: {
			if(!response) return 1;
			new query[124];
			mysql_format(handlesql, query, sizeof(query), "SELECT ID,Model,Impounded FROM vehicles WHERE Owner='%s' AND Impounded > 0 LIMIT %i, %i", PlayerInfo[playerid][pUsername], listitem, listitem+1);
			mysql_tquery(handlesql, query, "OnVehicleReleased", "i", playerid);		
		}
		case DIALOG_BOLO: {
			switch(listitem)
			{
			    case 0: // View Bolo's
			    {
			        ShowPlayerDialog(playerid,DIALOG_BOLO,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
			        new found = 0;
			        for(new i=0;i<sizeof(BoloInfo);i++)
                    {
                        if(BoloInfo[i][bUsed] == 1)
                        {
							found++;
							break;
                        }
                    }
                    if(found == 0) return SendClientMessage(playerid,COLOR_BLUE,"BOLO: No bolo's available.");
                    SendClientMessage(playerid,COLOR_WHITE,"BOLO List:");
                    for(new i = 0; i < sizeof(BoloInfo); i++)
                    {
                        if(BoloInfo[i][bUsed] == 1)
                        {
							format(string, 256, "BOLO %d - %s: %s", i+1, GetNameWithSpace(BoloInfo[i][bOfficer]), BoloInfo[i][bString]);
							SendClientMessage(playerid, COLOR_BLUE, string);
                        }
                    }
			    }
			    case 1: // Add Bolo
			    {
					new found = 0;
			        for(new i=0;i<sizeof(BoloInfo);i++)
                    {
                        if(BoloInfo[i][bUsed] == 0)
                        {
							found++;
							break;
                        }
                    }
                    if(found == 0)
                    {
                        ShowPlayerDialog(playerid,DIALOG_BOLO,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
					    return SendClientMessage(playerid,COLOR_BLUE,"There is no bolo slots available.");
					}
                    ShowPlayerDialog(playerid,DIALOG_BOLO_ADD,DIALOG_STYLE_INPUT,"Bolo Add","- Enter your text here -","Enter", "Go Back");
			    }
			    case 2: ShowPlayerDialog(playerid,DIALOG_BOLO_REMOVE,DIALOG_STYLE_LIST,"Bolo Remove","ID - 1\nID - 2\nID - 3\nID - 4\nID - 5\nID - 6\nID - 7\nID - 8\nID - 9\nID - 10","Select", "Go Back");
			}
		}
		case DIALOG_BOLO_ADD: {
			switch(response)
			{
			    case 0: ShowPlayerDialog(playerid,DIALOG_BOLO,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
			    case 1: // Add Bolo
			    {
					new foundid = -1;
			        for(new i=0;i<sizeof(BoloInfo);i++) {
                        if(BoloInfo[i][bUsed] == 0) {
							foundid=i;
							break;
                        }
                    }
                    if(foundid == -1) {
                        ShowPlayerDialog(playerid,DIALOG_BOLO,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
					    return SendClientMessage(playerid,COLOR_BLUE,"There is no bolo slots available.");
					}
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_BOLO_ADD,DIALOG_STYLE_INPUT,"Bolo","- Enter your text here -","Enter", "Go Back");
	                if(strlen(inputtext) >= 128) {
					    SendClientMessage(playerid, COLOR_WHITE, "Text is too long (max 128 chars).");
					    ShowPlayerDialog(playerid,DIALOG_BOLO_ADD,DIALOG_STYLE_INPUT,"Bolo","- Enter your text here -","Enter", "Go Back");
					    return 1;
					}
					BoloInfo[foundid][bUsed]=1;

					format(BoloInfo[foundid][bOfficer], MAX_PLAYER_NAME, "%s", PlayerInfo[playerid][pUsername]);

					strmid(BoloInfo[foundid][bString], inputtext, 0, strlen(inputtext), 255);
					format(string, 256, "BOLO: %s set a bolo: (%s).", PlayerInfo[playerid][pUsername], inputtext);
      		        SendFactionMessage(1,COLOR_BLUE,string);
                    ShowPlayerDialog(playerid,DIALOG_BOLO,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
			    }
			}
		}
		case DIALOG_BOLO_REMOVE: {
			switch(response) {
			    case 0: ShowPlayerDialog(playerid,DIALOG_BOLO,DIALOG_STYLE_LIST,"Bolo Menu","View Bolo's\nAdd Bolo\nRemove Bolo\nExit","Select", "");
			    case 1:
			    {
			        ShowPlayerDialog(playerid,DIALOG_BOLO_REMOVE,DIALOG_STYLE_LIST,"Bolo Remove","ID - 1\nID - 2\nID - 3\nID - 4\nID - 5\nID - 6\nID - 7\nID - 8\nID - 9\nID - 10","Select", "Go Back");
					if(BoloInfo[listitem][bUsed] == 0)
					{
					    format(string, sizeof(string), "Bolo ID: (%d) is not being used.", listitem+1);
					    SendClientMessage(playerid,COLOR_WHITE,string);
					    return 1;
					}
					format(string, 256, "BOLO: %s removed bolo: (%s).", PlayerInfo[playerid][pUsername], BoloInfo[listitem][bString]);
      		        SendFactionMessage(1,COLOR_BLUE,string);
      		        BoloInfo[listitem][bUsed]=0;
      		        strmid(BoloInfo[listitem][bString], "None", 0, strlen("None"), 255);
			    }
			}
		}		
		case DIALOG_FURN_DELETE_HOUSE: {
			if(!response) {
				DeletePVar(playerid, "FurnDeleteKey");
				DeletePVar(playerid, "FurnDeleteProperty");
				return 1;
			}
			if(GetPVarInt(playerid, "Admin") < 7) {
				DeletePVar(playerid, "FurnDeleteKey");
				DeletePVar(playerid, "FurnDeleteProperty");
				return 1;
			}
			new i = GetPVarInt(playerid, "FurnDeleteKey"), key2 = GetPVarInt(playerid, "FurnDeleteProperty");
			if(IsValidDynamicObject(HouseInfo[key2][hObject][i])) DestroyDynamicObject(HouseInfo[key2][hObject][i]);
			HouseInfo[key2][hObject][i] = 0;
			HouseInfo[key2][hoID][i] = 0;
			HouseInfo[key2][hoX][i] = 0.0;
			HouseInfo[key2][hoY][i] = 0.0;
			HouseInfo[key2][hoZ][i] = 0.0;
			HouseInfo[key2][horX][i] = 0.0;
			HouseInfo[key2][horY][i] = 0.0;
			HouseInfo[key2][horZ][i] = 0.0;
			HouseInfo[key2][hoInt][i] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Furniture object removed.");
			SaveFurnObj(key2, i);			
			DeletePVar(playerid, "FurnDeleteKey");
			DeletePVar(playerid, "FurnDeleteProperty");
		}
		case DIALOG_FURN_DELETE_BUSINESS: {
			if(!response) {
				DeletePVar(playerid, "FurnDeleteKey");
				DeletePVar(playerid, "FurnDeleteProperty");
				return 1;
			}
			if(GetPVarInt(playerid, "Admin") < 7) {
				DeletePVar(playerid, "FurnDeleteKey");
				DeletePVar(playerid, "FurnDeleteProperty");
				return 1;
			}			
			new i = GetPVarInt(playerid, "FurnDeleteKey"), key2 = GetPVarInt(playerid, "FurnDeleteProperty");
			if(IsValidDynamicObject(BizInfo[key2][bObject][i])) DestroyDynamicObject(BizInfo[key2][bObject][i]);
			BizInfo[key2][bObject][i] = 0;
			BizInfo[key2][boID][i] = 0;
			BizInfo[key2][boX][i] = 0.0;
			BizInfo[key2][boY][i] = 0.0;
			BizInfo[key2][boZ][i] = 0.0;
			BizInfo[key2][borX][i] = 0.0;
			BizInfo[key2][borY][i] = 0.0;
			BizInfo[key2][borZ][i] = 0.0;
			BizInfo[key2][boInt][i] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Furniture object removed.");
			SaveBizzObj(key2, i);	
			DeletePVar(playerid, "FurnDeleteKey");
			DeletePVar(playerid, "FurnDeleteProperty");						
		}
		case DIALOG_TAG_DELETE: {
			if(!response) {
				DeletePVar(playerid, "TagDeleteMember");
				DeletePVar(playerid, "TagDeleteIndex");
				return 1;
			}		
			if(GetPVarInt(playerid, "Admin") < 1) {
				DeletePVar(playerid, "TagDeleteMember");
				DeletePVar(playerid, "TagDeleteIndex");
				return 1;
			}	
			SprayTag_ClearEx(GetPVarInt(playerid, "TagDeleteMember"), GetPVarInt(playerid, "TagDeleteIndex"));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tag removed!");
			DeletePVar(playerid, "TagDeleteMember");
			DeletePVar(playerid, "TagDeleteIndex");			
		}
		case DIALOG_TAG_DELETEALL: {
			if(!response) {
				DeletePVar(playerid, "TagDeleteMember");
				return 1;
			}
			if(GetPVarInt(playerid, "Admin") < 1) {
				DeletePVar(playerid, "TagDeleteMember");
				return 1;
			}		
			new member = GetPVarInt(playerid, "TagDeleteMember");
			for(new i = 0; i < MAX_FACTION_TAGS; i++) {
				if(IsValidDynamicObject(SprayTags[member][i][_spObject])) {
					SprayTag_ClearEx(member, i);
				}
			}				
			format(string, sizeof(string), "AdmCmd: %s removed all spray-tags belonging to faction %s.", AdminName(playerid), FactionInfo[member][fName]);
			SendAdminMessage(COLOR_ORANGE, string);
			format(string, sizeof(string), "[NOTICE] {FFFFFF}%s removed all spray-tags belonging to your faction.", AdminName(playerid));
			SendFactionMessage(member, COLOR_ORANGE, string);
			DeletePVar(playerid, "TagDeleteMember");
		}
		case DIALOG_VEHICLE_FURN_CREATE: {
	        if(!response) {
				DeletePVar(playerid, "FurnVehicleID");
				return 1;
			}
			new vehicleid = GetPVarInt(playerid, "FurnVehicleID");
			DeletePVar(playerid, "FurnVehicleID");
			if(vehicleid == 0) { return 1; } //Just incase.
			if(!CanFurnishVehicle(playerid, vehicleid)) { return 1; }
            new cost = 250;
            if(GetPVarInt(playerid, "MonthDon") > 0) {  cost = 0; }
			if(IsNeonObject(PlayerInfo[playerid][pFurnID])) { cost = 2500; }
			if(GetPlayerMoneyEx(playerid) >= cost) {
				new indoor = 1;
         	    if(PlayerInfo[playerid][pInVehicle] == -1) { //Outside.
					indoor = 0;
					new Float:pos[3];
					GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
             	    new Float:distance = GetDistanceFromPointToPoint(PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], pos[0], pos[1], pos[2]);
             	    if(distance > VEHICLE_PLANT_DISTANCE) {
             	        scm(playerid, COLOR_LIGHTRED, "WARNING: Object is too far from the vehicle and could not be planted!");
             	        return 1;
             	    } else { SendClientMessage(playerid, COLOR_ORANGE, "[NOTICE] {FFFFFF}Abuse of vehicle-attachments will result in a ban."); }
				}		
				if(GetPlayerVirtualWorld(playerid) == 0) { indoor = 0; } //Just in-case since we know no vehicle occupies ID 0. 
          		format(string, sizeof(string),"~r~-$%d", cost);
          		GameTextForPlayer(playerid, string, 5000, 1);
             	GivePlayerMoneyEx(playerid, -cost);
           	    BuildVehicleObject(playerid, vehicleid, PlayerInfo[playerid][pFurnID], PlayerInfo[playerid][pFurn][0], PlayerInfo[playerid][pFurn][1], PlayerInfo[playerid][pFurn][2], PlayerInfo[playerid][pFurnR][0], PlayerInfo[playerid][pFurnR][1], PlayerInfo[playerid][pFurnR][2], indoor);
         	} else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");		
		}
		case DIALOG_VEHICLE_FURN_REMOVE_CONFIRM: {
	        if(!response) {
				DeletePVar(playerid, "FurnVehicleID");
				DeletePVar(playerid, "FurnVehicleKey");
				return 1;
			}
			if(GetPVarInt(playerid, "Admin") < 4) {
				DeletePVar(playerid, "FurnVehicleID");
				DeletePVar(playerid, "FurnVehicleKey");
				return 1;
			}		
			DeleteVehicleObject(GetPVarInt(playerid, "FurnVehicleID"), GetPVarInt(playerid, "FurnVehicleKey"));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vehicle object removed!");
			DeletePVar(playerid, "FurnVehicleID");
			DeletePVar(playerid, "FurnVehicleKey");					
		}
		case DIALOG_VEHICLE_FURN_REMOVEALL_CONFIRM: {
	        if(!response) {
				DeletePVar(playerid, "FurnVehicleID");
				return 1;
			}
			if(GetPVarInt(playerid, "Admin") < 4) {
				DeletePVar(playerid, "FurnVehicleID");
				return 1;
			}
			new vehicleid = GetPVarInt(playerid, "FurnVehicleID");
			DeletePVar(playerid, "FurnVehicleID");
			if(vehicleid == 0) { return 1; } //Just incase.
			for(new slot = 0; slot < MAX_VEHICLE_OBJ; slot++) {
				if(VehicleInfo[vehicleid][voID][slot] != 0) {
					DeleteVehicleObject(vehicleid, slot);
				}
			}
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "All vehicle objects removed!");
		}
		case DIALOG_VEHFURN_EDIT: {
			if(!response) {
				DeletePVar(playerid, "CurEditMdl");
				return 1;
			}
			new count = 0, vehicleid = GetPVarInt(playerid, "FurnVehicleID"), editmdl = GetPVarInt(playerid, "CurEditMdl");
			for(new slot = 0; slot < MAX_VEHICLE_OBJ; slot++) {
				if(VehicleInfo[vehicleid][voID][slot] == editmdl) {
					if(PlayerInfo[playerid][pInVehicle] != -1) {
						if(VehicleInfo[vehicleid][voIndoor][slot] == 1) {
							if(count >= listitem)
							{
								CallRemoteFunction("SelectVehObj", "ii", playerid, slot);
								break;
							}
							count++;
						}
					} else {
						if(outdoor_vehicle_furn == 0) { break; }
						if(VehicleInfo[vehicleid][voIndoor][slot] == 0) {
							if(count >= listitem)
							{
								CallRemoteFunction("SelectVehObj", "ii", playerid, slot);
								break;
							}
							count++;
						}
					}
				}
			}
			DeletePVar(playerid, "CurEditMdl");
		}
	    case DIALOG_VEHICLE_FURN_SELECT: {
			if(GetPVarInt(playerid, "PlayerLogged") != 1) return true;
			if(!response) {
				DeletePVar(playerid, "FurnVehicleID");
				DeletePVar(playerid, "FurnVehicleKey");
				return 1;
			}
			new vehicleid = GetPVarInt(playerid, "FurnVehicleID"), slot = GetPVarInt(playerid, "FurnVehicleKey");
			if(!IsValidDynamicObject(VehicleInfo[vehicleid][vObject][slot]) || !CanFurnishVehicle(playerid, vehicleid)) {
				DeletePVar(playerid, "FurnVehicleID");
				DeletePVar(playerid, "FurnVehicleKey");
				return 1;
			}
			new furnid = 0, furnitname[100];
			furnitname="N/A";			
			for(new xe; xe<sizeof(FurnObjs) ;xe++) {
				if(VehicleInfo[vehicleid][voID][slot] == FurnObjs[xe]) {
					format(furnitname, 100, "%d", FurnObjs[xe]);
					furnid=xe;
					break;
				}
			}			
			switch(listitem) {
				case 0: // Edit Object
				{
					new obj = 0, Float:pos[3];
					if(VehicleInfo[vehicleid][voIndoor][slot] == 1) { //Indoor.
						new Float:rot[3];
						GetDynamicObjectPos(VehicleInfo[vehicleid][vObject][slot], pos[0], pos[1], pos[2]);
						GetDynamicObjectRot(VehicleInfo[vehicleid][vObject][slot], rot[0], rot[1], rot[2]);
						obj = CreatePlayerObject(playerid, VehicleInfo[vehicleid][voID][slot], pos[0], pos[1], pos[2], rot[0], rot[1], rot[2], 100.0);
					} else { //Outdoor.
						GetVehicleRelativePos(vehicleid, pos[0], pos[1], pos[2], VehicleInfo[vehicleid][voX][slot], VehicleInfo[vehicleid][voY][slot], VehicleInfo[vehicleid][voZ][slot]);
						new Float:vRotZ;
						GetVehicleZAngle(vehicleid, vRotZ);
						obj = CreatePlayerObject(playerid, VehicleInfo[vehicleid][voID][slot], pos[0], pos[1], pos[2], VehicleInfo[vehicleid][vorX][slot], VehicleInfo[vehicleid][vorY][slot], VehicleInfo[vehicleid][vorZ][slot]+vRotZ, 100.0);						
					}
					DestroyVehicleObject(vehicleid, slot);
					SetPVarInt(playerid, "FurnObject", obj);
					SetPVarInt(playerid, "EditorMode", EDITOR_MODE_VEHICLEFURN_EDIT);
					PlayerInfo[playerid][pFurnID] = furnid;
					EditPlayerObject(playerid, obj);
					format(string, sizeof(string),"%s selected, use the SPRINT key to navigate.", furnitname);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
				case 1: // Select Material
				{					
					SendClientMessage(playerid,COLOR_LIGHTRED,"WARNING: Editing an invalid-layer MAY cause parts of the object to turn invisible, resetting the layers material will fix this.");
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"When you choose a layer to edit, that layer becomes highlighted in red.");
					ShowPlayerDialog(playerid, DIALOG_VEHICLE_FURN_MLAYER, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12", "Select", "Close");
				}
				case 2: // Reset Material
				{
					for(new v=0; v < 13; v++) {
						VehicleMInfo[vehicleid][slot][v] = 0;
					}				
					DestroyVehicleObject(vehicleid, slot);
					CreateVehicleObject(vehicleid, slot);
					Streamer_Update(playerid);
					SendClientMessage(playerid ,COLOR_LIGHTBLUE, "You've reset the selected objects material.");
					SaveVehObj(vehicleid, slot);
					DeletePVar(playerid, "FurnVehicleID");
					DeletePVar(playerid, "FurnVehicleKey");					
				}
				case 3: // Remove Object
				{
					DeleteVehicleObject(vehicleid, slot);
					DeletePVar(playerid, "FurnVehicleID");
					DeletePVar(playerid, "FurnVehicleKey");					
				}
			}
        }
		case DIALOG_VEHICLE_FURN_MLAYER: { //What layer do you want to change? Material-editing.
			if(!response) {
				DeletePVar(playerid, "FurnVehicleID");
				DeletePVar(playerid, "FurnVehicleKey");
				return 1;
			}
			new vehicleid = GetPVarInt(playerid, "FurnVehicleID"), slot = GetPVarInt(playerid, "FurnVehicleKey");	
			SetPVarInt(playerid, "FurnEditL", listitem);
			ChangeDynamicObjectMaterial(VehicleInfo[vehicleid][vObject][slot], listitem, 30);
			new list[2048];
			for(new i=0; i < sizeof(MaterialIDs); i++) {
				format(list, 2048, "%s\n%s", list, MaterialIDs[i][Name]);
			}
			ShowPlayerDialog(playerid, DIALOG_VEHICLE_FURN_MATERIAL, DIALOG_STYLE_LIST, "Material List", list, "Select", "Back");
		}
		case DIALOG_VEHICLE_FURN_MATERIAL: { //Object Material List
			new vehicleid = GetPVarInt(playerid, "FurnVehicleID"), slot = GetPVarInt(playerid, "FurnVehicleKey");			
			if(!response) {
				DestroyVehicleObject(vehicleid, slot);
				CreateVehicleObject(vehicleid, slot);
				Streamer_Update(playerid);
				DeletePVar(playerid, "FurnEditL");
				return ShowPlayerDialog(playerid, DIALOG_VEHICLE_FURN_MLAYER, DIALOG_STYLE_LIST, "What layer do you want to edit?", "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12", "Select", "Close");
			}
			new layer = GetPVarInt(playerid,"FurnEditL");
			if(listitem == 0) {
				VehicleMInfo[vehicleid][slot][layer] = 0;
				DestroyVehicleObject(vehicleid, slot);
				CreateVehicleObject(vehicleid, slot);
				Streamer_Update(playerid);
				SaveVehObj(vehicleid, slot);
				DeletePVar(playerid, "FurnEditL");
				DeletePVar(playerid, "FurnVehicleID");
				DeletePVar(playerid, "FurnVehicleKey");	
				format(string, sizeof(string), "Object %d's material layer %d reset to default.", VehicleInfo[vehicleid][vObject][slot], layer);
				return SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			VehicleMInfo[vehicleid][slot][layer] = listitem;
			ChangeDynamicObjectMaterial(VehicleInfo[vehicleid][vObject][slot], layer, listitem);			
			SaveVehObj(vehicleid, slot);
			format(string, sizeof(string), "Object %d's material layer %d changed to: '%s'.", VehicleInfo[vehicleid][vObject][slot], layer, MaterialIDs[listitem][Name]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			DeletePVar(playerid, "FurnEditL");
			DeletePVar(playerid, "FurnVehicleID");
			DeletePVar(playerid, "FurnVehicleKey");				
		}	
		case DIALOG_VEHFURN_REMOVEALL_CONFIRM: {
	        if(!response) {
				DeletePVar(playerid, "FurnVehicleID");
				return 1;
			}
			new vehicleid = GetPVarInt(playerid, "FurnVehicleID");
			if(!CanFurnishVehicle(playerid, vehicleid)) {
				DeletePVar(playerid, "FurnVehicleID");
				return 1;
			}
			for(new slot = 0; slot < MAX_VEHICLE_OBJ; slot++) {
				if(VehicleInfo[vehicleid][voID][slot] != 0) {
					DeleteVehicleObject(vehicleid, slot);
				}
			}
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "All vehicle objects deleted!");
			DeletePVar(playerid, "FurnVehicleID");
		}
  		case DIALOG_SIREN_EDITOR: {
  			if(response) {
  				switch(listitem)
  				{
  					case 0:
  					{
  						new count = 0;
  						for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
  						{
  							if(VehicleInfo[GetPlayerVehicleID(playerid)][vSirenObject][i] != 0)
  							{
  								count++;
  							}
  						}

  						if(count >= MAX_VEHICLE_SIREN_OBJECTS)
  						{
  							ShowPlayerDialog(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");
  							SendClientMessage(playerid, COLOR_GREY, "You have reached the maximum ammount of attachable sirens per vehicle.");
  							return 1;
  						}

  						new object_array[sizeof(SirenObjects)];
  						for(new i = 0; i < sizeof(SirenObjects); i++)
  						{
  							object_array[i] = SirenObjects[i][0];
  						}

  						ShowModelSelectionMenuEx(playerid, object_array, sizeof(object_array), "Siren Editor", 18, 16.0, 0.0, -55.0);
  					}
  					case 1:
  					{
  						new count = 0;
  						for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
  						{
  							if(VehicleInfo[GetPlayerVehicleID(playerid)][vSirenObject][i] != 0)
  							{
  								count++;
  							}
  						}

  						if(count == 0)
  						{
  							ShowPlayerDialog(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");
  							SendClientMessage(playerid, COLOR_GREY, "This vehicle has no siren objects to remove.");
  							return 1;
  						}

  						new vehicleid = GetPVarInt(playerid, "SirenEditorVehicleID");

  						for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
  						{
  							if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
  							{
  								for(new i2 = 0; i2 < sizeof(SirenObjects); i2++)
		  						{
		  							if(VehicleInfo[vehicleid][vSirenObject][i] == SirenObjects[i2][0])
		  							{
		  								format(string, sizeof(string), "%s%s\n", string, SirenObjects[i2][1]);
		  							}
		  						}
  							}
  						}

  						ShowPlayerDialog(playerid, DIALOG_SIREN_EDITOR_REMOVE, DIALOG_STYLE_LIST, "Siren Editor", string, "Select","Back");
  					}
  				}
  			}
  			else
  			{
  				TogglePlayerControllable(playerid, 1);
  			}
  			return 1;
  		}
  		case DIALOG_SIREN_EDITOR_REMOVE:
  		{
  			if(response)
  			{
  				new vehicleid = GetPVarInt(playerid, "SirenEditorVehicleID");

  				DestroyDynamicObject(VehicleInfo[vehicleid][vSirenObjectID][listitem]);
  				VehicleInfo[vehicleid][vSirenObjectID][listitem] = 0;
  				VehicleInfo[vehicleid][vSirenObject][listitem] = 0;

  				ShowPlayerDialog(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");
  				TogglePlayerControllable(playerid, 0);
  			}
  			else
  			{
  				ShowPlayerDialog(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");
  			}
  			return 1;
  		}
		case SPRAYTAG_DIALOG_RETURN: SprayTag_Dialog(playerid, TYPE_LIST_MENU);
		case SPRAYTAG_MENU:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: SprayTag_Dialog(playerid, TYPE_LIST_TAGS_CREATE);
				case 1: SprayTag_Dialog(playerid, TYPE_LIST_TAGS);
				case 2: SprayTag_Dialog(playerid, TYPE_LIST_TAGS_DELETE);
				case 3: SprayTag_Dialog(playerid, TYPE_LIST_TAGS_FIND);
			}
		}
		case SPRAYTAG_EDIT_MAIN:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);
			new member = GetPVarInt(playerid, "Member");
			if(member == 0) return 1;
			if(SprayTags[member][listitem][_spPosX] == 0.0) return ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, "{F7EC6F}Spray Tag - {BD0000} Oops!!", "Oops! There's nothing in this slot.", "Go back", "");                
			spraytag_slot[playerid] = listitem;       
			spraytag_bold[playerid] = SprayTags[member][listitem][_spBold];
			spraytag_color[playerid] = SprayTags[member][listitem][_spFontColor];
			format(spraytag_text[playerid], 128, SprayTags[member][listitem][_spText]);
			format(spraytag_font[playerid], 50, SprayTags[member][listitem][_spFont]);
			spraytag_size[playerid] = SprayTags[member][listitem][_spFontSize];
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_DELETE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);
			if(SprayTags[GetPVarInt(playerid, "Member")][listitem][_spPosX] == 0.0) return ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, "{F7EC6F}Spray Tag - {BD0000} Oops!!", "Oops! There's nothing in this slot.", "Go back", "");       
			new szMessage[60];              
			SprayTag_Clear(playerid, listitem);
			format(szMessage, sizeof szMessage, "[Spray Tag] The spray tag #%i has been deleted successfully.", listitem);
			SendClientMessage(playerid, -1, szMessage);
			SprayTag_Dialog(playerid, TYPE_LIST_MENU);
		}
		case SPRAYTAG_FIND:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);
			new member = GetPVarInt(playerid, "Member");
			if(member == 0) return 1;			
			if(SprayTags[member][listitem][_spPosX] == 0.0) return ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, "{F7EC6F}Spray Tag - {BD0000} Oops!!", "Oops! There's nothing in this slot.", "Go back", "");             
			new szMessage[60];
			spraytag_find[playerid] = 1;
			SetPlayerCheckpoint(playerid, SprayTags[member][listitem][_spPosX], SprayTags[member][listitem][_spPosY], SprayTags[member][listitem][_spPosZ], 3.0);
			SetPVarInt(playerid, "TagToFind", listitem);
			format(szMessage, sizeof szMessage, "[Spray Tag] A checkpoint was marked for spraytag #%i.", listitem);
			SendClientMessage(playerid, -1, szMessage);
		}
		case SPRAYTAG_CREATE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);  
			if(SprayTags[GetPVarInt(playerid, "Member")][listitem][_spPosX] == 0.0)
			{
				spraytag_slot[playerid] = listitem;
				format(spraytag_text[playerid], 128, "Example");
				format(spraytag_font[playerid], 50, "Arial");
				spraytag_color[playerid] = -1;
				spraytag_size[playerid] = 24;
				spraytag_bold[playerid] = 0;
				SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			} else ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, "{F7EC6F}Spray Tag - {BD0000} Oops!!", "Oops! This slot is already taken.", "Go back", "");
		}
		case SPRAYTAG_EDIT_LIST:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_TAGS);      
			new iIndex = spraytag_slot[playerid];   
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_TEXT, DIALOG_STYLE_INPUT, "{F7EC6F}Spray Tag - {469BF0}Text", "Enter the text you want to appear on the Spray Tag", "Submit", "Go back");
				case 1: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_FONT, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Font", "Arial\nCourier\nImpact\nPricedown\nDaredevil\nBombing\naaaiight! fat\nFrom Street Art\nGhang\nGraffogie\nGraphers Blog\nNosegrind Demo", "Submit", "Go back");
				case 2: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_SIZE, DIALOG_STYLE_INPUT, "{F7EC6F}Spray Tag - {469BF0}Size", "Enter the size you want this Spray Tag to be", "Submit", "Go back");
				case 3: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_COLOR, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Color", "{FF0000}Red\n{04B404}Green\n{00B5CD}Light Blue\n{FFFF00}Yellow\n{0000FF}Blue\n{848484}Gray\n{FF00FF}Pink\n{FFFFFF}White", "Submit", "Go back");
				case 4:
				{
					switch(spraytag_bold[playerid])
					{
						case 0: spraytag_bold[playerid] = 1;
						case 1: spraytag_bold[playerid] = 0;
					}
					SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
				}
				case 5:
				{
					Streamer_Update(playerid);
					EditDynamicObject(playerid, SprayTags[GetPVarInt(playerid, "Member")][iIndex][_spObject]);
					SetPVarInt(playerid, "SPRAYTAG_EDIT", 2);
				}
			}
		}
		case SPRAYTAG_EDIT_TEXT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			format(spraytag_text[playerid], 128, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_EDIT_FONT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			format(spraytag_font[playerid], 32, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_EDIT_SIZE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			spraytag_size[playerid] = strval(inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_EDIT_COLOR:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			new iColor;
			switch(listitem)
			{
				case 0: iColor = HexToInt("0xFFFF0000");
				case 1: iColor = HexToInt("0xFF04B404");
				case 2: iColor = HexToInt("0xFF00B5CD");
				case 3: iColor = HexToInt("0xFFFFFF00");
				case 4: iColor = HexToInt("0xFF0000FF");
				case 5: iColor = HexToInt("0xFF848484");
				case 6: iColor = HexToInt("0xFFFF00FF");
				case 7: iColor = HexToInt("0xFFFFFFFF");
			}
			spraytag_color[playerid] = iColor;
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}              
		case SPRAYTAG_CREATE_MAIN:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_TAGS_CREATE);
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_TEXT, DIALOG_STYLE_INPUT, "{F7EC6F}Spray Tag - {469BF0}Text", "Enter the text you want to appear on the Spray Tag", "Submit", "Go back");
				case 1: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_FONT, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Font", "Arial\nCourier\nImpact\nPricedown\nDaredevil\nBombing\naaaiight! fat\nFrom Street Art\nGhang\nGraffogie\nGraphers Blog\nNosegrind Demo", "Submit", "Go back");
				case 2: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_SIZE, DIALOG_STYLE_INPUT, "{F7EC6F}Spray Tag - {469BF0}Size", "Enter the size you want this Spray Tag to be", "Submit", "Go back");
				case 3: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_COLOR, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Color", "{FF0000}Red\n{04B404}Green\n{00B5CD}Light Blue\n{FFFF00}Yellow\n{0000FF}Blue\n{848484}Gray\n{FF00FF}Pink\n{FFFFFF}White", "Submit", "Go back");
				case 4:
				{
					switch(spraytag_bold[playerid])
					{
						case 0: spraytag_bold[playerid] = 1;
						case 1: spraytag_bold[playerid] = 0;
					}
					SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
				}
				case 5:
				{
					new Float:Position[3];								   
					GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
					new tagobj = 19353;
					if(strlen(spraytag_text[playerid]) > 25) { tagobj=19445; }
					spraytag_object[playerid] = CreateDynamicObject(tagobj, Position[0]-1.0, Position[1], Position[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, SPRAY_TAG_OBJECT_DISTANCE);
					SetDynamicObjectMaterialText(spraytag_object[playerid], 0, spraytag_text[playerid], OBJECT_MATERIAL_SIZE_512x512, spraytag_font[playerid], spraytag_size[playerid], spraytag_bold[playerid], spraytag_color[playerid], 0, 1);
					Streamer_Update(playerid);
					EditDynamicObject(playerid, spraytag_object[playerid]);
					SetPVarInt(playerid, "SPRAYTAG_EDIT", 1);
				}
			}
		}
		case SPRAYTAG_CREATE_TEXT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			format(spraytag_text[playerid], 128, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case SPRAYTAG_CREATE_FONT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			format(spraytag_font[playerid], 50, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case SPRAYTAG_CREATE_SIZE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			spraytag_size[playerid] = strval(inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case SPRAYTAG_CREATE_COLOR:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			new iColor;
			switch(listitem)
			{
				case 0: iColor = HexToInt("0xFFFF0000");
				case 1: iColor = HexToInt("0xFF04B404");
				case 2: iColor = HexToInt("0xFF00B5CD");
				case 3: iColor = HexToInt("0xFFFFFF00");
				case 4: iColor = HexToInt("0xFF0000FF");
				case 5: iColor = HexToInt("0xFF848484");
				case 6: iColor = HexToInt("0xFFFF00FF");
				case 7: iColor = HexToInt("0xFFFFFFFF");
			}
			spraytag_color[playerid] = iColor;
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case DIALOG_VEHICLE_SPAWN: {
			if(response) {
				new query[95];
				mysql_format(handlesql, query, sizeof(query), "SELECT `ID` FROM `vehicles` WHERE `Owner` = '%e' LIMIT %i, %i;", PlayerInfo[playerid][pUsername], listitem, listitem + 1);
				mysql_tquery(handlesql, query, "vs_OnPlayerVehicleSpawnSelected", "i", playerid);
			}
		}
		case DIALOG_VEHICLE_SELL: {
		    if(response) {
				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You have to be in your vehicle in order to sell it.");
                new vehicleID = GetPlayerVehicleID(playerid);
            	if(!PlayerOwnsVehicle(playerid, vehicleID)) return SendClientMessage(playerid, COLOR_GREY, "You don't own this vehicle.");
            	if(VehicleInfo[vehicleID][vDonate] != 0) return SendClientMessage(playerid, COLOR_GREY, "You cannot sell a donor vehicle.");
            	new msg[80],
					sellPrice = VehicleInfo[vehicleID][vValue] / 3;
					
            	format(msg, sizeof(msg), "Vehicle sold for $%i.", sellPrice);
				SendClientMessage(playerid, COLOR_WHITE, msg);
				GivePlayerMoneyEx(playerid, sellPrice);
				mysql_format(handlesql, msg, sizeof(msg), "DELETE FROM `vehicles` WHERE `ID` = %i;", VehicleInfo[vehicleID][vID]);
				mysql_tquery(handlesql, msg);
				mysql_format(handlesql, msg, sizeof(msg), "DELETE FROM `vehiclefurn` WHERE VID=%i;", VehicleInfo[vehicleID][vID]);
				mysql_tquery(handlesql, msg);					
				DespawnVehicle(vehicleID);
			}
		}
		case DIALOG_RADIO: {
		    if(response) {
		        switch(listitem) {
					case 0: {
					    new dialogMsg[5000];
		            	for(new i = 0; i < sizeof(CarRadio); i++)	{
			            	if(i == 0) {
								format(dialogMsg, sizeof(dialogMsg), "%s", CarRadio[i][cName]);
			            	} else {
								format(dialogMsg, sizeof(dialogMsg), "%s\n%s", dialogMsg, CarRadio[i][cName]);
							}
			        	}
			        	
		            	ShowPlayerDialog(playerid, DIALOG_RADIO_STATION, DIALOG_STYLE_LIST, "Radio Stations", dialogMsg, "Select", "Go Back");
					}
					case 1: {
					    ShowPlayerDialog(playerid, DIALOG_RADIO_CUSTOM, DIALOG_STYLE_INPUT, "Direct URL", "Enter the URL you would like to play:", "Enter", "Go Back");
					}
					case 2: {
						new vehicleID = GetPlayerVehicleID(playerid);
						if(vehicleID == 0 && IsValidCar(PlayerInfo[playerid][pInVehicle])) { vehicleID = PlayerInfo[playerid][pInVehicle]; }
						if(vehicleID == -1 || vehicleID == 0) return SendClientMessage(playerid, COLOR_GREY, "You have to be in a vehicle with a radio installed.");	
   	        			if(GetPlayerVehicleID(playerid) != vehicleID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You have to be in the driver seat of your vehicle in order to set the radio station.");
			            strmid(VehicleInfo[vehicleID][vRadio], "None", 0, strlen("None"), VEHICLE_RADIO_URL_MAX_LENGTH);
			            GameTextForPlayer(playerid, "~w~Radio~n~~r~OFF", 4000, 3);
			            foreach(new i : Player) {
			                if(GetPlayerVehicleID(i) == vehicleID) {
			                    StopAudioStreamForPlayerEx(i);
			                    LoadRadios(i);
			                }
			            }
			        }
				}
		    }
		}
		case DIALOG_RADIO_STATION: {
            if(!response) {
				return cmd_v(playerid, "radio");
			} else {
				new vehicleID = GetPlayerVehicleID(playerid);
				if(vehicleID == 0 && IsValidCar(PlayerInfo[playerid][pInVehicle])) { vehicleID = PlayerInfo[playerid][pInVehicle]; }
				if(vehicleID == -1 || vehicleID == 0) return SendClientMessage(playerid, COLOR_GREY, "You have to be in a vehicle with a radio installed.");	
   	        	if(IsNotAEngineCar(vehicleID) && IsEnterableVehicle(vehicleID) == -1) return SendClientMessage(playerid, COLOR_GREY, "This vehicle does not have a radio installed.");
   	        	if(GetPlayerVehicleID(playerid) != vehicleID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You have to be in the driver seat of your vehicle in order to set the radio station.");
				if (listitem == 0) {
					PlayRadioURL(vehicleID, RadioLSStream, 1);
				} else PlayRadioURL(vehicleID, CarRadio[listitem][cURL]);
			}
		}
		case DIALOG_RADIO_CUSTOM: {
		    if(!response) {
				return cmd_v(playerid, "radio");
			} else {
                if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_RADIO_CUSTOM, DIALOG_STYLE_INPUT, "Direct URL", "Enter the URL you would like to play:", "Enter", "Go Back");
	        	if(strlen(inputtext) > VEHICLE_RADIO_URL_MAX_LENGTH) {
	        	    SendClientMessage(playerid, COLOR_GREY, "The URL you entered is too long, please try again.");
					return ShowPlayerDialog(playerid, DIALOG_RADIO_CUSTOM, DIALOG_STYLE_INPUT, "Direct URL", "Enter the URL you would like to play:", "Enter", "Go Back");
				}
				new vehicleID = GetPlayerVehicleID(playerid);
				if(vehicleID == 0 && IsValidCar(PlayerInfo[playerid][pInVehicle])) { vehicleID = PlayerInfo[playerid][pInVehicle]; }
				if(vehicleID == -1 || vehicleID == 0) return SendClientMessage(playerid, COLOR_GREY, "You have to be in a vehicle with a radio installed.");	
   	        	if(IsNotAEngineCar(vehicleID) && IsEnterableVehicle(vehicleID) == -1) return SendClientMessage(playerid, COLOR_GREY, "This vehicle does not have a radio installed.");
   	        	if(GetPlayerVehicleID(playerid) != vehicleID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You have to be in the driver seat of your vehicle in order to set the radio station.");
		    	PlayRadioURL(vehicleID, inputtext);
		    }
		}
		case DIALOG_MDC_SEARCH_CITIZEN: {
			if(response) {
                mdc_SearchCitizen(playerid, inputtext);
			} else {
			    SelectTextDraw(playerid, -1);
			}
		}
		case DIALOG_MDC_SEARCH_PHONE_NUMBER: {
			if(response) {
			    if(!IsNumeric(inputtext)) {
			        SendClientMessage(playerid, COLOR_GREY, "You have to enter a valid numeric phone number.");
			        ShowPlayerDialog(playerid, DIALOG_MDC_SEARCH_PHONE_NUMBER, DIALOG_STYLE_INPUT, "{3D62A8}Search Phone Number", "Please enter the phone number below:", "Search", "Cancel");
			    } else {
			        new query[130];
					mysql_format(handlesql, query, sizeof(query), "SELECT `Name`, `Model`, `Age`, `Sex`, `DriveLic`, `GunLic`, `JobID` FROM `accounts` WHERE `PhoneNum` = %i;", strval(inputtext));
					mysql_tquery(handlesql, query, "mdc_SearchPhoneNumber", "ii", playerid, strval(inputtext));
			    }
			} else {
			    SelectTextDraw(playerid, -1);
			}
		}
		case DIALOG_MDC_SEARCH_SERIAL: {
		    if(response) {
		        if(!IsNumeric(inputtext)) {
		            SendClientMessage(playerid, COLOR_GREY, "You have to enter a numeric weapon serial number.");
		            ShowPlayerDialog(playerid, DIALOG_MDC_SEARCH_SERIAL, DIALOG_STYLE_INPUT, "{3D62A8}Search Weapon Serial", "Please enter the weapons serial number below:", "Search", "Cancel");
		        } else {
			    	new query[140];
					mysql_format(handlesql, query, sizeof(query), "SELECT `Name`, `Model`, `Age`, `Sex`, `DriveLic`, `GunLic`, `JobID`, `PhoneNum` FROM `accounts` WHERE `WepSerial` = %d;", strval(inputtext));
					mysql_tquery(handlesql, query, "mdc_SearchSerial", "i", playerid);
				}
			} else {
			    SelectTextDraw(playerid, -1);
			}
		}
		case DIALOG_MDC_SEARCH_PLATE: {
			if(response) {
			    new query[140];
			    mysql_format(handlesql, query, sizeof(query), "SELECT `Model`, `ColorOne`, `ColorTwo`, `Owner`, `Insurance` FROM `vehicles` WHERE `Plate` = '%e';", inputtext);
			    mysql_tquery(handlesql, query, "mdc_SearchLicensePlate", "is", playerid, inputtext);
			} else {
			    SelectTextDraw(playerid, -1);
			}
		}
		case DIALOG_CLOSE: {
   			return 1;
  		}
		//new case
	}
	return 1;
}
//============================================//
public OnPlayerClickTextDraw(playerid, Text:clickedid) {
    if(_:clickedid == INVALID_TEXT_DRAW) return 1; // block any invalid textdraws.
    if(_:clickedid == INVALID_TEXT_DRAW) return 1; // block any invalid textdraws.
	if(clickedid == td_mdc_Exit) {
		mdc_Hide(playerid, true);
	} else if(clickedid == td_mdc_SectionText[0]) {
		ShowPlayerDialog(playerid, DIALOG_MDC_SEARCH_CITIZEN, DIALOG_STYLE_INPUT, "{3D62A8}Search Citizen", "Please enter the citizen's full name below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_SectionText[1]) {
        ShowPlayerDialog(playerid, DIALOG_MDC_SEARCH_SERIAL, DIALOG_STYLE_INPUT, "{3D62A8}Search Weapon Serial", "Please enter the weapons's serial number below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_SectionText[2]) {
		ShowPlayerDialog(playerid, DIALOG_MDC_SEARCH_PHONE_NUMBER, DIALOG_STYLE_INPUT, "{3D62A8}Search Phone Number", "Please enter the phone number below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_SectionText[3]) {
		ShowPlayerDialog(playerid, DIALOG_MDC_SEARCH_PLATE, DIALOG_STYLE_INPUT, "{3D62A8}Search License Plate", "Please enter the license plate below:", "Search", "Cancel");
	} else if(clickedid == td_mdc_CriminalRecord || clickedid == td_mdc_CriminalRecordArrow) {
	    new name[MAX_PLAYER_NAME];
	    GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
		mdc_ShowCriminalRecord(playerid, name);
	} else if(clickedid == td_mdc_Cases || clickedid == td_mdc_CasesArrow) {
		ShowPlayerDialog(playerid, DIALOG_CLOSE, DIALOG_STYLE_MSGBOX, "{3D62A8}Case Files", "{ffffff}The Los Santos Police Department's Mobile Data Computer is presently under \ndevelopment. We ask for your patience and understanding.\n\nSincerely,\n{a9c4e4}LSPD Tech. Department", "Close", "");
	} else if(clickedid == td_mdc_Properties || clickedid == td_mdc_PropertiesArrow) {
		ShowPlayerDialog(playerid, DIALOG_CLOSE, DIALOG_STYLE_MSGBOX, "{3D62A8}Property Data", "{ffffff}The Los Santos Police Department's Mobile Data Computer is presently under \ndevelopment. We ask for your patience and understanding.\n\nSincerely,\n{a9c4e4}LSPD Tech. Department", "Close", "");
	} else if(clickedid == td_mdc_Vehicles || clickedid == td_mdc_VehiclesArrow) {
	    new name[MAX_PLAYER_NAME];
	    GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
		mdc_ShowVehicles(playerid, name);
	} else if(clickedid == td_mdc_cr_ArrowUp) {
		new ScrollTop = GetPVarInt(playerid, "mdc_cr_ScrollTop");
		if(ScrollTop > 0) {
		    ScrollTop -= 1;
		    SetPVarInt(playerid, "mdc_cr_ScrollTop", ScrollTop);
			for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
			    PlayerTextDrawHide(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Date[i]);
   				if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_type] == RECORD_CHARGE) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Charge");
			    	if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_served] == 0) {
				  	    PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_RED);
				  	} else {
					   	PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    } else {
			        PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Ticket");
			        if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_paid] == 0) {
				        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_RED);
			        } else {
                        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    }

			    PlayerTextDrawSetString(playerid, td_mdc_cr_Date[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_date]);
			    if(strlen(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]) < 20) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]);
				} else {
					new desc[25];
					strmid(desc, CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description], 0, 20, MDC_DESCRIPTION_MAX_LENGTH);
					strins(desc, "...", strlen(desc), sizeof(desc));
					PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], desc);
				}
				
				PlayerTextDrawShow(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Date[i]);
			}
		}
	} else if(clickedid == td_mdc_cr_ArrowDown) {
	    new ScrollTop = GetPVarInt(playerid, "mdc_cr_ScrollTop");
		if(Iter_Count(CriminalRecordIterator[playerid]) > ScrollTop + 7) {
		    ScrollTop += 1;
		    SetPVarInt(playerid, "mdc_cr_ScrollTop", ScrollTop);
			for(new i = 0; i < sizeof(td_mdc_cr_Info); i++) {
			    PlayerTextDrawHide(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawHide(playerid, td_mdc_cr_Date[i]);
   				if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_type] == RECORD_CHARGE) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Charge");
			    	if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_served] == 0) {
				  	    PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_RED);
				  	} else {
					   	PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
					    PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    } else {
			        PlayerTextDrawSetString(playerid, td_mdc_cr_Type[i], "Ticket");
			        if(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_paid] == 0) {
				        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_RED);
				        PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_RED);
			        } else {
                        PlayerTextDrawColor(playerid, td_mdc_cr_Type[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Description[i], COLOR_WHITE);
			        	PlayerTextDrawColor(playerid, td_mdc_cr_Date[i], COLOR_WHITE);
					}
			    }

			    PlayerTextDrawSetString(playerid, td_mdc_cr_Date[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_date]);
			    if(strlen(CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]) < 20) {
			    	PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description]);
				} else {
					new desc[25];
					strmid(desc, CriminalRecordData[playerid][i + ScrollTop][mdc_cr_description], 0, 20, MDC_DESCRIPTION_MAX_LENGTH);
					strins(desc, "...", strlen(desc), sizeof(desc));
					PlayerTextDrawSetString(playerid, td_mdc_cr_Description[i], desc);
				}
				
				PlayerTextDrawShow(playerid, td_mdc_cr_Type[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Description[i]);
			    PlayerTextDrawShow(playerid, td_mdc_cr_Date[i]);
			}
		}
	} else if(clickedid == td_mdc_cr_Info[0]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop"));
	} else if(clickedid == td_mdc_cr_Info[1]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 1);
	} else if(clickedid == td_mdc_cr_Info[2]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 2);
	} else if(clickedid == td_mdc_cr_Info[3]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 3);
	} else if(clickedid == td_mdc_cr_Info[4]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 4);
	} else if(clickedid == td_mdc_cr_Info[5]) {
		mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 5);
	} else if(clickedid == td_mdc_cr_Info[6]) {
	    mdc_ShowCriminalRecordDetails(playerid, GetPVarInt(playerid, "mdc_cr_ScrollTop") + 6);
	} else if(clickedid == td_mdc_veh_ArrowRight || clickedid == td_mdc_veh_Next) {
		new name[MAX_PLAYER_NAME];
	    GetPVarString(playerid, "mdc_Citizen", name, sizeof(name));
	    SetPVarInt(playerid, "mdc_VehicleIndex", GetPVarInt(playerid, "mdc_VehicleIndex") + 1);
		mdc_ShowVehicles(playerid, name);
	}
	
	else if(clickedid == PayDraw[3]) {
		ConfigPayment(playerid, 2, "");
		CallRemoteFunction("PurchaseItem","iiii", playerid, GetPVarInt(playerid, "PDBT"), GetPVarInt(playerid, "PDBTLI"), 1);
	}
	else if(clickedid == PayDraw[4]) {
		ConfigPayment(playerid, 2, "");
		CallRemoteFunction("PurchaseItem","iiii", playerid, GetPVarInt(playerid, "PDBT"), GetPVarInt(playerid, "PDBTLI"), 2);
	}
	else if(clickedid == PayDraw[5]) {
		ConfigPayment(playerid, 2, "");
	}
	return 1;
}
//============================================//
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(playertextid == Wheels[playerid][3]) {
		BuyRims(playerid,1073);
	}
    else if(playertextid == Wheels[playerid][4]) {
		BuyRims(playerid,1074);
	}
	else if(playertextid == Wheels[playerid][5]) {
		BuyRims(playerid,1075);
	}
	else if(playertextid == Wheels[playerid][6]) {
		BuyRims(playerid,1076);
	}
	else if(playertextid == Wheels[playerid][7]) {
		BuyRims(playerid,1077);
	}
	else if(playertextid == Wheels[playerid][8]) {
		BuyRims(playerid,1078);
	}
	else if(playertextid == Wheels[playerid][9]) {
		BuyRims(playerid,1079);
	}
	else if(playertextid == Wheels[playerid][10]) {
		BuyRims(playerid,1080);
	}
	else if(playertextid == Wheels[playerid][11]) {
		BuyRims(playerid,1081);
	}
	else if(playertextid == Wheels[playerid][12]) {
		BuyRims(playerid,1082);
	}
	else if(playertextid == Wheels[playerid][13]) {
		BuyRims(playerid,1083);
	}
	else if(playertextid == Wheels[playerid][14]) {
		BuyRims(playerid,1084);
	}
	else if(playertextid == Wheels[playerid][15]) {
		BuyRims(playerid,1085);
	}
	else if(playertextid == Wheels[playerid][16]) {
		BuyRims(playerid,1025);
	}
	else if(playertextid == Wheels[playerid][17]) {
		BuyRims(playerid,1096);
	}
	else if(playertextid == Wheels[playerid][18]) {
		BuyRims(playerid,1097);
	}
	else if(playertextid == Wheels[playerid][19]) {
        BuyRims(playerid,1098);
	}
	else if(playertextid == Wheels[playerid][21]) {
        HideWheels(playerid);
		SetPVarInt(playerid, "VEHSEC", 0);
		CallRemoteFunction("VehMod", "i", playerid);
	}
	else if(playertextid == Wheels[playerid][22]) {
        if(Page[playerid] == 1)
        {
            ShowWPage2(playerid);
        }
        else if(Page[playerid] == 2)
        {
            ShowWPage1(playerid);
        }
	}
	return 1;
}
//============================================//
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(GetPVarInt(playerid, "PlayerLogged") != 1) return true;
	TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 0, 0));
	if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0 && GetPVarInt(playerid, "CarRadio") == 0)
	{
		for(new i=0;i<sizeof(RadioInfo);i++)
		{
		    if(RadioInfo[i][rAreaID] == GetPlayerZone(playerid) && RadioInfo[i][rStatus] == 1)
		    {
		        if(strcmp(RadioInfo[i][rURL], PlayerInfo[playerid][pAudioUrl], true) == 0)
				{
				    return true; // Block script.
				}
		        else
		        {
					if(IsPlayerInAnyVehicle(playerid))
					{
					    if(VehicleInfo[GetPlayerVehicleID(playerid)][vType] == VEHICLE_PERSONAL)
					    {
					        if(strcmp(VehicleInfo[GetPlayerVehicleID(playerid)][vRadio], "None", true) == 0){}
					        else
					        {
					            return true; // Block overlapping music.
					        }
					    }
					}
		            PlayAudioStreamForPlayer(playerid, RadioInfo[i][rURL], RadioInfo[i][rX], RadioInfo[i][rY], RadioInfo[i][rZ], 50.0, 1);
		            return true;
				}
		    }
		}
	}
	return true;
}
//============================================//
forward CountPendingApps(playerid);
public CountPendingApps(playerid)
{
	new count = cache_get_row_count();
	if(count == 0) return 1;
	new str[128];
	format(str, sizeof(str), "[REMINDER] There are %d pending applications. (/applications)", count);
	return scm(playerid, COLOR_ORANGE, str);
}
//============================================//
forward TutorialAnswers(playerid);
public TutorialAnswers(playerid)
{

	SetPVarInt(playerid, "InRegQuiz", 1);
	new string[128], playersip[32];
    if(GetPVarInt(playerid, "TutQuestAmount") >= 10)
    {
        GetPlayerIp(playerid,playersip,sizeof(playersip));
        DeletePVar(playerid,"AppSetup"), DeletePVar(playerid,"TutQuestAmount");	
		new stxt[65];
		GetPVarString(playerid,"TempPass",stxt,65);
		SHA256_PassHash(stxt, HASH_KEY, stxt, 65);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		new store[10][102];
		mysql_real_escape_string(PlayerInfo[playerid][pOOC], store[0]);
		mysql_real_escape_string(PlayerInfo[playerid][pMetagame], store[1]);
		mysql_real_escape_string(PlayerInfo[playerid][pRevenge], store[2]);
		mysql_real_escape_string(PlayerInfo[playerid][pRoleplay], store[3]);
		mysql_real_escape_string(PlayerInfo[playerid][pPowergame], store[4]);
		mysql_real_escape_string(PlayerInfo[playerid][pQuest1], store[5]);
		mysql_real_escape_string(PlayerInfo[playerid][pQuest2], store[6]);
		mysql_real_escape_string(PlayerInfo[playerid][pQuest3], store[7]);
		mysql_real_escape_string(PlayerInfo[playerid][pQuest4], store[8]);
		mysql_real_escape_string(PlayerInfo[playerid][pQuest5], store[9]);
		//mysql_real_escape_string(stxt, stxt);
		new query[672];
		mysql_format(handlesql, query, sizeof(query), "INSERT INTO applications (`Name`, `Pass`, `Time`, `Question1`, `Question2`, `Question3`, `Question4`, `IP`) VALUES ('%s','%s',%d,'%s','%s','%s','%s','%s')", 
		PlayerName(playerid), stxt, GetCount(), store[0], store[1], 
		store[2], store[3], ip);
		mysql_tquery(handlesql, query);

		mysql_format(handlesql, query, sizeof(query), "UPDATE applications SET `Question5`='%s', `Question6`='%s', `Question7`='%s', `Question8`='%s', `Question9`='%s', `Question10`='%s' WHERE `Name`='%s'",
		store[4], store[5], store[6], store[7], 
		store[8], store[9], PlayerName(playerid));
		mysql_tquery(handlesql, query);
		DeletePVar(playerid,"TempPass");
		SendClientMessage(playerid,COLOR_WHITE,"Answers posted, awaiting approval from a registrator. Your application has been saved and will be reviewed even if you are offline.");
		format(string, sizeof(string), "RegWarn: %s posted their application answers type /apps (or /applications) to view.", PlayerName(playerid));
	    SendAdminAndRegMessage(0xFF0000FF,string);
	    format(string, sizeof(string), "RegWarn: PlayersIP: %s", playersip);
	    SendAdminAndRegMessage(0xFF0000FF,string);
	    SetPVarInt(playerid, "AppWait", 1);
		SetPVarInt(playerid, "InRegQuiz", 0);
		mysql_format(handlesql, query, 124, "SELECT `Time` FROM applications WHERE `Name`='%s'", PlayerName(playerid));
		mysql_tquery(handlesql, query, "RefreshAppStatus", "i", playerid);
        return true;
    }
    new rand = random(10)+1;
	switch(rand)
	{
	    case 0, 1:
	    {
	        if(strlen(PlayerInfo[playerid][pOOC]) < 5)
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"What is the definition of OOC & IC?");
			    SendClientMessage(playerid,COLOR_GREY,"< Type in the answer >");
			    SetPVarInt(playerid, "AppSetup", 1);
			}
			else CallRemoteFunction("TutorialAnswers","i",playerid);
	    }
	    case 2:
	    {
	        if(strlen(PlayerInfo[playerid][pMetagame]) < 5)
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"What is the definition of Metagame?");
			    SendClientMessage(playerid,COLOR_GREY,"< Type in the answer >");
			    SetPVarInt(playerid, "AppSetup", 2);
			}
			else CallRemoteFunction("TutorialAnswers","i",playerid);
	    }
	    case 3:
	    {
	        if(strlen(PlayerInfo[playerid][pRevenge]) < 5)
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"What is the definition of Revenge Killing?");
			    SendClientMessage(playerid,COLOR_GREY,"< Type in the answer >");
			    SetPVarInt(playerid, "AppSetup", 3);
			}
			else CallRemoteFunction("TutorialAnswers","i",playerid);
	    }
	    case 4:
	    {
	        if(strlen(PlayerInfo[playerid][pRoleplay]) < 5)
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"What is the definition of Roleplay?");
			    SendClientMessage(playerid,COLOR_GREY,"< Type in the answer >");
			    SetPVarInt(playerid, "AppSetup", 4);
			}
			else CallRemoteFunction("TutorialAnswers","i",playerid);
	    }
	    case 5:
	    {
	        if(strlen(PlayerInfo[playerid][pPowergame]) < 5)
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"What is the definition of Powergame?");
			    SendClientMessage(playerid,COLOR_GREY,"< Type in the answer >");
			    SetPVarInt(playerid, "AppSetup", 5);
			}
			else CallRemoteFunction("TutorialAnswers","i",playerid);
	    }
	    case 6:
	    {
	        if(strlen(PlayerInfo[playerid][pQuest1]) < 5)
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"What do you do if you get Deathmatched?");
			    SendClientMessage(playerid,COLOR_GREY,"< Type in the answer >");
			    SetPVarInt(playerid, "AppSetup", 6);
			}
			else CallRemoteFunction("TutorialAnswers","i",playerid);
	    }
	    case 7:
	    {
	        if(strlen(PlayerInfo[playerid][pQuest2]) < 5)
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"You are being arrested ICly you...");
			    SendClientMessage(playerid,COLOR_GREY,"< Type in the answer >");
			    SetPVarInt(playerid, "AppSetup", 7);
			}
			else CallRemoteFunction("TutorialAnswers","i",playerid);
	    }
	    case 8:
	    {
	        if(strlen(PlayerInfo[playerid][pQuest3]) < 5)
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"What do you do if you spot a hacker?");
			    SendClientMessage(playerid,COLOR_GREY,"< Type in the answer >");
			    SetPVarInt(playerid, "AppSetup", 8);
			}
			else CallRemoteFunction("TutorialAnswers","i",playerid);
	    }
	    case 9:
	    {
	        if(strlen(PlayerInfo[playerid][pQuest4]) < 5)
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"Are you allowed to rob somebody that is under 20 Time-In-LS?");
			    SendClientMessage(playerid,COLOR_GREY,"< Type in the answer >");
			    SetPVarInt(playerid, "AppSetup", 9);
			}
			else CallRemoteFunction("TutorialAnswers","i",playerid);
	    }
	    case 10:
	    {
	        if(strlen(PlayerInfo[playerid][pQuest5]) < 5)
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"Are you allowed to use /report to talk to an admin?");
			    SendClientMessage(playerid,COLOR_GREY,"< Type in the answer >");
			    SetPVarInt(playerid, "AppSetup", 10);
			}
			else CallRemoteFunction("TutorialAnswers","i",playerid);
	    }
	}
	return true;
}
//============================================//
public OnPlayerText(playerid, text[])
{
	if(IsPlayerConnected(playerid))
	{
		if((GetPVarInt(playerid, "PlayerLogged") == 1 && GetPVarInt(playerid, "Muted") == 0) || GetPVarInt(playerid, "InRegQuiz") == 1)
		{
			new sendername[MAX_PLAYER_NAME], string[255];
		    if(GetPVarInt(playerid, "AppSetup") > 0)
		    {
		        if(strlen(text) < 5)
		        {
				    SendClientMessage(playerid, COLOR_WHITE, "Answer is too short.");
				    return 0;
				}
                if(strlen(text) >= 101)
                {
				    SendClientMessage(playerid, COLOR_WHITE, "Answer is too long.");
				    return 0;
				}
				switch(GetPVarInt(playerid, "AppSetup"))
				{
				    case 1: strmid(PlayerInfo[playerid][pOOC], text, 0, strlen(text), 255), SetPVarInt(playerid, "TutQuestAmount", GetPVarInt(playerid, "TutQuestAmount")+1);
				    case 2: strmid(PlayerInfo[playerid][pMetagame], text, 0, strlen(text), 255), SetPVarInt(playerid, "TutQuestAmount", GetPVarInt(playerid, "TutQuestAmount")+1);
				    case 3: strmid(PlayerInfo[playerid][pRevenge], text, 0, strlen(text), 255), SetPVarInt(playerid, "TutQuestAmount", GetPVarInt(playerid, "TutQuestAmount")+1);
				    case 4: strmid(PlayerInfo[playerid][pRoleplay], text, 0, strlen(text), 255), SetPVarInt(playerid, "TutQuestAmount", GetPVarInt(playerid, "TutQuestAmount")+1);
				    case 5: strmid(PlayerInfo[playerid][pPowergame], text, 0, strlen(text), 255), SetPVarInt(playerid, "TutQuestAmount", GetPVarInt(playerid, "TutQuestAmount")+1);
				    case 6: strmid(PlayerInfo[playerid][pQuest1], text, 0, strlen(text), 255), SetPVarInt(playerid, "TutQuestAmount", GetPVarInt(playerid, "TutQuestAmount")+1);
				    case 7: strmid(PlayerInfo[playerid][pQuest2], text, 0, strlen(text), 255), SetPVarInt(playerid, "TutQuestAmount", GetPVarInt(playerid, "TutQuestAmount")+1);
				    case 8: strmid(PlayerInfo[playerid][pQuest3], text, 0, strlen(text), 255), SetPVarInt(playerid, "TutQuestAmount", GetPVarInt(playerid, "TutQuestAmount")+1);
				    case 9: strmid(PlayerInfo[playerid][pQuest4], text, 0, strlen(text), 255), SetPVarInt(playerid, "TutQuestAmount", GetPVarInt(playerid, "TutQuestAmount")+1);
				    case 10: strmid(PlayerInfo[playerid][pQuest5], text, 0, strlen(text), 255), SetPVarInt(playerid, "TutQuestAmount", GetPVarInt(playerid, "TutQuestAmount")+1);
				}
				CallRemoteFunction("TutorialAnswers","i",playerid);
		        return 0;
		    }
			if(GetPVarInt(playerid, "Mobile") != INVALID_MAXPL && GetPVarInt(playerid, "Dead") == 0)
            {
		        format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		        GiveNameSpace(sendername);
		        if(GetPVarInt(playerid, "HidePhone") == 1) sendername = "Unknown";
		        if(GetPVarInt(playerid, "PayPhone") == 1) format(string, sizeof(string), "Payphone: %s", text);
		        else format(string, sizeof(string), "%s %s (cellphone): %s", sendername, PrintPrefix(playerid), text);
		        ProxDetector(20.0, playerid, string,COLOR_FADE);
		        switch(GetPVarInt(playerid, "Mobile"))
		        {
		            case 911:
		            {
		                if(strcmp(text, "Police", true) == 0)
		                {
		                    SetPVarInt(playerid, "Mobile", 912);
		                    SendClientMessage(playerid, COLOR_PINK, "EMERGENCY: I am patching you to  Police HQ, please hold.");
		                    SendClientMessage(playerid, COLOR_BLUE, "HQ: Please give me a short description of the crime and location.");
		                }
		                else if(strcmp(text, "LSFD", true) == 0)
		                {
		                    SetPVarInt(playerid, "Mobile", 913);
		                    SendClientMessage(playerid, COLOR_PINK, "EMERGENCY: I am patching you to  LSFD HQ, please hold.");
		                    SendClientMessage(playerid, COLOR_PINK, "Dispatch: Please give me a short description of the Incident.");
		                }
		                else
		                {
		                    SendClientMessage(playerid,COLOR_BLUE,"DISPATCH: I do not recognize this service, please try again.");
		                }
		                return 0;
		            }
		            case 912:
		            {
		                if(!strlen(text))
			            {
	                        SendClientMessage(playerid, COLOR_PINK, "EMERGENCY: Sorry i dont understand?");
				            return 0;
			            }
			            SendClientMessage(playerid, COLOR_BLUE, "Police Dispatch: We have alerted all units in the area.");
				        SendClientMessage(playerid, COLOR_BLUE, "Thank you for reporting this crime.");
				        if(GetPVarInt(playerid, "PayPhone") == 1)
				        {
							TogglePlayerControllableEx(playerid,true);
				            DeletePVar(playerid,"PayPhone");
                            DeletePVar(playerid,"PhoneID");
				            SendFactionMessage(1, COLOR_BLUE, "HQ: All Units APB: Reporter: Payphone");
				        }
				        else
				        {
				            format(string, sizeof(string), "HQ: All Units APB: Reporter: %s", PlayerName(playerid));
				            SendFactionMessage(1, COLOR_BLUE, string);
				        }
				        format(string, sizeof(string), "HQ: Crime: %s", text);
				        SendFactionMessage(1, COLOR_BLUE, string);
				        format(string, sizeof(string), "HQ: Location: %s", GetPlayerArea(playerid));
				        SendFactionMessage(1, COLOR_BLUE, string);
				        SetPVarInt(playerid, "Mobile", INVALID_MAXPL);
						cancelPayphone(playerid);
				        SetPVarInt(playerid, "RingTone", 0);
                        SetPVarInt(playerid, "RingPhone", 0);
                        CellphoneState(playerid,2);
                        DeletePVar(playerid, "CellMenu");
				        return 0;
		            }
		            case 913:
		            {
		                if(!strlen(text))
			            {
	                        SendClientMessage(playerid, COLOR_PINK, "EMERGENCY: Sorry I don't understand?");
				            return 0;
			            }
			            SendClientMessage(playerid, COLOR_PINK, "Dispatch: We have alerted all units in the area.");
			            SendClientMessage(playerid, COLOR_PINK, "Thank you for reporting this incident.");
		                if(GetPVarInt(playerid, "PayPhone") == 1)
				        {
							TogglePlayerControllableEx(playerid,true);
				            DeletePVar(playerid,"PayPhone");
                            DeletePVar(playerid,"PhoneID");
		                    SendFactionMessage(4, COLOR_PINK, "Dispatch: All Units IA: Caller: Payphone");
				        }
				        else
				        {
						    format(string, sizeof(string), "Dispatch: All Units IA: Caller: %s", PlayerName(playerid));
		                    SendFactionMessage(4, COLOR_LIGHTRED, string);
				        }
                        format(string, sizeof(string), "Dispatch: Incident: %s", text);
			            SendFactionMessage(2, COLOR_PINK, string);
			            format(string, sizeof(string), "Dispatch: Location: %s",GetPlayerArea(playerid));
		                SendFactionMessage(2, COLOR_PINK, string);
				        SetPVarInt(playerid, "Mobile", INVALID_MAXPL);
						cancelPayphone(playerid);
			            SetPVarInt(playerid, "RingTone", 0);
                        SetPVarInt(playerid, "RingPhone", 0);
                        CellphoneState(playerid,2);
                        DeletePVar(playerid, "CellMenu");
				        return 0;
		            }
		        }
		        format(sendername, sizeof(sendername), "%s", PlayerName(playerid));
		        GiveNameSpace(sendername);
				if(IsPlayerConnected(GetPVarInt(playerid, "Mobile")))
				{
					if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile") == playerid)
					{
						if(GetPVarInt(GetPVarInt(playerid, "Mobile"), "Speaker") == 1) ProxDetector(20.0, GetPVarInt(playerid, "Mobile"), string, COLOR_FADE);
						else SendClientMessage(GetPVarInt(playerid, "Mobile"), COLOR_YELLOW, string);
				    }
				}
		        return 0;
		    }
		    if(PlayerInfo[playerid][pLiveOffer][0] == 1 && GetPVarInt(playerid, "Dead") == 0)
			{
			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		        GiveNameSpace(sendername);
				if(GetPVarInt(playerid, "Member") == 4) format(string, sizeof(string), "* [San News] %s: %s *", sendername, text);
				else format(string, sizeof(string), "* [News Guest] %s: %s *", sendername, text);
			    SendNewsMessage(0xFFA04296, string);
			    return 0;
			}
			if(PlayerInfo[playerid][pLiveOffer][1] == 1 && GetPVarInt(playerid, "Dead") == 0)
			{
			    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		        GiveNameSpace(sendername);
				if(GetPVarInt(playerid, "Member") == 3) format(string, sizeof(string), "* [RLS] %s: %s *", sendername, text);
				else format(string, sizeof(string), "* [RLS Guest] %s: %s *", sendername, text);
			    SendRadioMessage(0xFFA04296, string);
			    return 0;
			}
		    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		    GiveNameSpace(sendername);
    	    if(GetPVarInt(playerid, "Dead") != 0)
    	    {
    	        format(string, sizeof(string), "%s says[LOW]: %s", sendername, text);
			    ProxDetector(5.0, playerid, string, COLOR_GREY);
    	    }
    	    else
    	    {
    	        format(string, sizeof(string), "%s %s: %s", sendername, PrintPrefix(playerid), text);
    	        new type = 0;
    	        if (IsPlayerInAnyVehicle(playerid) && IsAWindowCar(playerid))
                {
                    switch(VehicleInfo[GetPlayerVehicleID(playerid)][vWindows])
			        {
                        case 0:
                        {
                            format(string, sizeof(string), "[Windows Shut]: %s %s: %s", sendername, PrintPrefix(playerid), text);
                            type=1;
                        }
                        case 1: format(string, sizeof(string), "[Windows Open]: %s %s: %s", sendername, PrintPrefix(playerid), text);
                    }
                }
				if(type == 0) ProxDetector(30.0, playerid, string, COLOR_FADE), SetPlayerChatBubble(playerid, string, COLOR_WHITE, 10.0, strlen(text)*100);
				else
				{
				    foreach(new i : Player)
		            {
		                if(GetPVarInt(i, "PlayerLogged") == 1 && IsPlayerInAnyVehicle(i))
		                {
				            if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
				            {
				                SendClientMessage(i,  0xF0F0F096, string);
				            }
		                }
		            }
				}
				if((GetPVarInt(playerid, "Cuffed") == 0) && chatanim[playerid] == 1 && GetPVarInt(playerid, "AnimUse") == 0 && PlayerInfo[playerid][pFishing] != 1)
				{
    	            switch(GetPVarInt(playerid, "ChatStyle"))
   	                {
    	                case 0: ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,0,1,1,1,1);
                        case 1: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 3.1,0,1,1,1,1);
                        case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 3.1,0,1,1,1,1);
                        case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkC", 3.1,0,1,1,1,1);
                        case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 3.1,0,1,1,1,1);
                        case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 3.1,0,1,1,1,1);
                        case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 3.1,0,1,1,1,1);
                        case 7: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 3.1,0,1,1,1,1);
                        case 8: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 3.1,0,1,1,1,1);
   	                }
   	                new time=strlen(text)*100;
    	            SetTimerEx("StopTalking",time,0,"i",playerid);
    	        }
			}
    	    return 0;
    	}
    	else
    	{
			SendClientMessage(playerid,COLOR_LIGHTRED,"You are either dead/un-logged/muted and cannot use this!");
    	    return 0;
    	}
	}
	return 1;
}
//============================================//
stock GiveInvItem(playerid, itemid, quantity, ex1=0, serial=0) {
	for(new i = 0; i < MAX_INV_SLOTS; i++) {
		if(PlayerInfo[playerid][pInvItem][i] == 0) {
			PlayerInfo[playerid][pInvItem][i]=itemid;
			PlayerInfo[playerid][pInvQ][i]=quantity;
			PlayerInfo[playerid][pInvEx][i]=ex1;
			PlayerInfo[playerid][pInvS][i]=serial;

			CallRemoteFunction("LoadHolsters","i",playerid);
			CallRemoteFunction("OnPlayerDataSave","i",playerid);
			return i; //Return the slot we stored it in.
		}
	}
	return -1;
}
//============================================//
public PrintInv(playerid)
{
	new result[2048];

	FixInv(playerid);

    for(new i = 0; i < MAX_INV_SLOTS; i++) {
		switch(PlayerInfo[playerid][pInvItem][i])
		{
			case 0: 
			{
				format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
			}
			case 22 .. 38:
			{
				if(PlayerInfo[playerid][pInvQ][i] == 0) { format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i])); }
				else { format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i], PrintIName(PlayerInfo[playerid][pInvEx][i])); }
			}
			case 100 .. 199:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
			}
			case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%dlbs)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvEx][i]);
			}
			case 500 .. 549:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
			}
			case 1000 .. 1001:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
			}
			case 1008:
			{
				if(PlayerInfo[playerid][pInvQ][i] > 0) {
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [%s{FFFFFF}]{33FF66} (%dL)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), FuelName(PlayerInfo[playerid][pInvEx][i]), PlayerInfo[playerid][pInvQ][i]);
				} else format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [{BF0127}Empty{FFFFFF}]", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]));
			}
			case 1050 .. 1100:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
			}
			default:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]));
			}
	    }
	}
	if(PlayerInfo[playerid][pPlayerWeapon] >= 1) format(result, sizeof(result), "%s\n%d: {33FF66}STORE WEAPON", result, MAX_INV_SLOTS+1);
	if(PlayerInfo[playerid][pPlayerWeapon] >= 1) format(result, sizeof(result), "%s\n%d: {33FF66}DROP WEAPON", result, MAX_INV_SLOTS+2);
	if(PlayerInfo[playerid][pPlayerWeapon] >= 22 && PlayerInfo[playerid][pPlayerWeapon] <= 34)
	{
	    if(PlayerInfo[playerid][pPlayerAmmo] > 0) format(result, sizeof(result), "%s\n%d: {33FF66}STORE AMMUNITION", result, MAX_INV_SLOTS+3);
	}
	new str[46];
	format(str, 46, "Player Inventory | Materials %d", PlayerInfo[playerid][pMaterials]);
	ShowPlayerDialog(playerid, 30, DIALOG_STYLE_LIST, str, result, "Select", "Close");
	return true;
}

forward PrintInvO(playerid, forplayer);
public PrintInvO(playerid, forplayer)
{
	new string[128], result[2048];
    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		switch(PlayerInfo[playerid][pInvItem][i])
		{
			case 0:
			{
				format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
			}
			case 22 .. 38:
			{
				if(PlayerInfo[playerid][pInvQ][i] == 0) { format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i])); }
				else { format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i], PrintIName(PlayerInfo[playerid][pInvEx][i])); }
			}
			case 100 .. 199:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
			}
			case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%dlbs)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvEx][i]);
			}
			case 500 .. 549:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
			}
			case 1000 .. 1001:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
			}
			case 1008:
			{
				if(PlayerInfo[playerid][pInvQ][i] > 0) {
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [%s{FFFFFF}]{33FF66} (%dL)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), FuelName(PlayerInfo[playerid][pInvEx][i]), PlayerInfo[playerid][pInvQ][i]);
				} else format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [{BF0127}Empty{FFFFFF}]", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]));
			}
			case 1050 .. 1100:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvQ][i]);
			}
			default:
			{
				format(result, sizeof(result), "%s\n%d: {FFFFFF}%s", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]));
			}
		}
	}
	format(string, sizeof(string), "Player Inventory: Cash: %s", FormatMoney(GetPVarInt(playerid, "Cash")));
	ShowPlayerDialog(forplayer, 999, DIALOG_STYLE_LIST, string, result, "Close", "Close");
	return true;
}
//============================================//
stock EnableUCP(playerid,type) //UCPRelated
{
	if(GetPVarInt(playerid, "PlayerLogged") == 0) return SendClientMessage(playerid, COLOR_WHITE, "You must be logged in to use this.");
	SetPVarInt(playerid,"UCPMode",type);
	if(GetPVarInt(playerid,"Admin") > 0)
	{
		ShowPlayerDialog(playerid,423,DIALOG_STYLE_LIST,"User Control Panel", "Player Options\nSettings\nFaction Options\nStaff Options\nAdmin Options", "Select", "Exit");
	}
	else if(GetPVarInt(playerid,"Reg") > 0 || GetPVarInt(playerid,"Helper") > 0)
	{
		ShowPlayerDialog(playerid,423,DIALOG_STYLE_LIST,"User Control Panel", "Player Options\nSettings\nFaction Options\nStaff Options", "Select", "Exit");
	}
	else
	{
		ShowPlayerDialog(playerid,423,DIALOG_STYLE_LIST,"User Control Panel", "Player Options\nSettings\nFaction Options", "Select", "Exit");
	}
	return 1;
}
//============================================//
forward PrintVehInv(playerid, key);
public PrintVehInv(playerid, key)
{
	new result[724];
    if(key == -1) return 1; // Invalid vehicleid.
	if(IsInvalidVeh(key)) return 1;
	if(VehicleInfo[key][vType] == VEHICLE_PERSONAL && VehicleInfo[key][vTrunk] != 1) return 1;
    if(VehicleInfo[key][vType] == VEHICLE_PERSONAL || VehicleInfo[key][vType] == VEHICLE_LSPD)
    {
		new p = DEFAULT_VEHICLE_SLOTS;
		if(IsHelmetCar(key))
		{
			p = SMALL_VEHICLE_SLOTS;
		}
		else if(IsVehicleSUV(key))
		{
			 p = MAX_VEH_SLOTS;
		}
	    for(new i = 0; i < p; i++)
		{
			if(VehicleInfo[key][vInvID][i] > 0)
			{
				switch(VehicleInfo[key][vInvID][i])
				{
					case 22 .. 38:
					{
						if(VehicleInfo[key][vInvQ][i] == 0) { format(result, 724, "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i, PrintIName(VehicleInfo[key][vInvID][i])); }
						else { format(result, 724, "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i], PrintIName(VehicleInfo[key][vInvE][i])); }
					}
					case 100 .. 199:
					{
						format(result, 724, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
					}
					case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
					{
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%dlbs)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvE][i]);
					}
					case 500 .. 549:
					{
						format(result, 724, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
					}
					case 1000 .. 1001:
					{
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
					}
					case 1008:
					{
						if(VehicleInfo[key][vInvQ][i] > 0) {
							format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [%s{FFFFFF}]{33FF66} (%dL)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), FuelName(VehicleInfo[key][vInvE][i]), VehicleInfo[key][vInvQ][i]);
						} else format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [{BF0127}Empty{FFFFFF}]", result, i, PrintIName(VehicleInfo[key][vInvID][i]));
					}
					case 1050 .. 1100:
					{
						format(result, 724, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
					}
					default:
					{
						format(result, 724, "%s\n%d: {FFFFFF}%s", result, i, PrintIName(VehicleInfo[key][vInvID][i]));
					}
				}
			}
			else
			{
				format(result, 724, "%s\n%d: EMPTY SLOT", result, i);
			}
		}
		new str[44];
		format(str, sizeof(str), "Vehicle Trunk | Materials: %d.", VehicleInfo[key][vMats]);
		ShowPlayerDialog(playerid, 203, DIALOG_STYLE_LIST, str, result, "Take", "Close");
		if(VehicleInfo[key][vCorp] > 0 && CorpInfo[VehicleInfo[key][vCorp]][cUsed] == 1) scm(playerid, COLOR_LIGHTRED, "There's a corpse inside the trunk.");
	}
	return true;
}

forward PrintVehInvEx(playerid, key);
public PrintVehInvEx(playerid, key)
{
	new result[724];
    if(VehicleInfo[key][vType] == VEHICLE_PERSONAL || VehicleInfo[key][vType] == VEHICLE_LSPD)
    {
		new p = DEFAULT_VEHICLE_SLOTS;
		if(IsHelmetCar(key))
		{
			p = SMALL_VEHICLE_SLOTS;
		}
		else if(IsVehicleSUV(key))
		{
			 p = MAX_VEH_SLOTS;
		}
	    for(new i = 0; i < p; i++)
		{
			if(VehicleInfo[key][vInvID][i] > 0)
			{
				switch(VehicleInfo[key][vInvID][i])
				{
					case 22 .. 38:
					{
						if(VehicleInfo[key][vInvQ][i] == 0) { format(result, 724, "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i, PrintIName(VehicleInfo[key][vInvID][i])); }
						else { format(result, 724, "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i], PrintIName(VehicleInfo[key][vInvE][i])); }
					}
					case 100 .. 199:
					{
						format(result, 724, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
					}
					case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
					{
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%dlbs)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvE][i]);
					}
					case 500 .. 549:
					{
						format(result, 724, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
					}
					case 1000 .. 1001:
					{
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
					}
					case 1008:
					{
						if(VehicleInfo[key][vInvQ][i] > 0) {
							format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [%s{FFFFFF}]{33FF66} (%dL)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), FuelName(VehicleInfo[key][vInvE][i]), VehicleInfo[key][vInvQ][i]);
						} else format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [{BF0127}Empty{FFFFFF}]", result, i, PrintIName(VehicleInfo[key][vInvID][i]));
					}
					case 1050 .. 1100:
					{
						format(result, 724, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vInvID][i]), VehicleInfo[key][vInvQ][i]);
					}
					default:
					{
						format(result, 724, "%s\n%d: {FFFFFF}%s", result, i, PrintIName(VehicleInfo[key][vInvID][i]));
					}
				}
			}
			else
			{
				format(result, 724, "%s\n%d: EMPTY SLOT", result, i);
			}
		}
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Vehicle Inventory", result, "Close", "");
		if(VehicleInfo[key][vCorp] > 0 && CorpInfo[VehicleInfo[key][vCorp]][cUsed] == 1) scm(playerid, COLOR_LIGHTRED, "There's a corpse inside the trunk.");
	}
	return true;
}
//============================================//
forward PrintVehGB(playerid, key);
public PrintVehGB(playerid, key)
{
	new result[284];
    if(key == -1) return 1; // Invalid vehicleid.
	if(IsInvalidVeh(key)) return 1;
	if(VehicleInfo[key][vType] != VEHICLE_PERSONAL || IsHelmetCar(key)) return 1;
 
	for(new i = 0; i < MAX_GLOVEBOX_SLOTS; i++)
	{
		if(VehicleInfo[key][vGBID][i] > 0)
		{
			switch(VehicleInfo[key][vGBID][i])
			{
				case 22 .. 38:
				{
					if(VehicleInfo[key][vGBQ][i] == 0) { format(result, 284, "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i, PrintIName(VehicleInfo[key][vGBID][i])); }
					else { format(result, 284, "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i, PrintIName(VehicleInfo[key][vGBID][i]), VehicleInfo[key][vGBQ][i], PrintIName(VehicleInfo[key][vGBE][i])); }
				}
				case 100 .. 199:
				{
					format(result, 284, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vGBID][i]), VehicleInfo[key][vGBQ][i]);
				}
				case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%dlbs)", result, i, PrintIName(VehicleInfo[key][vGBID][i]), VehicleInfo[key][vGBE][i]);
				}
				case 500 .. 549:
				{
					format(result, 284, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vGBID][i]), VehicleInfo[key][vGBQ][i]);
				}
				case 1000 .. 1001:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vGBID][i]), VehicleInfo[key][vGBQ][i]);
				}
				case 1008:
				{
					if(VehicleInfo[key][vGBQ][i] > 0) {
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [%s{FFFFFF}]{33FF66} (%dL)", result, i, PrintIName(VehicleInfo[key][vGBID][i]), FuelName(VehicleInfo[key][vGBE][i]), VehicleInfo[key][vGBQ][i]);
					} else format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [{BF0127}Empty{FFFFFF}]", result, i, PrintIName(VehicleInfo[key][vGBID][i]));
				}
				case 1050 .. 1100:
				{
					format(result, 284, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(VehicleInfo[key][vGBID][i]), VehicleInfo[key][vGBQ][i]);
				}
				default:
				{
					format(result, 284, "%s\n%d: {FFFFFF}%s", result, i, PrintIName(VehicleInfo[key][vGBID][i]));
				}
			}
		}
		else
		{
			format(result, 284, "%s\n%d: EMPTY SLOT", result, i);
		}
	}
	ShowPlayerDialog(playerid, 556, DIALOG_STYLE_LIST, "Vehicle Glovebox", result, "Take", "Close");
	return true;
}
//============================================//
forward PrintHouseInv(playerid);
public PrintHouseInv(playerid)
{
	new result[1024];
	new hid = GetPVarInt(playerid, "HouseEnter");
	if(hid == 0) return 1;
	if(GetPlayerVirtualWorld(playerid) != hid) return 1;
	if(!GetCloseHouseSafe(playerid, hid)) return 1;
    for(new i = 0; i < MAX_HOUSE_SLOTS; i++)
	{
		if(HouseInfo[hid][hInvID][i] > 0)
		{
			switch(HouseInfo[hid][hInvID][i])
			{
				case 22 .. 38:
				{
					if(HouseInfo[hid][hInvQ][i] == 0) { format(result, 1024, "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i, PrintIName(HouseInfo[hid][hInvID][i])); }
					else { format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i], PrintIName(HouseInfo[hid][hInvE][i])); }
				}
				case 100 .. 199:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
				}
				case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%dlbs)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvE][i]);
				}
				case 500 .. 549:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
				}
				case 1000 .. 1001:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
				}
				case 1008:
				{
					if(HouseInfo[hid][hInvQ][i] > 0) {
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [%s{FFFFFF}]{33FF66} (%dL)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), FuelName(HouseInfo[hid][hInvE][i]), HouseInfo[hid][hInvQ][i]);
					} else format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [{BF0127}Empty{FFFFFF}]", result, i, PrintIName(HouseInfo[hid][hInvID][i]));
				}
				case 1050 .. 1100:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
				}
				default:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s", result, i, PrintIName(HouseInfo[hid][hInvID][i]));
				}
			}
		}
		else
		{
			format(result, 1024, "%s\n%d: EMPTY SLOT", result, i);
		}
	}
	new string[128];
	format(string, 128, "Property Inventory - Cash $%d - Materials %d", HouseInfo[hid][hBank], HouseInfo[hid][hMats]);
	ShowPlayerDialog(playerid, 202, DIALOG_STYLE_LIST, string, result, "Take", "Close");
	return true;
}

forward PrintHouseInvEx(playerid, hid);
public PrintHouseInvEx(playerid, hid)
{
	new result[1024];
	for(new i = 0; i < MAX_HOUSE_SLOTS; i++) {
		if(HouseInfo[hid][hInvID][i] > 0) {
			switch(HouseInfo[hid][hInvID][i])
			{
				case 22 .. 38:
				{
					if(HouseInfo[hid][hInvQ][i] == 0) { format(result, 1024, "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i, PrintIName(HouseInfo[hid][hInvID][i])); }
					else { format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i], PrintIName(HouseInfo[hid][hInvE][i])); }
				}
				case 100 .. 199:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
				}
				case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%dlbs)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvE][i]);
				}
				case 500 .. 549:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
				}
				case 1000 .. 1001:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
				}
				case 1008:
				{
					if(HouseInfo[hid][hInvQ][i] > 0) {
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [%s{FFFFFF}]{33FF66} (%dL)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), FuelName(HouseInfo[hid][hInvE][i]), HouseInfo[hid][hInvQ][i]);
					} else format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [{BF0127}Empty{FFFFFF}]", result, i, PrintIName(HouseInfo[hid][hInvID][i]));
				}
				case 1050 .. 1100:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(HouseInfo[hid][hInvID][i]), HouseInfo[hid][hInvQ][i]);
				}
				default:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s", result, i, PrintIName(HouseInfo[hid][hInvID][i]));
				}
			}
		}
		else
		{
			format(result, 1024, "%s\n%d: EMPTY SLOT", result, i);
		}
	}
	new string[128];
	format(string, 128, "Property Inventory - Cash $%d - Materials %d", HouseInfo[hid][hBank], HouseInfo[hid][hMats]);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, string, result, "Close", "");
	return true;
}
//============================================//
forward PrintBizInv(playerid);
public PrintBizInv(playerid)
{
	new result[1024], string[128];
	new id = GetPVarInt(playerid, "BizzEnter");
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi])) return 1;
	if(GetPlayerVirtualWorld(playerid) != id) return 1;
	if(!GetCloseBizzSafe(playerid, id)) return 1;
    for(new i = 0; i < MAX_HOUSE_SLOTS; i++)
	{
		if(BizInfo[id][InvID][i] > 0)
		{
			switch(BizInfo[id][InvID][i])
			{
				case 22 .. 38:
				{
					if(BizInfo[id][InvQ][i] == 0) { format(result, 1024, "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i, PrintIName(BizInfo[id][InvID][i])); }
					else { format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i], PrintIName(BizInfo[id][InvE][i])); }
				}
				case 100 .. 199:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
				}
				case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%dlbs)", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvE][i]);
				}
				case 500 .. 549:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
				}
				case 1000 .. 1001:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
				}
				case 1008:
				{
					if(BizInfo[id][InvQ][i] > 0) {
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [%s{FFFFFF}]{33FF66} (%dL)", result, i, PrintIName(BizInfo[id][InvID][i]), FuelName(BizInfo[id][InvE][i]), BizInfo[id][InvQ][i]);
					} else format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [{BF0127}Empty{FFFFFF}]", result, i, PrintIName(BizInfo[id][InvID][i]));
				}
				case 1050 .. 1100:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
				}
				default:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s", result, i, PrintIName(BizInfo[id][InvID][i]));
				}
			}
		}
		else
		{
			format(result, 1024, "%s\n%d: EMPTY SLOT", result, i);
		}
	}
	format(string, 128, "Business Inventory - Cash $%d", BizInfo[id][Bank]);
	ShowPlayerDialog(playerid, 201, DIALOG_STYLE_LIST, string, result, "Take", "Close");
	return true;
}
//============================================//
forward PrintBizInvEx(playerid, id);
public PrintBizInvEx(playerid, id)
{
	new result[1024];
    for(new i = 0; i < MAX_HOUSE_SLOTS; i++) {
		if(BizInfo[id][InvID][i] > 0) {
			switch(BizInfo[id][InvID][i])
			{
				case 22 .. 38:
				{
					if(BizInfo[id][InvQ][i] == 0) { format(result, 1024, "%s\n%d: {FFFFFF}%s {FF3333}(EMPTY)", result, i, PrintIName(BizInfo[id][InvID][i])); }
					else { format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d){FFFFFF}:{33FF66}[%s]", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i], PrintIName(BizInfo[id][InvE][i])); }
				}
				case 100 .. 199:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
				}
				case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%dlbs)", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvE][i]);
				}
				case 500 .. 549:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
				}
				case 1000 .. 1001:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
				}
				case 1008:
				{
					if(BizInfo[id][InvQ][i] > 0) {
						format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [%s{FFFFFF}]{33FF66} (%dL)", result, i, PrintIName(BizInfo[id][InvID][i]), FuelName(BizInfo[id][InvE][i]), BizInfo[id][InvQ][i]);
					} else format(result, sizeof(result), "%s\n%d: {FFFFFF}%s [{BF0127}Empty{FFFFFF}]", result, i, PrintIName(BizInfo[id][InvID][i]));
				}
				case 1050 .. 1100:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s {33FF66}(%d)", result, i, PrintIName(BizInfo[id][InvID][i]), BizInfo[id][InvQ][i]);
				}
				default:
				{
					format(result, 1024, "%s\n%d: {FFFFFF}%s", result, i, PrintIName(BizInfo[id][InvID][i]));
				}
			}
		}
		else
		{
			format(result, 1024, "%s\n%d: EMPTY SLOT", result, i);
		}
	}
	new string[128];
	format(string, 128, "Business Inventory - Cash $%d", BizInfo[id][Bank]);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, string, result, "Close", "");
	return true;
}
//============================================//
public FixInv(playerid) {
	PlayerInfo[playerid][pDelay]=1;
	new lastPrim = PlayerInfo[playerid][pLastPrim], lastSec = PlayerInfo[playerid][pLastSec], lastMelee = PlayerInfo[playerid][pLastMelee];
	for(new i = 0; i < MAX_INV_SLOTS; i++) {
		if(PlayerInfo[playerid][pInvItem][i] == 0 && i != (MAX_INV_SLOTS - 1)) {
			new i2 = i + 1;
			PlayerInfo[playerid][pInvItem][i] = PlayerInfo[playerid][pInvItem][i2];
			PlayerInfo[playerid][pInvQ][i] = PlayerInfo[playerid][pInvQ][i2];
			PlayerInfo[playerid][pInvEx][i] = PlayerInfo[playerid][pInvEx][i2];

			PlayerInfo[playerid][pInvItem][i2] = 0;
			PlayerInfo[playerid][pInvQ][i2] = 0;
			PlayerInfo[playerid][pInvEx][i2] = 0;

			if(lastPrim == i2) { 
				PlayerInfo[playerid][pLastPrim] = i;
				new query[82];
				mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET LastPrim=%d WHERE Name='%s'", PlayerInfo[playerid][pLastPrim], PlayerInfo[playerid][pUsername]);
				mysql_tquery(handlesql, query);			
			} else if(lastSec == i2) {
				PlayerInfo[playerid][pLastSec] = i;
				new query[80];
				mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET LastSec=%d WHERE Name='%s'", PlayerInfo[playerid][pLastSec], PlayerInfo[playerid][pUsername]);
				mysql_tquery(handlesql, query);		
			} else if(lastMelee == i2) {
				PlayerInfo[playerid][pLastMelee] = i;
				new query[82];
				mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET LastMelee=%d WHERE Name='%s'", PlayerInfo[playerid][pLastMelee], PlayerInfo[playerid][pUsername]);
				mysql_tquery(handlesql, query);		
			}			
		}
	}
	PlayerInfo[playerid][pDelay]=0;
	return 1;
}
//============================================//
stock CheckInv(playerid)
{
    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] == 0) {
		    return 1;
	    }
	}
	return 0;
}
//============================================//
stock CheckInvItem(playerid, itemid)
{
    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] == itemid) {
			if(PlayerInfo[playerid][pInvQ][i] != 0) {
				return PlayerInfo[playerid][pInvQ][i];
			} else return 1;
		}
	}
	return 0;
}
//============================================//
stock HasInvItem(playerid, itemid, count=0)
{
    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] == itemid) {
			if(PlayerInfo[playerid][pInvQ][i] >= count) {
				return i;
			} else return -1;
		}
	}
	return -1;
}
//============================================//
stock CheckInvItemID(playerid, itemid) //Counts the total amount of a specific item in your inv, all stacks taken into consideration.
{
	new count = 0;
    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] == itemid) {
			if(PlayerInfo[playerid][pInvQ][i] != 0) {
				count = count + PlayerInfo[playerid][pInvQ][i];
			} else count++;
		}
	}
	return count;
}
//============================================//
stock ClearInvWeapons(playerid)
{
	for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem] != 0 && PlayerInfo[playerid][pInvItem][i] < 200)
		{
			RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][i]);
		}
	}
	return true;
}
//============================================//
stock RemoveInvItem(playerid, itemid, amount = 0, slot = -1)
{
	if(slot == -1) {
		for(new i = 0; i < MAX_INV_SLOTS; i++) {
			if(PlayerInfo[playerid][pInvItem][i] == itemid) {
				if(amount == 0) {
					PlayerInfo[playerid][pInvItem][i] = 0;
					PlayerInfo[playerid][pInvQ][i] = 0;
					PlayerInfo[playerid][pInvEx][i] = 0;
				} else {
					if(PlayerInfo[playerid][pInvQ][i] > 1) {
						PlayerInfo[playerid][pInvQ][i] = PlayerInfo[playerid][pInvQ][i] - amount;
						if(PlayerInfo[playerid][pInvQ][i] < 1) {
							PlayerInfo[playerid][pInvItem][i] = 0;
							PlayerInfo[playerid][pInvQ][i] = 0;
							PlayerInfo[playerid][pInvEx][i] = 0;
						}
					} else {
						PlayerInfo[playerid][pInvItem][i] = 0;
						PlayerInfo[playerid][pInvQ][i] = 0;
						PlayerInfo[playerid][pInvEx][i] = 0;}
				}

				FixInv(playerid);
				LoadHolsters(playerid);
				CallRemoteFunction("OnPlayerDataSave","i",playerid);
				return 1; }
		}
	} else if(PlayerInfo[playerid][pInvItem][slot] == itemid) {
		if(amount == 0) {
			PlayerInfo[playerid][pInvItem][slot] = 0;
			PlayerInfo[playerid][pInvQ][slot] = 0;
			PlayerInfo[playerid][pInvEx][slot] = 0;
		} else {
			if(PlayerInfo[playerid][pInvQ][slot] > 1) {
				PlayerInfo[playerid][pInvQ][slot] = PlayerInfo[playerid][pInvQ][slot] - amount;
				if(PlayerInfo[playerid][pInvQ][slot] < 1) {
					PlayerInfo[playerid][pInvItem][slot] = 0;
					PlayerInfo[playerid][pInvQ][slot] = 0;
					PlayerInfo[playerid][pInvEx][slot] = 0;
				}
			} else {
				PlayerInfo[playerid][pInvItem][slot] = 0;
				PlayerInfo[playerid][pInvQ][slot] = 0;
				PlayerInfo[playerid][pInvEx][slot] = 0;}
		}

		FixInv(playerid);
		LoadHolsters(playerid);
		CallRemoteFunction("OnPlayerDataSave","i",playerid);
		return 1;	
	}
	return 0;
}
//============================================//
stock RemoveAllItem(playerid, itemid)
{
	for(new i = 0; i < MAX_INV_SLOTS; i++) {
		if(PlayerInfo[playerid][pInvItem][i] == itemid) {
			PlayerInfo[playerid][pInvItem][i] = 0;
			PlayerInfo[playerid][pInvQ][i] = 0;
			PlayerInfo[playerid][pInvEx][i] = 0;
			FixInv(playerid);
		}
	}
	LoadHolsters(playerid);
	CallRemoteFunction("OnPlayerDataSave","i",playerid);
	return 0;
}
//============================================//
stock PrimaryWeapon(playerid)
{
	new found = 0;
	if(CheckInvItem(playerid, 25)) found = 1;
	if(CheckInvItem(playerid, 26)) found = 1;
	if(CheckInvItem(playerid, 28)) found = 1;
	if(CheckInvItem(playerid, 29)) found = 1;
	if(CheckInvItem(playerid, 30)) found = 1;
	if(CheckInvItem(playerid, 31)) found = 1;
	if(CheckInvItem(playerid, 32)) found = 1;
	if(CheckInvItem(playerid, 33)) found = 1;
	if(CheckInvItem(playerid, 34)) found = 1;
	//==========//
	switch(PlayerInfo[playerid][pPlayerWeapon])
	{
	    case 25 .. 34:
	    {
	        found = 1;
	    }
	}
	//==========//
	return found;
}
//============================================//
stock IsPrimary(id)
{
	new found = 0;
	switch(id)
	{
	    case 25 .. 34:
	    {
	        found = 1;
	    }
	}
	return found;
}
//============================================//
stock SecondWeapon(playerid)
{
	new found = 0;
	if(CheckInvItem(playerid, 22)) found = 1;
	if(CheckInvItem(playerid, 23)) found = 1;
	if(CheckInvItem(playerid, 24)) found = 1;
	//==========//
	switch(PlayerInfo[playerid][pPlayerWeapon])
	{
	    case 22 .. 24:
	    {
	        found = 1;
	    }
	}
	//==========//
	return found;
}
//============================================//
stock IsSecond(id)
{
	new found = 0;
	switch(id)
	{
	    case 22 .. 24:
	    {
	        found = 1;
	    }
	}
	return found;
}
//============================================//
stock PrintIName(InvItem)
{
	new result[128], found = 0;
	result="NULL";
	for(new i = 0; i < 500; i++)
	{
	    if(ItemIDs[i][ItemID] == InvItem && found == 0)
	    {
	        format(result, 128, "%s", ItemIDs[i][Name]);
	        found++;
	    }
	}
	return result;
}
//============================================//
stock PrintIid(InvItem)
{
	new result, found = 0;
    for(new i = 0; i < sizeof(ItemIDs); i++)
	{
	    if(ItemIDs[i][ItemID] == InvItem && found == 0)
	    {
	        result=ItemIDs[i][ObjectID];
	        found++;
	    }
	}
	return result;
}
//============================================//
stock PrintIQ(InvItem) {
    for(new i = 0; i < sizeof(ItemIDs); i++) {
	    if(ItemIDs[i][ItemID] == InvItem) {
	        return ItemIDs[i][Q];
	    }
	}
	
	return 0;
}
//============================================//
stock CompatAmmo(playerid, id)
{
	new result = 0;
	if(id >= 100 && id <= 199) {
        switch(PlayerInfo[playerid][pPlayerWeapon])
	    {
	        case 22, 23: {
			if(id == 100 || id == 101) result++; }
	        case 24: {
	        if(id == 106 || id == 107) result++; }
	        case 25, 26: {
	        if(id >= 110 && id <= 113) result++; }
            case 28, 29: {
	        if(id == 115 || id == 116) result++; }
	        case 30: {
	        if(id == 120 || id == 122 || id == 126) result++; }
	        case 31: {
	        if(id == 121 || id == 123 || id == 127 || id == 128) result++; }
	        case 32: {
	        if(id == 115 || id == 116) result++; }
	        case 33, 34: {
	        if(id == 125) result++; }
	    }
	}
	return result;
}
//============================================//
stock WoundWeapon(weaponid)
{
	if(weaponid == 4) return true;
	else if(weaponid == 9) return true;
	else if(weaponid >= 22 && weaponid <= 34) return true;
	return false;
}
//============================================//
stock SendAdminAndRegMessage(color,string[])
{
    foreach(new i : Player)
    {
		if(GetPVarInt(i, "Admin") > 0 || GetPVarInt(i, "Reg") > 0)
		{
		    SendClientMessage(i,color,string);
		}
    }
    return 1;
}
//============================================//
stock AbleToUsePNS(playerid)
{
    if(GetPVarInt(playerid, "Member") == 1) return true;
	if(GetPVarInt(playerid, "Member") == 2) return true;
	if(GetPVarInt(playerid, "Member") == 8) return true;
	if(GetPVarInt(playerid, "MonthDon") > 0) return true;
	if(GetPVarInt(playerid, "PaintUse") <= 1) return true;
	return false;
}
//============================================//
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    if(GetPVarInt(playerid, "PlayerLogged") == 0 && GetPVarInt(playerid, "Dead") != 0) return 1;
	new Float:health, Float:armour;
	GetPlayerHealth(playerid,health);
	GetPlayerArmour(playerid,armour);
	if(GetPVarInt(playerid, "rappelling") == 1 && weaponid == 54) { //Disable rappelling fall damage.
		SetPlayerArmourEx(playerid,armour);
		SetPlayerHealth(playerid, health);	
		return false;
	}
	if(GetPVarInt(issuerid, "LSPD_Ta") == 0) CallRemoteFunction("ShowBlood", "i", playerid);
	if(IsPlayerConnected(issuerid))
    {
        new damage = 0, string[128], Float:amoun, Float:distance = 0.9, Float:radius, feet, Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		// KO System
		if(weaponid <= 15 && GetPVarInt(playerid, "Dead") == 5)
		{
			SetPlayerHealth(playerid, 99);
			return 1;
		}	
		//==========//
        if(weaponid == 23 && GetPVarInt(issuerid, "LSPD_Ta") == 1 // Tazer System
		&& GetPVarInt(playerid, "Dead") == 0 && GetPVarInt(playerid, "Cuffed") == 0
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT  && !IsPlayerInRangeOfPoint(issuerid,0.9,x,y,z))
		{
		    if(GetPlayerWeapon(playerid) >= 22 && GetPlayerWeapon(playerid) <= 38) return SendClientMessage(issuerid,COLOR_GREY,"Cannot Taze someone with a weapon in hand."),SetPlayerHealth(playerid,health);
		    if(GetPVarInt(issuerid, "LSPD_Delay") > GetCount()) return SetPlayerArmedWeapon(playerid, 0), SendClientMessage(issuerid,COLOR_WHITE,"You must wait for your tazer to reload."), SetPlayerHealth(playerid,health);
		    if(!IsPlayerInRangeOfPoint(issuerid,35.0,x,y,z)) return SendClientMessage(issuerid,COLOR_GREY,"You are too far from the player your shooting at.");
			new sendername[MAX_PLAYER_NAME], giveplayer[MAX_PLAYER_NAME];
			format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	        format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(issuerid));
      	    GiveNameSpace(sendername);
            GiveNameSpace(giveplayer);
            format(string, sizeof(string), "*** %s aims %s tazer at %s and fires it.", giveplayer, CheckSex(issuerid), sendername);
            ProxDetector(30.0, issuerid, string, COLOR_PURPLE);
   	        TogglePlayerControllableEx(playerid,false);
    	    SetPVarInt(playerid, "Cuffed", 1);
    	    SetPVarInt(playerid, "CuffedTime", 20);
    	    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
            SetPVarInt(issuerid, "LSPD_Delay",GetCount()+10000);
            SetPlayerArmourEx(playerid,armour);
			GetPlayerHealth(playerid,health);
			if(health < 11.0) SetPlayerHealth(playerid, 10.0);
		    else SetPlayerHealth(playerid,health);
		    return true;
        }
        if(weaponid >= 22 && weaponid <= 38)
	    {
		    SetPVarInt(issuerid, "HitMark", 1);
		    TextDrawHideForPlayer(issuerid, HitMark);
		    TextDrawShowForPlayer(issuerid, HitMark);
		}
		if(weaponid == 41)
		{
		    if(GetPVarInt(playerid, "Blinded") == 0 && GetPVarInt(playerid, "BlackScreen") == 0)
		    {
		        TextDrawShowForPlayer(playerid,BlindDraw);
		        SetTimerEx("EndBlackScreen", 2000, false, "i", playerid);
		        SetPVarInt(playerid, "BlackScreen", 1);
		    }
		    return true;
		}
		if(PlayerInfo[issuerid][pAmmoType] == 113) // BEANBAG
		{
		    if(weaponid == 25 || weaponid == 26)
		    {
		        if(IsPlayerInRangeOfPoint(issuerid, 35.0, x, y, z))
		        {
		            if(GetPVarInt(playerid, "Cuffed") > 0) return true;
		            format(string, sizeof(string),"You shot %s with a bean bag.", PlayerNameEx(playerid));
			        SendClientMessage(issuerid,COLOR_WHITE,string);
			        format(string, sizeof(string),"%s shot you with a bean bag.", PlayerNameEx(issuerid));
			        SendClientMessage(playerid,COLOR_WHITE,string);
			        TogglePlayerControllableEx(playerid,false);
    	            SetPVarInt(playerid, "Cuffed", 1);
    	            SetPVarInt(playerid, "CuffedTime", 60);
    	            ApplyAnimation(playerid, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, -1);
    	            SetPlayerArmourEx(playerid,armour);
    	            if(health < 10.0) SetPlayerHealth(playerid,10.0);
		            else SetPlayerHealth(playerid,health);
		            return true;
		        }
		    }
		}
		if(PlayerInfo[issuerid][pAmmoType] == 128) // RUBBER
		{
		    if(weaponid == 31)
		    {
		        if(IsPlayerInRangeOfPoint(issuerid, 35.0, x, y, z))
		        {
		            if(GetPVarInt(playerid, "Cuffed") > 0) return true;
		            format(string, sizeof(string),"You shot %s with a rubber bullet.", PlayerNameEx(playerid));
			        SendClientMessage(issuerid,COLOR_WHITE,string);
			        format(string, sizeof(string),"%s shot you with a rubber bullet.", PlayerNameEx(issuerid));
			        SendClientMessage(playerid,COLOR_WHITE,string);
			        TogglePlayerControllableEx(playerid,false);
    	            SetPVarInt(playerid, "Cuffed", 1);
    	            SetPVarInt(playerid, "CuffedTime", 10);
    	            ApplyAnimation(playerid, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, -1);
    	            SetPlayerArmourEx(playerid,armour);
    	            if(health < 10.0) SetPlayerHealth(playerid,10.0);
		            else SetPlayerHealth(playerid,health);
		            return true;
		        }
		    }
		}
		if(bodypart == 9) // HEADSHOT !
		{
		    if(armour > 0)
		    {
		        if(armour < 51.0) SetPlayerHealth(playerid, 50.0);
				SetPlayerArmourEx(playerid, 0.0);
		    }
		    else
		    {
				PlayerWound(playerid, 4, 1);
		        SetPlayerHealth(playerid, 0.0), SetPlayerArmourEx(playerid, 0.0);
		    }
		    return true;
		}
		radius = GetPlayerDistanceFromPoint(issuerid, x, y, z);
		feet = floatround(radius);
		switch(weaponid)
		{
			case 2: damage = DAMAGE_GOLFCLUB;
			case 5: damage = DAMAGE_BAT;
			case 6: damage = DAMAGE_SHOVEL;
			case 7: damage = DAMAGE_POOLCUE;
			case 8: damage = DAMAGE_KATANA;
		    case 22: damage = DAMAGE_COLT;
		    case 23: damage = DAMAGE_SILENCER;
		    case 24: damage = DAMAGE_DEAGLE;
		    case 25:
		    {
			    damage = DAMAGE_SHOTGUN;
			    if(feet <= 5.0) damage+=50;
			}
		    case 26:
		    {
			    damage = DAMAGE_SAWNOFF;
			    if(feet <= 5.0) damage+=50;
			}
		    case 28: damage = DAMAGE_UZI;
		    case 29: damage = DAMAGE_MP5;
		    case 30: damage = DAMAGE_AK47;
		    case 31: damage = DAMAGE_M4;
		    case 32: damage = DAMAGE_TEC9;
		    case 33: damage = DAMAGE_RIFLE;
		    case 34: damage = DAMAGE_SNIPER;
		}
		if(PlayerInfo[issuerid][pAmmoType] != 113 && damage != 0 && !IsPlayerInRangeOfPoint(issuerid,distance,x,y,z))
		{
			if(WoundWeapon(weaponid)) {
				switch(bodypart)
				{
					case 3,4: PlayerWound(playerid, 1, 1);
					case 5,6: PlayerWound(playerid, 2, 1);
					case 7,8: PlayerWound(playerid, 3, 1);
				}
			}
		    if(armour > 0)
		    {
		        amoun = armour - damage;
			    if(amoun < 0) return SetPlayerHealth(playerid,health-damage);
			    return SetPlayerArmourEx(playerid,armour-damage);
		    }
		    else return SetPlayerHealth(playerid,health-damage);
		}
		if(weaponid <= 15 && health <= 20.0 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPVarInt(playerid, "Dead") == 0)
		{
		    new rand = random(5);
		    switch(rand)
		    {
		        case 0: ApplyAnimation(playerid, "ped", "FLOOR_hit", 4.0, 0, 1, 1, 1, -1);
		        case 1: ApplyAnimation(playerid, "ped", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, -1);
		        case 2: ApplyAnimation(playerid, "ped", "KO_shot_front", 4.0, 0, 1, 1, 1, -1);
		        case 3: ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1);
		        case 4: ApplyAnimation(playerid, "ped", "BIKE_fall_off", 4.0, 0, 1, 1, 1, -1);
		        default: ApplyAnimation(playerid, "FINALE", "FIN_Land_Die", 4.0, 0, 1, 1, 1, -1);
		    }

		    SetPVarInt(playerid, "Dead", 5);
		    SetPVarInt(playerid, "CrackTime", GetCount() + 60000);

		    SendClientMessage(playerid, COLOR_LIGHTRED, "You have been knocked out. (/getup)");

		    SetPlayerHealth(playerid, 99.0);
		    return 1;
		}
    }
	return true;
}
//============================================//
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(GetPVarInt(playerid, "LSPD_Ta") == 1)
    {
		if(weaponid == 23)
		{
			if(hittype != BULLET_HIT_TYPE_PLAYER)
			{
		    	if(GetPVarInt(playerid, "LSPD_Delay") > GetCount()) return true;
		    	new string[128], sendername[MAX_PLAYER_NAME];
		    	SetPVarInt(playerid, "LSPD_Delay",GetCount()+1500);
		    	SetPlayerArmedWeapon(playerid, 0);
		    	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
      	    	GiveNameSpace(sendername);
		    	format(string, sizeof(string), "*** %s shoots %s taser and misses.", sendername, CheckSex(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
            	scm(playerid, -1, "You must wait a moment before shooting the taser again.");
		    	return true;
		    }
		}
    }
    if(!IsPlayerInAnyVehicle(playerid))
    {
        switch(weaponid)
        {
            case 27, 23, 25, 29, 30, 31, 33, 24, 38:
            {
                if(CheckSpeed(playerid))
                {
                    if(gettime() - GetPVarInt(playerid, "LIT") >= 30) SetPVarInt(playerid, "ABI", 1);
                    else SetPVarInt(playerid, "ABI", GetPVarInt(playerid, "ABI")+1);
                    SetPVarInt(playerid, "LIT", gettime());
                    if(GetPVarInt(playerid, "ABI") >= 3)
                    {
                        DeletePVar(playerid, "ABI");
                        ResetPlayerWeaponsEx(playerid);
                        return 0;
                    }
                }
            }
        }
    }
    if(weaponid != 0 && weaponid == PlayerInfo[playerid][pPlayerWeapon])
    {
	    //==============//
	    if(GetPVarInt(playerid, "HouseEnter") != 0 || GetPVarInt(playerid, "BizzEnter") != 0 || GetPVarInt(playerid, "IntEnter") != 0 || GetPVarInt(playerid, "GarageEnter") != 0)
    	{
    		if(PlayerInfo[playerid][pPlayerWeapon] != 23)
    		{
    			SetPVarInt(playerid, "ShotTime", 60);
    		}
    	}
    	else
    	{
    		if(PlayerInfo[playerid][pPlayerWeapon] == 23)
    		{
    			SetPVarInt(playerid, "ShotTime", 60);
    		}
    		else
    		{
    			SetPVarInt(playerid, "ShotTime", 10);
    		}
    	}
        new sweapon, sammo;
        for (new i = 0; i < 9; i++)
	    {
		    GetPlayerWeaponData(playerid, i, sweapon, sammo);
		    if(sweapon == weaponid)
		    {
		        PlayerInfo[playerid][pPlayerAmmo]=sammo;
		        if(sammo <= 1) {
		            ResetPlayerWeapons(playerid);
		            PlayerInfo[playerid][pPlayerAmmo]=0; }
		        if(sammo <= 1)
		        {
		            ResetPlayerWeapons(playerid);
		            PlayerInfo[playerid][pPlayerAmmo]=0;
					//if(GetPVarInt(playerid, "AutoReload") == 0) SetTimerEx("ReloadWeapon",2000, false, "i", playerid);
     				new ammo, found = 0;
		            for(new wi = 0; wi < MAX_INV_SLOTS; wi++)
		            {
						if(PlayerInfo[playerid][pInvItem][wi] >= 100 && PlayerInfo[playerid][pInvItem][wi] <= 199)
						{
							ammo = CompatAmmo(playerid, PlayerInfo[playerid][pInvItem][wi]);
							if(ammo > 0) {
								found=wi;  
								break;
							}
						}
		            }
		            if(found != 0 && GetPVarInt(playerid, "AutoReload") == 0) {
					GameTextForPlayer(playerid, "Reloading weapon...", 2000, 4);
					SetTimerEx("ReloadWeapon", 2000, false, "i", playerid); }
		        }
		        else
		        {
		            new rac = CompatAmmo(playerid, PlayerInfo[playerid][pAmmoType]), Float:fOPos[3], Float:fHPos[3];
		            if(rac > 0)
		            {
		                GetPlayerPos(playerid, fOPos[0], fOPos[1], fOPos[2]);
		                if(!IsAroundShell(playerid) && GetPVarInt(playerid, "LSPD_Ta") == 0)
		                {
		                    CallRemoteFunction("CreateShell","fffiiii", fOPos[0], fOPos[1], fOPos[2], GetPlayerVirtualWorld(playerid), PlayerInfo[playerid][pAmmoType], GetPlayerInterior(playerid), PlayerInfo[playerid][pSerial]);
		                }
		                switch(PlayerInfo[playerid][pAmmoType])
		                {
		                    case 122, 123: // TRACERS
		                    {
		                        if(GetPVarInt(playerid, "TracerDelay") > GetCount()) return true;
		                        SetPVarInt(playerid, "TracerDelay" , GetCount()+500);
		                        //==========//
		                        new found = 0, foundid = 0;
		                        for(new i2 = 0; i2 < sizeof(Tracers); i2++)
    	                        {
       	                            if(Tracers[i2][tUsed] == 0 && found == 0)
        	                        {
                                        found++;
                                        foundid=i2;
                                    }
                                }
                                if(found == 0) return true;
		                        //==========//
		                        Tracers[foundid][tUsed]=1;
		                        GetPlayerLastShotVectors(playerid, fOPos[0], fOPos[1], fOPos[2], fHPos[0], fHPos[1], fHPos[2]);
		                        Tracers[foundid][tObject]=CreateDynamicObject(18647, fOPos[0], fOPos[1], fOPos[2], 0.0, 0.0, 0.0);
		                        SetObjectFacePoint(Tracers[foundid][tObject], fHPos[0], fHPos[1]);
		                        new Float:Speed = VectorSize(fOPos[0]-fHPos[0], fOPos[1]-fHPos[1], fOPos[2]-fHPos[2])+25.0;
		                        MoveDynamicObject(Tracers[foundid][tObject], fHPos[0], fHPos[1], fHPos[2], Speed);
		                        Streamer_Update(playerid);
		                        //==========//
		                    }
		                }
		                Streamer_Update(playerid);
		            }
		        }
		    }
	    }
    }
    return 1;
}
//============================================//
public OnDynamicObjectMoved(objectid)
{
    new foundid = -1, Float:X, Float:Y, Float:Z;
	for(new i = 0; i < MAX_OBJECTS; i++)
    {
        if(Tracers[i][tUsed] == 1 && objectid == Tracers[i][tObject])
        {
            foundid = i;
			break;
        }
    }
    if(foundid != -1)
    {
        Tracers[foundid][tUsed]=0;
        if(IsValidDynamicObject(Tracers[foundid][tObject])) { DestroyDynamicObject(Tracers[foundid][tObject]); }
        Tracers[foundid][tObject]=0;
    }
    GetDynamicObjectPos(objectid, X, Y, Z);
    if(objectid == medgate1 || objectid == medgate2 || objectid == medgate3 || objectid == medgate4)
    {
        PlaySoundInArea(1154, X, Y, Z, 20.0);
	    if(gatedelay[objectid] == 2) gatedelay[objectid]=0;
    }
    if(objectid == PDdoor) PlaySoundInArea(1154, 1587.95, -1638.22, 6.93, 20.0);
	return true;
}
//============================================//
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new str[128];
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 1616.0746, -1897.0616, 13.5491)) { //Impound lot.
		if(GetPVarInt(playerid, "Member") != 5) {
			CreateLableText(playerid,"Impound Lot"," ~w~type ~r~/v release~w~!");
		} else CreateLableText(playerid,"Impound Lot"," ~w~type ~r~/v release~w~!~n~       ~y~/spawntt!");
		return 1;
	} else if (IsPlayerInRangeOfPoint(playerid, 5, 1652.9574, -1838.5597, 13.5460)) { //Impound spot.
		CreateLableText(playerid,"Impound Lot"," ~w~type ~r~/impound~w~!");
		return 1;
	}
	for(new i=0;i<sizeof(SpikeInfo);i++)
	{
        if(pickupid == SpikeInfo[i][sPickup])
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new panels, doors, lights, tires;
	    	    GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
		        UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, 15);
		        DestroyDynamicPickup(SpikeInfo[i][sPickup]);
		        new id = CreateDynamicPickup(1007, 14, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ], 0);
			    SpikeInfo[i][sPickup] = id;
		    }
		}
	}
    for(new r = 0; r < sizeof(RentalSpot); r++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.5, RentalSpot[r][0], RentalSpot[r][1], RentalSpot[r][2]))
	    {
	        CreateLableText(playerid,"Rental Center"," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to open the menu!");
        }
	}
	for(new h = 0; h < sizeof(BusRoutes); h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0,BusRoutes[h][0], BusRoutes[h][1], BusRoutes[h][2]))
	    {
			new h2 = h+1, Float:distancef, distance;
			switch(h)
			{
			    case 0 .. 16:
			    {
			        distancef=GetVehicleDistanceFromPoint(BotBus, BusRoutes[h][0], BusRoutes[h][1], BusRoutes[h][2]);
			        distance = floatround(distancef);
				    format(str, sizeof(str), " ~b~Current Stop: ~h~~y~%s~n~ ~b~Next Route: ~h~~y~%s~n~ ~y~Bus is ~b~%d ~b~meters away.", GetPlayerArea(playerid), GetZoneArea(BusRoutes[h2][0], BusRoutes[h2][1], BusRoutes[h2][2]), distance);
				}
			    case 17:
			    {
			        distancef=GetVehicleDistanceFromPoint(BotBus, BusRoutes[h][0], BusRoutes[h][1], BusRoutes[h][2]);
			        distance = floatround(distancef);
				    format(str, sizeof(str), " ~b~Current Stop: ~h~~y~%s~n~ ~b~Next Route: ~h~~y~Bus Station~n~ ~y~Bus is ~b~%d ~b~meters away.", GetPlayerArea(playerid), distance);
				}
			    case 18 .. 26:
			    {
			        distancef=GetVehicleDistanceFromPoint(BotBus2, BusRoutes[h][0], BusRoutes[h][1], BusRoutes[h][2]);
			        distance = floatround(distancef);
				    format(str, sizeof(str), " ~b~Current Stop: ~h~~y~%s~n~ ~b~Next Route: ~h~~y~%s~n~ ~y~Bus is ~b~%d ~b~meters away.", GetPlayerArea(playerid), GetZoneArea(BusRoutes[h2][0], BusRoutes[h2][1], BusRoutes[h2][2]), distance);
				}
			    case 27:
			    {
			        distancef=GetVehicleDistanceFromPoint(BotBus2, BusRoutes[h][0], BusRoutes[h][1], BusRoutes[h][2]);
			        distance = floatround(distancef);
				    format(str, sizeof(str), " ~b~Current Stop: ~h~~y~%s~n~ ~b~Next Route: ~h~~y~Bus Station~n~ ~y~Bus is ~b~%d ~b~meters away.", GetPlayerArea(playerid), distance);
				}
			}
            CreateLableText(playerid,"Bus Stop",str);
	    }
    }
	for(new de = 0; de < sizeof(Dealerships); de++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.5, Dealerships[de][0], Dealerships[de][1], Dealerships[de][2]))
	    {
	        if(GetPVarInt(playerid, "LOADDEAL") != 0) { return true; }
	        CreateLableText(playerid,"DEALER"," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to open the menu!");
        }
	}
	for(new p = 0; p < sizeof(PaintSprays); p++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, PaintSprays[p][0], PaintSprays[p][1], PaintSprays[p][2]))
	    {
	        CreateLableText(playerid,"PnS"," ~w~Press ~r~~h~~k~~VEHICLE_HANDBRAKE~ ~w~to enter!");
        }
	}
	for(new p = 0; p < sizeof(ModShop); p++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, ModShop[p][0], ModShop[p][1], ModShop[p][2]))
	    {
	        CreateLableText(playerid,"Modshop"," ~w~Press ~r~~h~~k~~VEHICLE_HANDBRAKE~ ~w~to enter!");
        }
	}
	
    for(new jb = 0; jb < MAX_JOBS; jb++)
	{
	    if(JobInfo[jb][jID] >= 1)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.5, JobInfo[jb][jX], JobInfo[jb][jY], JobInfo[jb][jZ]))
	        {
	            format(str, sizeof(str),"~w~%s", JobInfo[jb][jName]);
	            CreateLableText(playerid,str," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to open the menu!");
	        }
	    }
	}
	foreach(new in : IntIterator)
	{
	    if(IntInfo[in][iUsed] == 1)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.5, IntInfo[in][ieX], IntInfo[in][ieY], IntInfo[in][ieZ]))
	        {
	            format(str, sizeof(str),"~w~%s", IntInfo[in][iName]);
	            CreateLableText(playerid, str," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to enter!");
	        }
	    }
	}
	foreach(new h: HouseIterator) {
	    if(HouseInfo[h][hID] != 0)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]))
	        {
	            new str2[128];
	            if(HouseInfo[h][hOwned] == 0) //for sale
	            {
	                if(GetPVarInt(playerid, "Bank") < HouseInfo[h][hBuyValue] && GetPVarInt(playerid, "Bank") < (HouseInfo[h][hValue] * 10))
	                {
		            	format(str, sizeof(str),"~w~Property");
						format(str2, sizeof(str2), " ~w~Price: ~r~~h~ $%d (buy) ~n~~w~ Price: ~r~~h~ $%d (rent) ~n~~n~ ~w~Press ~r~~h~ 'H' ~w~to buy. ", HouseInfo[h][hBuyValue], HouseInfo[h][hValue]);
		            	CreateLableText(playerid, str, str2);
					}
					else if(GetPVarInt(playerid, "Bank") < HouseInfo[h][hBuyValue] && GetPVarInt(playerid, "Bank") >= (HouseInfo[h][hValue] * 10))
					{
					    format(str, sizeof(str),"~w~Property");
						format(str2, sizeof(str2), " ~w~Price: ~r~~h~ $%d (buy) ~n~~w~ Price: ~g~~h~ $%d (rent) ~n~~n~ ~w~Press ~r~~h~ 'H' ~w~to buy. ", HouseInfo[h][hBuyValue], HouseInfo[h][hValue]);
		            	CreateLableText(playerid, str, str2);
					}
					else
					{
						format(str, sizeof(str),"~w~Property");
						format(str2, sizeof(str2), " ~w~Price: ~g~~h~ $%d (buy) ~n~~w~ Price: ~g~~h~ $%d (rent) ~n~~n~ ~w~Press ~r~~h~ 'H' ~w~to buy. ", HouseInfo[h][hBuyValue], HouseInfo[h][hValue]);
		            	CreateLableText(playerid, str, str2);
					}
				}
				else if(HouseInfo[h][hOwned] == 1) //Bought
				{
	            	format(str, sizeof(str),"~w~Property");
					format(str2, sizeof(str2), " ~w~Owned by: ~n~~g~ %s ~w~ ~n~~n~ ~w~Press ~r~~h~ 'H' ~w~to enter. ", HouseInfo[h][hOwner]);
	            	CreateLableText(playerid, str, str2);
				}
				else //For sale
				{
	            	format(str, sizeof(str),"~w~Property");
					format(str2, sizeof(str2), " ~w~Rented by: ~n~~g~ %s ~w~ ~n~~n~ ~w~Press ~r~~h~ 'H' ~w~to enter. ", HouseInfo[h][hOwner]);
	            	CreateLableText(playerid, str, str2);
				}
	        }
	    }
	}
	foreach(new h : BizIterator) {
        if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]))
        {
            new str2[255];
            if(BizInfo[h][Owned] == 0) //for sale
            {
                if(GetPVarInt(playerid, "Bank") < BizInfo[h][Value]) //Can afford it
                {
	            	format(str, sizeof(str),"~w~Business");
					format(str2, sizeof(str2), " ~w~Name: ~r~~h~ %s ~n~~w~ Price: ~r~~h~ $%d ~n~~n~ ~w~Press ~r~~h~ 'H' ~w~to buy. ", BizInfo[h][Name],BizInfo[h][Value]);
	            	CreateLableText(playerid, str, str2);
				}
				else //Cannot afford it.
				{
					format(str, sizeof(str),"~w~Business");
					format(str2, sizeof(str2), " ~w~Name: ~r~~h~ %s ~n~~w~ Price: ~g~~h~ $%d ~n~~n~ ~w~Press ~r~~h~ 'H' ~w~to buy. ", BizInfo[h][Name],BizInfo[h][Value]);
	            	CreateLableText(playerid, str, str2);
				}
			}
			else //Bought
			{
				format(str, sizeof(str),"~w~Business");
				format(str2, sizeof(str2), " ~w~Name: ~r~~h~ %s ~n~~w~ Owned by: ~n~ %s ~n~~n~~w~ Press ~r~~h~ 'H' ~w~to enter. ($%d) ", BizInfo[h][Name],BizInfo[h][Owner],BizInfo[h][EnterPrice]);
            	CreateLableText(playerid, str, str2);
			}
        }
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.5, DMVSpot[0][0], DMVSpot[0][1], DMVSpot[0][2]))
	{
	    CreateLableText(playerid,"DMV"," ~w~Press ~r~~h~~k~~GROUP_CONTROL_BWD~ ~w~to open the menu!");
    }
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 2725.7688,-2318.5544,3.0000)) CreateLableText(playerid,"LSPD"," ~w~type ~r~/boatspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1579.0227,-1696.7950,6.2188)) CreateLableText(playerid,"LSPD"," ~w~type ~r~/acuspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1572.4750,-1692.9384,5.8906)) CreateLableText(playerid,"LSPD"," ~w~type ~r~/policespawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1468.5840,-1836.1243,13.5469)) CreateLableText(playerid,"GOV"," ~w~type ~r~/govspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 849.9410,-1383.7013,13.5710)) CreateLableText(playerid,"RLS"," ~w~type ~r~/rlsspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1798.5409,-1281.3446,13.6655)) CreateLableText(playerid,"News"," ~w~type ~r~/newsspawn~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 1625.8281,-853.5438,879.9100)) CreateLableText(playerid,"News"," ~w~type ~r~/camera~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 374.7547,200.2276,1081.5173)) CreateLableText(playerid,"GOV"," ~w~type ~r~/locker~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 398.9706,203.9854,1081.6190)) CreateLableText(playerid,"GOV"," ~w~type ~r~/uniform~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.5, 223.2129,118.8374,999.1253)) CreateLableText(playerid,"LSPD"," ~w~type ~r~/aresst~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 129.2496,1131.2227,527.4651)) CreateLableText(playerid,"LSPD"," ~w~type ~r~/payticket~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 125.3675,1111.5530,523.9155)) CreateLableText(playerid,"LSPD"," ~w~Garage, press ~r~'H'~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1579.0818,-845.3063,879.9098)) CreateLableText(playerid,"San News"," ~w~type ~r~/ad ~w~or ~r~/cad~w~!");
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 2042.0798,-1349.6273,1271.4860)) CreateLableText(playerid,"LSFD"," ~w~Lockerroom ~r~/uniform~w~!");
    if(pickupid == PDP[0]) CreateLableText(playerid,"LSPD"," ~w~Lockerroom ~r~/uniform~w~!");
    if(pickupid == PDP[1]) CreateLableText(playerid,"LSPD"," ~w~Cellblock ~r~/arrest~w~!");
    if(IsPlayerInRangeOfPoint(playerid,2.0,1640.8882,-2243.1147,13.4936)) return CreateLableText(playerid,"Guide"," ~w~Type ~b~/guide");
    if(IsPlayerInRangeOfPoint(playerid,2.0,2038.4750,-1365.0499,1271.5000)) return CreateLableText(playerid,"Floors"," ~w~Type ~b~/floor");
	if(IsPlayerInRangeOfPoint(playerid,2.0,2055.4756,-673.1822,1478.8860)) return CreateLableText(playerid,"Floors"," ~w~Type ~b~/floor");
	if(IsPlayerInRangeOfPoint(playerid,2.0,1994.9702,-1534.0613,1174.6000)) return CreateLableText(playerid,"Floors"," ~w~Type ~b~/floor");
	if(IsPlayerInRangeOfPoint(playerid,1.0,1130.6198,-1332.3566,13.5815)) return CreateLableText(playerid,"LSFD"," ~w~Type ~b~/fdspawn.");
	if(IsPlayerInRangeOfPoint(playerid,1.0,1144.5383,-1341.3037,13.5911)) return CreateLableText(playerid,"LSFD"," ~w~Type ~b~/emsup.");
	if(IsPlayerInRangeOfPoint(playerid,1.0,1151.9166,-1344.6350,26.7097)) return CreateLableText(playerid,"LSFD"," ~w~Type ~b~/emsdown.");
	if(IsPlayerInRangeOfPoint(playerid,1.0,204.3188,-160.1595,1000.5234)) return CreateLableText(playerid,"Clothes"," ~w~Clothes shop, press ~r~'H'~w~!");
	if(IsPlayerInRangeOfPoint(playerid,1.0,207.3639,-100.6654,1005.2578)) return CreateLableText(playerid,"Clothes"," ~w~Clothes shop, press ~r~'H'~w~!");
	if(IsPlayerInRangeOfPoint(playerid,1.0,306.4015,-159.2461,999.5938)) return CreateLableText(playerid,"Range"," ~w~Type ~b~/enterrange.");
	return 1;
}
//============================================//
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(IsPlayerNPC(playerid)) return 1;
    UnAFK(playerid);
	if(PlayerInfo[playerid][pBalling] == 1)
	{
		if ((newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH))
		{
			if(HavingBall[playerid])
			{
				ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.1,1,1,1,1,1);
			}
			else
			{
				ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
				PlayerInfo[playerid][pBallDef] = 1;
			}
			Anim[playerid] = 1;
		}
		if (!(newkeys & KEY_CROUCH) && (oldkeys & KEY_CROUCH))
		{
			ClearAnimations(playerid);
			Anim[playerid] = 0;
			PlayerInfo[playerid][pBallDef] = 0;
		}
		if(newkeys & KEY_FIRE)
		{
			if(!HavingBall[playerid])
			{
				new Float:x, Float:y, Float:z;
				GetObjectPos(Ball, x, y, z);
				if(IsPlayerInRangeOfPoint(playerid, 1.5, x, y, z))
				{
					PlayerInfo[playerid][BallDelay] = GetCount()+800;
					HavingBall[playerid] = 1;
					ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
					if(Baller != 999)
					{
						HavingBall[Baller] = 0;
						ClearAnimations(Baller);
						ApplyAnimation(Baller, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
					}
					Baller = playerid;
					BallStatus = 1;
					new Float:x2, Float:y2;
					GetXYInFrontOfPlayer(playerid, x2, y2, 0.8);
					GetPlayerPos(playerid, x, y, z);
					StopObject(Ball);
					MoveBall(Ball, x2, y2, z, 2.5);
					Anim[playerid] = 0;
					BallBounce = 0;
				}
			}
			else
			{
				if(PlayerInfo[playerid][BallDelay] > GetCount()) return 1;
				if((PlayerInfo[playerid][DunkDelay] < GetCount()) && IsPlayerInRangeOfPoint(playerid, 2, 2278.04,-1775.49,15.0))
				{
					PlayerInfo[playerid][DunkDelay] = GetCount()+5000;
					MoveBall(Ball, 2278.04, -1775.49, 15.0, 7.5);
					SetPlayerPosEx(playerid, 2278.04,-1775.49,15.0);
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
					HavingBall[playerid] = 0;
					SetTimerEx("ClearAnim", 1100, 0, "d", playerid);
					SetTimerEx("BallDown2", 1100, 0, "d", playerid);
					return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 4, 2278.04,-1775.49,15.0) && IsPlayerFacingPoint(playerid, 20, 2278.04,-1775.49,15.0))
				{
					new rand = random(1);
					if(rand == 0)
					{
						MoveBall(Ball, 2278.04, -1775.49, 15.0, 10.5+random(4));
						ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
						ShootingBall = 2;
						HavingBall[playerid] = 0;
						return 1;
					}
					ShootMiss(playerid);
					return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 7, 2278.04,-1775.49,15.0) && IsPlayerFacingPoint(playerid, 20, 2278.04,-1775.49,15.0))
				{
					new rand = random(2);
					if(rand == 0)
					{
						MoveBall(Ball, 2278.04, -1775.49, 15.0, 11.0+random(4));
						ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
						ShootingBall = 2;
						HavingBall[playerid] = 0;
						return 1;
					}
					ShootMiss(playerid);
					return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10, 2278.04,-1775.49,15.0) && IsPlayerFacingPoint(playerid, 20, 2278.04,-1775.49,15.0))
				{
					new rand = random(3);
					if(rand == 0)
					{
						MoveBall(Ball, 2278.04, -1775.49, 15.0, 11.5+random(4));
						ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
						ShootingBall = 2;
						HavingBall[playerid] = 0;
						return 1;
					}
					ShootMiss(playerid);
					return 1;
				}
				else if((PlayerInfo[playerid][DunkDelay] < GetCount()) && IsPlayerInRangeOfPoint(playerid, 2, 2277.58,-1801.51,15.0))
				{
					PlayerInfo[playerid][DunkDelay] = GetCount()+5000;
					MoveBall(Ball, 2277.58, -1801.51, 15.0, 7.5);
					SetPlayerPosEx(playerid, 2277.58,-1801.51,15.0);
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
					HavingBall[playerid] = 0;
					SetTimerEx("ClearAnim", 1100, 0, "d", playerid);
					SetTimerEx("BallDown3", 1100, 0, "d", playerid);
					return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 4, 2277.58,-1801.51,15.0) && IsPlayerFacingPoint(playerid, 20, 2277.58,-1801.51,15.0))
				{
					new rand = random(1);
					if(rand == 0)
					{
						MoveBall(Ball, 2277.58, -1801.51, 15.0, 10.5+random(4));
						ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
						ShootingBall = 3;
						HavingBall[playerid] = 0;
						return 1;
					}
					ShootMiss2(playerid);
					return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 7, 2277.58,-1801.51,15.0) && IsPlayerFacingPoint(playerid, 20, 2277.58,-1801.51,15.0))
				{
					new rand = random(2);
					if(rand == 0)
					{
						MoveBall(Ball, 2277.58, -1801.51, 15.0, 11.0+random(4));
						ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
						ShootingBall = 3;
						HavingBall[playerid] = 0;
						return 1;
					}
					ShootMiss2(playerid);
					return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10, 2277.58,-1801.51,15.0) && IsPlayerFacingPoint(playerid, 20, 2277.58,-1801.51,15.0))
				{
					new rand = random(3);
					if(rand == 0)
					{
						MoveBall(Ball, 2277.58, -1801.51, 15.0, 11.5+random(4));
						ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
						ShootingBall = 3;
						HavingBall[playerid] = 0;
						return 1;
					}
					ShootMiss2(playerid);
					return 1;
				}
				foreach(new i : Player)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pBalling] == 1 && (PlayerInfo[playerid][pBallTeam] == PlayerInfo[i][pBallTeam]))
						{
							if(IsPlayerFacingPlayer(playerid, i, 15))
							{
								new Float:x, Float:y, Float:z;
								GetPlayerPos(i, x, y, z);
								if(IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
								{
									Baller = i;
									HavingBall[playerid] = 0;
									ClearAnimations(playerid);
									ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
									SetTimerEx("ClearAnim", 700, 0, "d", playerid);
									MoveBall(Ball, x, y, z, 13+random(4));
									Anim[i] = 0;
									ShootingBall = 6;
									ApplyAnimation(i,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
									return 1;
								}
							}
						
						}
					}
				}
				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);
				HavingBall[playerid] = 0;
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(playerid, x2, y2, 6.0);
				SetTimerEx("BallDown", 600, 0, "df", playerid, z);
				MoveBall(Ball, x2, y2, z+random(8)+3, 10.0+random(4));
				ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
				ShootingBall = 0;
			}
		}
	} else {
		if(PlayerInfo[playerid][pKeyDelay] > GetCount()) {  return true; }
		PlayerInfo[playerid][pKeyDelay] = GetCount()+1000;
		new string[255], str[255];

		if(PRESSED(KEY_CTRL_BACK))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				for(new r = 0; r < sizeof(RentalSpot); r++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.0, RentalSpot[r][0], RentalSpot[r][1], RentalSpot[r][2]))
					{
						if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently on a route!");
						if(GetPVarInt(playerid, "RentKey") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: You already rent a vehicle, (/unrent)!");
						ShowPlayerDialog(playerid, 3, DIALOG_STYLE_MSGBOX,"RENTAL AGREEMENT","Agreeing to this document will allow you to rent one of our vehicles.\nYou will be charged $50 now, and $50 each payday. Do you agree?","Accept", "Deny");
					}
				}
				for(new de = 0; de < sizeof(Dealerships); de++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.0, Dealerships[de][0], Dealerships[de][1], Dealerships[de][2]))
					{
						if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently on a route!");
						if(GetPVarInt(playerid, "LOADDEAL") != 0) { return true; }
						SetPVarInt(playerid, "VEHMDL", de+1); // Normal Veh Dealership TYPE
						SetPVarInt(playerid, "VEHDEAL", de); // Normal Veh Dealership ID
						ShowPlayerDialog(playerid, 543, DIALOG_STYLE_LIST, "Dealership", "Purchase Vehicle\nVehicle Upgrades", "Select", "Close");
					}
				}
				for(new jb = 0; jb < MAX_JOBS; jb++)
				{
					if(JobInfo[jb][jID] >= 1)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, JobInfo[jb][jX], JobInfo[jb][jY], JobInfo[jb][jZ]))
						{
							if(GetPVarInt(playerid, "Job") >= 1 && GetPVarInt(playerid, "Job") != jb+1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You already have a job, this is not your station!");
							if(GetPVarInt(playerid, "Job") == jb+1)
							{
								ShowPlayerDialog(playerid, 4, DIALOG_STYLE_LIST, JobInfo[jb][jName], "Start Route\nEnd Route\nQuit Job", "Select", "Close");
							}
							else
							{
								format(str, 256, "Agreeing to this document will allow you to become a %s.", JobInfo[jb][jName]);
								ShowPlayerDialog(playerid, 5, DIALOG_STYLE_MSGBOX, "JOB AGREEMENT",str,"Accept", "Deny");
							}
						}
					}
				}
				foreach(new in : IntIterator)
				{
					if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently on a route!");
					if(IntInfo[in][iUsed] == 1)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, IntInfo[in][ieX], IntInfo[in][ieY], IntInfo[in][ieZ]))
						{
							if(IntInfo[in][iFreeze] == 1) TogglePlayerControllableEx(playerid, false);
							SetPlayerPosEx(playerid, IntInfo[in][ixX], IntInfo[in][ixY], IntInfo[in][ixZ]);
							SetPlayerInterior(playerid,IntInfo[in][iInt]);
							SetPlayerVirtualWorld(playerid,IntInfo[in][iWorld]);
							Streamer_Update(playerid);
							if(IntInfo[in][iWorld] != 0) {
								TempFreeze(playerid);
							}
							PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
							GameTextForPlayer(playerid, "~w~press ~r~'~k~~GROUP_CONTROL_BWD~' ~w~to exit.", 3000, 4);
							SetPVarInt(playerid, "IntEnter", in), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
							if(GetPVarInt(playerid, "DrugTime") == 0) {
								SetPlayerWeather(playerid, 11);
							}							
							if(IntInfo[in][iFreeze] == 0) SetTimerEx("LoadChecks", 1500, false, "i", playerid);
							if(IntInfo[in][iFreeze] == 1) SetTimerEx("TogglePlayerControllableEx", 2000, false, "ii", playerid, true);
							TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 2, in));
							return true;
						}
						if(IsPlayerInRangeOfPoint(playerid, 2.0, IntInfo[in][ixX], IntInfo[in][ixY], IntInfo[in][ixZ]))
						{
							if(GetPlayerVirtualWorld(playerid) == IntInfo[in][iWorld])
							{
								if(IntInfo[in][iFreeze] == 1) TogglePlayerControllableEx(playerid, false);
								Streamer_UpdateEx(playerid, IntInfo[in][ieX], IntInfo[in][ieY], IntInfo[in][ieZ], 0, 0);
								SetPlayerPosEx(playerid, IntInfo[in][ieX], IntInfo[in][ieY], IntInfo[in][ieZ]);
								SetPlayerInterior(playerid, 0);
								SetPlayerVirtualWorld(playerid, 0);
								PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
								DisablePlayerCheckpoint(playerid);
								SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
								if(IntInfo[in][iFreeze] == 1) SetTimerEx("TogglePlayerControllableEx", 2000, false, "ii", playerid, true);
								TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 0, 0));
								if(GetPVarInt(playerid, "DrugTime") == 0) {
									SetPlayerWeather(playerid, GMWeather);
								}								
								return true;
							}
						}
					}
				}
				foreach(new h : HouseIterator)
				{
					if(GetPVarInt(playerid, "OnRoute") != 0 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently on a route!");
					if(HouseInfo[h][hID] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
						{
							if(HouseInfo[h][hOwned] != 0)
							{
								if(HouseInfo[h][hLocked] == 0)
								{
									Streamer_UpdateEx(playerid, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi], h, HouseInfo[h][hIntIn]);
									SetPlayerPosEx(playerid, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]);
									SetPlayerVirtualWorld(playerid, h);
									SetPlayerInterior(playerid, HouseInfo[h][hIntIn]);
									SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", h);
									if(GetPVarInt(playerid, "DrugTime") == 0) {
										SetPlayerWeather(playerid, 11);
									}									
									TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 1, h));
									if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
									else
									{
										PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
									}
								}
								else { error(playerid, "This house is locked."); }
							}
							else
							{
								ShowPlayerDialog(playerid, 200, DIALOG_STYLE_MSGBOX, "Property For Sale!", "Would you like to purchase this property?\nPress continue for further options.", "Continue", "Close");
							}
						}
						if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hXi], HouseInfo[h][hYi], HouseInfo[h][hZi]) && GetPlayerVirtualWorld(playerid) == h)
						{
							Streamer_UpdateEx(playerid, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo], HouseInfo[h][hVwOut], HouseInfo[h][hIntOut]);
							SetPlayerPosEx(playerid, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo]);
							SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwOut]);
							SetPlayerInterior(playerid, HouseInfo[h][hIntOut]);
							Streamer_Update(playerid);
							if(HouseInfo[h][hVwOut] != 0) TempFreeze(playerid);
							SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
							TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 0, 0));
							StopAudioStreamForPlayerEx(playerid);
							if(GetPVarInt(playerid, "DrugTime") == 0) {
								SetPlayerWeather(playerid, GMWeather);
							}															
						}
						else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hgXo], HouseInfo[h][hgYo], HouseInfo[h][hgZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
						{
							if(HouseInfo[h][hLocked] == 1 && HouseInfo[h][hOwned] != 0)
							{
								error(playerid, "This garage is locked.");
								return true;
							}
				   
							TempFreeze(playerid);
							Streamer_UpdateEx(playerid, HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi], h, HouseInfo[h][gInterior]);
							SetPlayerVirtualWorld(playerid, h);
							SetPlayerInterior(playerid, HouseInfo[h][gInterior]);
							SetPlayerPosEx(playerid, HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi]);
							SetPlayerFacingAngle(playerid, HouseInfo[h][hgAi]);
							SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", h), SetPVarInt(playerid, "GarageEnter", h);

							TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 1, h));

							if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
							else
							{
								PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
							}
							if(GetPVarInt(playerid, "DrugTime") == 0) {
								SetPlayerWeather(playerid, 11);
							}							
							HouseLights(h);

							Streamer_Update(playerid);
							return 1;
						}
						else if(IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi]) && GetPlayerVirtualWorld(playerid) == h)
						{
							TempFreeze(playerid);
							
							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerInterior(playerid, 0);
							SetPlayerPosEx(playerid, HouseInfo[h][hgXo], HouseInfo[h][hgYo], HouseInfo[h][hgZo]);
							SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", 0), SetPVarInt(playerid, "GarageEnter", 0);

							TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 0, 0));
								
							StopAudioStreamForPlayerEx(playerid);
							LoadRadios(playerid);

							if(GetPVarInt(playerid, "DrugTime") == 0) {
								SetPlayerWeather(playerid, GMWeather);
							}															

							Streamer_Update(playerid);
							return 1;
						}
						else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hbdXo], HouseInfo[h][hbdYo], HouseInfo[h][hbdZo]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVwOut])
						{
							if(HouseInfo[h][hOwned] != 0) {
								if(HouseInfo[h][hLocked] == 0) {
									if(HouseInfo[h][hbdXi] == 0 && HouseInfo[h][hbdYi] == 0 && HouseInfo[h][hbdXi] == 0) return 1;
									TempFreeze(playerid);
									SetPlayerPosEx(playerid, HouseInfo[h][hbdXi], HouseInfo[h][hbdYi], HouseInfo[h][hbdZi]);
									SetPlayerVirtualWorld(playerid, h);
									SetPlayerInterior(playerid, HouseInfo[h][hIntIn]);
									SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", h);
									TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 1, h));
									if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
									else
									{
										PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
									}
									HouseLights(h);
									if(HouseInfo[h][hLights] == 1) SCM(playerid, COLOR_LIGHTRED, "The house lights are currently off, (/lights) to toggle.");

									if(GetPVarInt(playerid, "DrugTime") == 0) {
										SetPlayerWeather(playerid, 11);
									}

									Streamer_Update(playerid);
									return 1;
								}
								else { error(playerid, "This house is locked."); }
							} else { error(playerid, "This house is unowned."); }
						}
						else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hbdXi], HouseInfo[h][hbdYi], HouseInfo[h][hbdZi]) && GetPlayerVirtualWorld(playerid) == h) 
						{
							if(HouseInfo[h][hbdXo] == 0 && HouseInfo[h][hbdYo] == 0 && HouseInfo[h][hbdXo] == 0) return 1;

							TempFreeze(playerid);
							SetPlayerPosEx(playerid, HouseInfo[h][hbdXo], HouseInfo[h][hbdYo], HouseInfo[h][hbdZo]);
							SetPlayerVirtualWorld(playerid, HouseInfo[h][hVwOut]);
							SetPlayerInterior(playerid, HouseInfo[h][hIntOut]);
							SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
							TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 0, 0));
							
							StopAudioStreamForPlayer(playerid);
							LoadRadios(playerid);
							if(GetPVarInt(playerid, "DrugTime") == 0) {
								SetPlayerWeather(playerid, GMWeather);
							}

							Streamer_Update(playerid);
							return 1;
						}						
					}
				}
				foreach(new h : BizIterator)
				{
					if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently on a route!");
					if(BizInfo[h][ID] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]))
						{
							if(BizInfo[h][Owned] != 0)
							{
								if(BizInfo[h][Locked] == 0)
								{
									if(GetPVarInt(playerid, "Cash") < BizInfo[h][EnterPrice]) return error(playerid, "Insufficient funds.");
									GivePlayerMoneyEx(playerid, -BizInfo[h][EnterPrice]);
									BizInfo[h][Bank] = BizInfo[h][Bank] + BizInfo[h][EnterPrice];
									Streamer_UpdateEx(playerid, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi], h, BizInfo[h][IntIn]);
									SetPlayerPosEx(playerid, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]);
									SetPlayerVirtualWorld(playerid, h);
									SetPlayerInterior(playerid, BizInfo[h][IntIn]);
									SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", h), SetPVarInt(playerid, "HouseEnter", 0);
									if(GetPVarInt(playerid, "DrugTime") == 0) {
										SetPlayerWeather(playerid, 11);
									}
									new msg[128];
									format(msg, sizeof(msg), "{FFFFFF}Biz Slogan: %s", BizInfo[h][Slogan]);
									scm(playerid, -1, msg);
									if(GetPVarInt(playerid, "BizzKey") == h)
									{
										format(msg, sizeof(msg), "{FFFFFF}Products: %d/150.", BizInfo[h][bProd]);
										scm(playerid, -1, msg);
									}
									SetTimerEx("LoadChecks", 1500, false, "i", playerid);
									TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 3, h));
									if(strcmp(BizInfo[h][bRadio], "None", true) == 0){}
									else
									{
										PlayAudioStreamForPlayerEx(playerid, BizInfo[h][bRadio]);
									}
								}
								else
								{
									error(playerid, "This business is locked.");
								}
							}
							else
							{
								format(string, sizeof(string), "Would you like to buy this business?\nBuy: $%d \n\nBank Account: $%d", BizInfo[h][Value],GetPVarInt(playerid, "Bank"));
								ShowPlayerDialog(playerid, 300, DIALOG_STYLE_MSGBOX, "Buy business", string, "Debit", "Cancel");
							}
						}
						else if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == h)
						{
							Streamer_UpdateEx(playerid, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo], 0, BizInfo[h][IntOut]);
							SetPlayerPosEx(playerid, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo]);
							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerInterior(playerid, BizInfo[h][IntOut]);
							SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
							StopAudioStreamForPlayerEx(playerid);
							TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 0, 0));
							if(GetPVarInt(playerid, "DrugTime") == 0) {
								SetPlayerWeather(playerid, GMWeather);
							}
						}
						else if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][bbdXo], BizInfo[h][bbdYo], BizInfo[h][bbdZo]))
						{
							if(BizInfo[h][Owned] != 0) {
								if(BizInfo[h][Locked] == 0) {
									if(BizInfo[h][bbdXi] == 0 && BizInfo[h][bbdYi] == 0 && BizInfo[h][bbdXi] == 0) return 1;
									if(GetPVarInt(playerid, "MonthDon") == 0) {
										if(GetPVarInt(playerid, "Cash") < BizInfo[h][EnterPrice]) return error(playerid,"Insufficient funds.");
										GivePlayerMoneyEx(playerid, -BizInfo[h][EnterPrice]);
										BizInfo[h][Bank] = BizInfo[h][Bank] + BizInfo[h][EnterPrice];
									}
										
									TogglePlayerControllableEx(playerid, false);
									SetPlayerPosEx(playerid, BizInfo[h][bbdXi], BizInfo[h][bbdYi], BizInfo[h][bbdZi]);
									SetPlayerVirtualWorld(playerid, h);
									SetPlayerInterior(playerid, BizInfo[h][IntIn]);
									SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", h), SetPVarInt(playerid, "HouseEnter", 0);
									new msg[128];
									format(msg, sizeof(msg), "{FFFFFF}Biz Slogan: %s", BizInfo[h][Slogan]);
									scm(playerid, -1, msg);
									SetTimerEx("TogglePlayerControllableEx", 1500, false, "ii", playerid, true);
									TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 0, 0));
									if(strcmp(BizInfo[h][bRadio], "None", true) == 0){}
									else {
										PlayAudioStreamForPlayerEx(playerid, BizInfo[h][bRadio]);
									}
									if(GetPVarInt(playerid, "DrugTime") == 0) {
										SetPlayerWeather(playerid, 11);
									}	

									Streamer_Update(playerid);
									return 1;
								}
								else { GameTextForPlayer(playerid, "~r~Closed", 5000, 1); }
							}
						}
						else if(IsPlayerInRangeOfPoint(playerid, 2.0, BizInfo[h][bbdXi], BizInfo[h][bbdYi], BizInfo[h][bbdZi]) && GetPlayerVirtualWorld(playerid) == h)
						{
							if(BizInfo[h][bbdXo] == 0 && BizInfo[h][bbdYo] == 0 && BizInfo[h][bbdXo] == 0) return 1;
							TempFreeze(playerid);
							SetPlayerPosEx(playerid, BizInfo[h][bbdXo], BizInfo[h][bbdYo], BizInfo[h][bbdZo]);
							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerInterior(playerid, BizInfo[h][IntOut]);
							SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", 0);
							StopAudioStreamForPlayerEx(playerid);
							LoadRadios(playerid);
							TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 0, 0));
							if(GetPVarInt(playerid, "DrugTime") == 0) {
								SetPlayerWeather(playerid, GMWeather);
							}	

							Streamer_Update(playerid);
							return 1;
						}						
					}
				}
				if(PlayerInfo[playerid][pInVehicle] != -1) { //Exit vehicle.
					new vInt = IsEnterableVehicle(PlayerInfo[playerid][pInVehicle]);
					if(!IsValidCar(PlayerInfo[playerid][pInVehicle]) || IsPlayerInRangeOfPoint(playerid, 2.0, VehicleInteriorPos[vInt][vIntX], VehicleInteriorPos[vInt][vIntY], VehicleInteriorPos[vInt][vIntZ])) {
						return ExitVehicleInterior(playerid);
					}					
				} else { //Enter vehicle.
					new car = PlayerToCar(playerid, 2, 5.0);
					new vInt = IsEnterableVehicle(car);
					if(vInt != -1) {
						if(!IsPlayerInAnyVehicle(playerid)) {
							new Float:x, Float:y, Float:z;
							GetVehicleRelativePos(car, x, y, z, VehicleInteriorPos[vInt][vExitX], VehicleInteriorPos[vInt][vExitY], VehicleInteriorPos[vInt][vExitZ]);
							if(IsPlayerInRangeOfPoint(playerid, 2, x, y, z)) {
								if(VehicleInfo[car][vLock] == 0) {
									GetPlayerPos(playerid, PlayerInfo[playerid][EnterVehPos][0], PlayerInfo[playerid][EnterVehPos][1], PlayerInfo[playerid][EnterVehPos][2]);
									SetPlayerPosEx(playerid, VehicleInteriorPos[vInt][vIntX], VehicleInteriorPos[vInt][vIntY], VehicleInteriorPos[vInt][vIntZ]);
									SetPlayerVirtualWorld(playerid, car);
									SetPlayerInterior(playerid, car);
									SendClientMessage(playerid, COLOR_WHITE, "Use '/exit' or click the door hotkey to leave this vehicle.");
									if(GetPVarInt(playerid, "DrugTime") == 0) { SetPlayerWeather(playerid, 11); }	
									PlayerInfo[playerid][pInVehicle] = car;
									LoadRadios(playerid);					
									return 1;
								} else SendClientMessage(playerid, COLOR_WHITE, "This vehicle is locked!");
							}
						} else SendClientMessage(playerid, COLOR_WHITE, "You can't do this while in a vehicle!");
					}
				}				
				for(new h = 1; h < MAX_FACTIONS; h++)
				{
					if(FactionInfo[h][fUsed] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid,2.0,FactionInfo[h][fFact][0],FactionInfo[h][fFact][1],FactionInfo[h][fFact][2]))
						{
							if(GetPVarInt(playerid, "Member") != h) return SCM(playerid, COLOR_LIGHTRED, "You are not a member of this faction!");
							if(GetPVarInt(playerid, "Frights") == 0) return error(playerid, "You don't have the rights for this.");
							if(FactionInfo[h][fRights] == 0) return SCM(playerid, COLOR_LIGHTRED, "This faction has no rights!");
							new result[128];
							for(new i = 0; i < sizeof(WarItems); i++)
							{
								if(i == 0) { format(result, 1000, "%s | $%d", PrintIName(WarItems[i][0]), WarItems[i][1]); }
								else { format(result, 1000, "%s\n%s | $%d", result, PrintIName(WarItems[i][0]), WarItems[i][1]); }
							}
							ShowPlayerDialog(playerid, 67, DIALOG_STYLE_LIST, "Warehouse", result, "Purchase", "Close");
						}
					}
				}
				for(new weed = 0; weed < sizeof(WeedInfo); weed++)
				{
					if(IsPlayerInRangeOfPoint(playerid,2.0,WeedInfo[weed][wX],WeedInfo[weed][wY],WeedInfo[weed][wZ]))
					{
						if(GetPlayerVirtualWorld(playerid) == WeedInfo[weed][wWorld])
						{
							if(WeedInfo[weed][wPlanted] == 1 && WeedInfo[weed][wX] != 0.0 && WeedInfo[weed][wY] != 0.0 && WeedInfo[weed][wZ] != 0.0)
							{
								if (WeedInfo[weed][wTime] > 0)
								{
									format(string, sizeof(string), "This plant needs (%d) more minutes before it can be picked!", WeedInfo[weed][wTime]);
									SendClientMessage(playerid, COLOR_WHITE, string);
									return true;
								}
								ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
								if(WeedInfo[weed][wObject] > 0 && IsValidDynamicObject(WeedInfo[weed][wObject])) { DestroyDynamicObject(WeedInfo[weed][wObject]); }
								WeedInfo[weed][wObject]=0;
								GiveInvItem(playerid, 506, 100, 0);
								WeedInfo[weed][wX] = 0.0;
								WeedInfo[weed][wY] = 0.0;
								WeedInfo[weed][wZ] = 0.0;
								WeedInfo[weed][wPlanted] = 0;
								ProgressBar(playerid, "Collecting Plants...", 5, 0);
								AddPlayerTag(playerid, "(collecting plants)");
								TogglePlayerControllable(playerid, false);
								return 1;
							}
						}
					}
				}
				for(new Crack = 0; Crack < sizeof(CrackInfo); Crack++)
				{
					if(IsPlayerInRangeOfPoint(playerid,2.0,CrackInfo[Crack][cX],CrackInfo[Crack][cY],CrackInfo[Crack][cZ]))
					{
						if(GetPlayerVirtualWorld(playerid) == CrackInfo[Crack][cWorld])
						{
							if(CrackInfo[Crack][cPlanted] == 1 && CrackInfo[Crack][cX] != 0.0 && CrackInfo[Crack][cY] != 0.0 && CrackInfo[Crack][cZ] != 0.0)
							{
								if (CrackInfo[Crack][cTime] > 0)
								{
									format(string, sizeof(string), "This pot needs (%d) more minutes before it can be manufactured!", CrackInfo[Crack][cTime]);
									SendClientMessage(playerid, COLOR_WHITE, string);
									return true;
								}
								ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
								if(CrackInfo[Crack][cObject] > 0 && IsValidDynamicObject(CrackInfo[Crack][cObject])) { DestroyDynamicObject(CrackInfo[Crack][cObject]); }
								CrackInfo[Crack][cObject]=0;
								GiveInvItem(playerid, 507, 100, 0);
								CrackInfo[Crack][cX] = 0.0;
								CrackInfo[Crack][cY] = 0.0;
								CrackInfo[Crack][cZ] = 0.0;
								CrackInfo[Crack][cPlanted] = 0;
								ProgressBar(playerid, "Collecting Crack...", 5, 0);
								AddPlayerTag(playerid, "(collecting crack)");
								TogglePlayerControllable(playerid, false);
								return 1;
							}
						}
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 1.0, DMVSpot[0][0], DMVSpot[0][1], DMVSpot[0][2]))
				{
					if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently on a route!");
					if(GetPVarInt(playerid, "DriveLic") != 0) return SCM(playerid, COLOR_LIGHTRED, "You already have a driver license!");
					if(GetPlayerMoneyEx(playerid) >= 150)
					{
						ShowPlayerDialog(playerid, 6, DIALOG_STYLE_MSGBOX, "DMV CENTER", "License Cost: $150\nIf you'd like to take your driver license test, press continue.", "Continue", "Close");
					}
					else SCM(playerid, COLOR_WHITE, "You need $150 to conduct the driver license test!");
				}
				if(IsPlayerInRangeOfPoint(playerid, 1.0, 204.3188,-160.1595,1000.5234) || IsPlayerInRangeOfPoint(playerid, 1.0, 207.3639,-100.6654,1005.2578))
				{
					cmd_buyclothes(playerid, " ");
				}
			}
			if(GetPVarInt(playerid,"BizzEnter") != 0) {
				new bkey = GetPVarInt(playerid,"BizzEnter");
				for(new h = 0; h < MAX_HOUSE_OBJ; h++)
				{
					if(BizInfo[bkey][bObject][h] != 0)
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[bkey][boX][h], BizInfo[bkey][boY][h], BizInfo[bkey][boZ][h]))
						{
							if(IsDoorObject(BizInfo[bkey][boID][h]))
							{
								if(IsDoorObject(BizInfo[bkey][boID][h]))
								{
									cmd_door(playerid, " ");
								}
							}
						}
					}
				}
			}
			if(GetPVarInt(playerid,"HouseEnter") != 0) {
				new hkey = GetPVarInt(playerid,"HouseEnter");
				for(new h = 0; h < MAX_HOUSE_OBJ; h++) {
					if(HouseInfo[hkey][hObject][h] != 0) {
						if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[hkey][hoX][h], HouseInfo[hkey][hoY][h], HouseInfo[hkey][hoZ][h])) {
							if(IsDoorObject(HouseInfo[hkey][hoID][h])) {
								cmd_door(playerid, " ");
							}
						}
					}
				}
			}
		}
		if(PRESSED(KEY_NO))
		{
			if(GetPVarInt(playerid, "LSPD_Ta") != 0) return true;
			if(GetPVarInt(playerid, "Mute") == 1) return true;
			if(GetPVarInt(playerid, "Jailed") > 0) return true;
			if(GetPVarInt(playerid, "Dead") > 0) return true;
			new diatxt[128];
			new count_in = 0;
			format(diatxt, sizeof(diatxt), "Player Inventory");
			new id = GetPVarInt(playerid, "HouseEnter");
			if(id != 0 && GetCloseHouseSafe(playerid, id) && HouseInfo[id][sLocked] != 1)
			{
				format(diatxt, sizeof(diatxt), "%s\nProperty Inventory", diatxt);
				count_in = 1;
			}
			id = GetPVarInt(playerid, "BizzEnter");
			if(id != 0 && GetCloseBizzSafe(playerid, id) && BizInfo[id][sLocked] != 1) 
			{
				format(diatxt, sizeof(diatxt), "%s\nBusiness Inventory", diatxt);
				count_in = 1;			
			}
			if(!IsPlayerInAnyVehicle(playerid)) {
				new key = -1, keyex = -1;
				if(PlayerToCar(playerid, 1, 4.0)) {
					keyex = PlayerToCar(playerid, 2, 4.0);
					if(IsValidTCar(keyex)) {
						if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
						format(diatxt, sizeof(diatxt), "%s\n%s Inventory", diatxt, PrintVehName(keyex));
						count_in = 2;
						key = keyex; }
					}
				}
				
				if(key == -1)
				{
					if(IsPoliceCar(playerid)) {
						format(diatxt, sizeof(diatxt), "%s\n%s Inventory",diatxt, PrintVehName(GetPoliceCarID(playerid)));
						count_in = 2; }
				}
			} else {
				new key = GetPlayerVehicleID(playerid);
				if(!IsHelmetCar(key) && VehicleInfo[key][vType] == VEHICLE_PERSONAL) {
					format(diatxt, sizeof(diatxt), "%s\n%s Glovebox",diatxt, PrintVehName(key));
					count_in = 2;					
				}
			}
			if(count_in != 0)
			{
				ShowPlayerDialog(playerid, 204, DIALOG_STYLE_LIST, "Select inventory", diatxt, "Open","Close");
			}
			else
			{
				CallRemoteFunction("PrintInv", "i", playerid);
			}
		}
		if(PRESSED(KEY_YES))
		{
			if(GetPVarInt(playerid, "OnRoute") != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently on a route!");
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(GetPVarInt(playerid, "PlayerLogged") == 1 && GetPVarInt(playerid, "Muted") == 0 && GetPVarInt(playerid, "Dead") == 0)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, 690.8641, 845.6808, -39.0077)) {
						if(GetPVarInt(playerid, "holdingMP") != 1) {
							if(PlayerInfo[playerid][pPlayerWeapon] < 2) {
								if(GetPlayerMoneyEx(playerid) >= 1250) {
									SetPVarInt(playerid, "holdingMP", 1);
									GivePlayerMoneyEx(playerid, -1250);
									GameTextForPlayer(playerid, "~r~-$1250", 5000, 1);
									if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_CLOTH4)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4);
									SetPlayerAttachedObject( playerid, HOLDOBJECT_CLOTH4, 1575, 1, -0.064613, 0.520760, 0.000000, 0.000000, 84.217391, 0.000000, 1.000000, 1.000000, 1.000000 );
									SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									scm(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Use (/loadpack) near your trailer or (/drop matpack) to discard of the package.");
									mysql_format(handlesql, string, sizeof(string), "UPDATE accounts SET Cash=%d WHERE Name='%s'", GetPlayerMoneyEx(playerid), PlayerInfo[playerid][pUsername]);
									mysql_tquery(handlesql, string);
								} else scm(playerid, COLOR_GREY, "You cannot afford this! ($1250)");
							} else scm(playerid, COLOR_GREY, "You can't do this while holding a weapon.");
						} else scm(playerid, COLOR_GREY, "You're already holding a materials package.");
						return true;
					}
					//=========//
					new foundid = -1;
					for(new i = 0; i < sizeof(CorpInfo); i++)
					{
						if(CorpInfo[i][cUsed] == 1)
						{
							if(IsPlayerInRangeOfPoint(playerid, 2.0, CorpInfo[i][cX], CorpInfo[i][cY], CorpInfo[i][cZ]))
							{
								if(CorpInfo[i][cVeh] == 0) {
									foundid = i;
									break;
								} else if(CorpInfo[i][cVeh] > 0 && GetVehicleModel(CorpInfo[i][cVeh]) < 0) {
									foundid = i;
									break;
								}
							}
						}
					}
					if(foundid != -1)
					{
						new f1 = 0, key = 0;
						key=GetPVarInt(playerid, "HouseEnter");
						if(key != 0)
						{
							if(strcmp(HouseInfo[key][hOwner], PlayerName(playerid), true) == 0)
							{
								f1++;
							}
						}
						key=GetPVarInt(playerid, "BizzEnter");
						if(key != 0)
						{
							if(strcmp(BizInfo[key][Owner], PlayerName(playerid), true) == 0)
							{
								f1++;
							}
						}
						if(GetPVarInt(playerid, "Member") == 2) f1++;
						if(GetPVarInt(playerid, "Admin") >= 4) f1++;
						if(f1 == 0) ShowPlayerDialog(playerid, 505, DIALOG_STYLE_LIST, "Corpse Options", "Examine Corpse\nStore In Vehicle", "Select", "Close");
						else ShowPlayerDialog(playerid, 505, DIALOG_STYLE_LIST, "Corpse Options", "Examine Corpse\nStore In Vehicle\nDiscard Corpse", "Select", "Close");
						return 1;
					}
					//=========//
					foundid = -1;
					for(new i = 0; i < MAX_LOOT; i++) {
						if(LootInfo[i][lUsed] == 1) {
							if(IsPlayerInRangeOfPoint(playerid, 1.0, LootInfo[i][lX], LootInfo[i][lY], LootInfo[i][lZ])) {
								foundid = i;
								break;
							}
						}
					}
					if(foundid != -1) {
						if(CheckInv(playerid)) {
							switch(LootInfo[foundid][lItem][0])
							{
								case 16 .. 38:
								{
									if(GetPVarInt(playerid, "ConnectTime") < 8) return SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient hours played, (8) required!");
									if(GetPlayerPing(playerid) >= 500) return SendClientMessage(playerid, COLOR_WHITE, "Your ping is too high to use this!");
								}
								case 1003:
								{
									if(GetPVarInt(playerid, "ConnectTime") < 24) return SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient hours played, (24) required!");
								}
							}
							GiveInvItem(playerid, LootInfo[foundid][lItem][0], LootInfo[foundid][lItem][1], LootInfo[foundid][lItem][2], LootInfo[foundid][lItem][3]);
							LootInfo[foundid][lX]=0.0, LootInfo[foundid][lY]=0.0, LootInfo[foundid][lZ]=0.0;
							format(str, 128, "Picked up '%s'!", PrintIName(LootInfo[foundid][lItem][0]));
							SendClientMessage(playerid, COLOR_WHITE, str);
							if( LootInfo[foundid][lItem][0] >= 22 && LootInfo[foundid][lItem][0] <= 38)
							{
								format(str, 128, "%s picked up %s", PlayerName(playerid), PrintIName(LootInfo[foundid][lItem][0]));
								WepLog(str);
							}
							LootInfo[foundid][lItem][0]=0;
							LootInfo[foundid][lItem][1]=0;
							LootInfo[foundid][lItem][2]=0;
							if(IsValidDynamicObject(LootInfo[foundid][lObject])) DestroyDynamicObject(LootInfo[foundid][lObject]);
							DestroyDynamic3DTextLabel(LootInfo[foundid][lText]);
							LootInfo[foundid][lTime]=0, LootInfo[foundid][lUsed]=0;
							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
						} else SendClientMessage(playerid, COLOR_WHITE, "Your inventory is full!");
					}
					//=========//
					foundid = -1;
					for(new i = 0; i < sizeof(CrateInfo); i++)
					{
						if(CrateInfo[i][cUsed] == 1)
						{
							if(IsPlayerInRangeOfPoint(playerid, 5.0, CrateInfo[i][cX], CrateInfo[i][cY], CrateInfo[i][cZ]))
							{
								if(CrateInfo[i][cVeh] == 0)
								{
									foundid = i;
									break;
								}
							}
						}
					}
					if(foundid != -1)
					{
						SetPVarInt(playerid, "CrateID", foundid);
						ShowPlayerDialog(playerid,94,DIALOG_STYLE_LIST,"Crate Options", "Take Items\nStore In Vehicle", "Select", "Close");
					}
					//=========//
					for(new o = 0; o < MAX_OBJECTS; o++)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, Shells[o][sX], Shells[o][sY], Shells[o][sZ]))
						{
							if(Shells[o][sUsed] == 1)
							{
								if((GetCount()-Shells[o][sCurTime]) > (DELAY_SHOTSFIRED/1.5)) {
									Shells[o][sTime]=0;
									Shells[o][sCurTime]=0;
									Shells[o][sUsed]=0;
									Shells[o][sX]=0.0;
									Shells[o][sY]=0.0;
									Shells[o][sZ]=0.0;
									DestroyDynamic3DTextLabel(Shells[o][sText]);
									ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
									if(Shells[o][sSerial] == 0) {
										SendClientMessage(playerid, COLOR_WHITE, "Shell casing picked up. {33CCFF}Serial ID - Unknown.");
									} else {
										new strang[64];
										format(strang, sizeof(strang), "Shell casing picked up. {33CCFF}Serial ID - %d.", Shells[o][sSerial]);
										SendClientMessage(playerid, COLOR_WHITE, strang);
									}
								} else {
									SendClientMessage(playerid, COLOR_ORANGE, "The shell is too hot! Wait a moment before trying to pick it up.");
								}
							}
						}
					}
					//=========//
					if(PlayerInfo[playerid][pPlayerWeapon] > 0 && PlayerInfo[playerid][pPlayerAmmo] == 0 && GetPlayerWeapon(playerid) == 0)
					{
						new found = 0;
						new ammo, id;
						for(new i = 0; i < MAX_INV_SLOTS; i++)
						{
							if(PlayerInfo[playerid][pInvItem][i] >= 100 && PlayerInfo[playerid][pInvItem][i] <= 199)
							{
								ammo = CompatAmmo(playerid, PlayerInfo[playerid][pInvItem][i]);
								if(ammo > 0) {
								found++, id = i; 
								break;}
							}
						}
						if(found == 0) return true; // block leaks
						//==========//
						if(GetPVarInt(playerid, "TogUnhol") == 0) {
						ApplyAnimation(playerid, "SILENCED", "Silence_reload", 3.0, 0, 0, 0, 0, 0); }
						//==========//
						GivePlayerWeaponEx(playerid, PlayerInfo[playerid][pPlayerWeapon], PlayerInfo[playerid][pInvQ][id]);
						PlayerInfo[playerid][pSerial]=PlayerInfo[playerid][pInvS][id];
						//==========//
						format(str, 128, "%s reloaded with '%s'!", PrintIName(PlayerInfo[playerid][pPlayerWeapon]), PrintIName(PlayerInfo[playerid][pInvItem][id]));
						SendClientMessage(playerid, COLOR_WHITE, str);
						//==========//
						RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][id], 0, id);
						return true;
					}
				}
				else SendClientMessage(playerid,COLOR_LIGHTRED,"You are either dead/un-logged/muted to use this!");
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(IsNotAEngineCar(GetPlayerVehicleID(playerid))) return true;
				new idcar = GetPlayerVehicleID(playerid), Float:ghealth, sendername[MAX_PLAYER_NAME];
				switch(VehicleInfo[idcar][vEngine])
				{
					case 0:
					{
						GetVehicleHealth(idcar, ghealth);
						if(ghealth <= 300.0)
						{
							//RemovePlayerFromVehicleEx(playerid);
							SendClientMessage(playerid,COLOR_LIGHTRED,"The vehicle is currently damaged!");
							return true;
						}
						if(VehicleInfo[idcar][vFuel] <= 1)
						{
							//RemovePlayerFromVehicleEx(playerid);
							SendClientMessage(playerid,COLOR_LIGHTRED,"The vehicle has no fuel!");
							return true;
						}
						if((VehicleInfo[idcar][vType] == VEHICLE_PERSONAL && strcmp(VehicleInfo[idcar][vOwner], PlayerInfo[playerid][pUsername], false) != 0) || VehicleInfo[idcar][vType] == VEHICLE_THEFT) {
							if(VehicleInfo[idcar][vWireTime] == 0) {
								if(!CheckInvItem(playerid, 406)) {
									SendClientMessage(playerid, COLOR_LIGHTRED, "You need a toolkit to hotwire the vehicle!");
									RemovePlayerFromVehicle(playerid);
									return true;
								}
								
								if(VehicleInfo[idcar][vType] != VEHICLE_THEFT) VehicleInfo[idcar][vWireTime]++;
								
								SetPVarInt(playerid, "Hotwire", 1);
								format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
								GiveNameSpace(sendername);
								format(string, sizeof(string), "*** %s attempts to hotwire the vehicle.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE);
								ProgressBar(playerid, "Hotwiring...", 60, 1);
								AddPlayerTag(playerid, "(hotwiring vehicle)");
								if(VehicleInfo[idcar][vAlarmLvl] >= 3) {
									VehicleInfo[idcar][vAlarm]=1;
								}
							} else {
								SendClientMessage(playerid, COLOR_LIGHTRED, "This vehicle has already been hotwired!");
								RemovePlayerFromVehicle(playerid);
							}
							
							return true;
						}
						cmd_engine(playerid, "");
					}
					case 1: {
						VehicleInfo[idcar][vEngine]=0;
						CarEngine(idcar, VehicleInfo[idcar][vEngine]);
						GameTextForPlayer(playerid, "~n~~w~engine ~r~~h~off~w~!", 5000, 5);
					}
				}
			}
		}
		if(PRESSED(KEY_SECONDARY_ATTACK))
		{
			for(new h = 0; h < sizeof(Vending); h++)
			{
				if(IsPlayerInRangeOfPoint(playerid,1.0,Vending[h][0], Vending[h][1], Vending[h][2]))
				{
					new Float:health;
					GetPlayerHealth(playerid,health);
					if(GetPVarInt(playerid, "VendingUse") != 0) return 1;
					if(health >= 99) return SendClientMessage(playerid,COLOR_GREY, "Health is too full!");
					if(GetPlayerMoneyEx(playerid) < 3) return SendClientMessage(playerid,COLOR_GREY,"You need 3$ to use this.");
					if(GetPVarInt(playerid, "Dead") > 0) return SendClientMessage(playerid,COLOR_GREY,"You are dead, you cant use this.");
					SetPlayerPosEx(playerid,Vending[h][0], Vending[h][1], Vending[h][2]);
					SetPlayerFacingAngle(playerid,Vending[h][3]);
					GivePlayerMoneyEx(playerid,-3);
					GameTextForPlayer(playerid, "~r~-$3.", 5000, 1);
					ApplyAnimation(playerid, "VENDING", "VEND_Use", 3.0, 0, 0, 0, 0, 0);
					health+=40.0;
					if(health >= 100.0) health=99.0;
					SetPlayerHealth(playerid,health);
					SetPVarInt(playerid, "Mute", 1);
					SetPVarInt(playerid, "VendingUse", 1);
					SetTimerEx("VendingFinish", 2300, false, "i", playerid);
					ForceAME(playerid, "uses the vending machine");
				}
			}
		}
		if(PRESSED(KEY_FIRE))
		{
			if(GetPVarInt(playerid, "PlayerLogged") == 2 && GetPVarInt(playerid,"SpawnLocation") != 0) // SELECT SPAWNPOINT
			{
				PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
				new listitem = GetPVarInt(playerid,"SSP"), key;
				if(listitem >= 1) listitem--;
				switch(listitem)
				{
					case 0: // Last Location
					{
					}
					case 1: // Property
					{
						key = GetPVarInt(playerid,"HouseKey");
						SetPVarFloat(playerid, "PosX", HouseInfo[key][hXi]);
						SetPVarFloat(playerid, "PosY", HouseInfo[key][hYi]);
						SetPVarFloat(playerid, "PosZ", HouseInfo[key][hZi]);
						SetPVarInt(playerid, "World", key);
						SetPVarInt(playerid, "Interior", HouseInfo[key][hIntIn]);
					}
					case 2: // Business
					{
						key = GetPVarInt(playerid,"BizzKey");
						SetPVarFloat(playerid, "PosX", BizInfo[key][Xi]);
						SetPVarFloat(playerid, "PosY", BizInfo[key][Yi]);
						SetPVarFloat(playerid, "PosZ", BizInfo[key][Zi]);
						SetPVarInt(playerid, "World", key);
						SetPVarInt(playerid, "Interior", BizInfo[key][IntIn]);
					}
					case 3:
					{
						switch(GetPVarInt(playerid,"Member"))
						{
							case 1: // LSPD
							{
								SetPVarFloat(playerid, "PosX", 1553.4929);
								SetPVarFloat(playerid, "PosY", -1675.7034);
								SetPVarFloat(playerid, "PosZ", 16.1953);
								SetPVarInt(playerid, "World", 0);
								SetPVarInt(playerid, "Interior", 0);
							}
							case 2: // LSFD
							{
								SetPVarFloat(playerid, "PosX", 1182.5016);
								SetPVarFloat(playerid, "PosY", -1321.9572);
								SetPVarFloat(playerid, "PosZ", 13.5788);
								SetPVarInt(playerid, "World", 0);
								SetPVarInt(playerid, "Interior", 0);
							}
							case 8: // GOV
							{
								SetPVarFloat(playerid, "PosX", 1481.1187);
								SetPVarFloat(playerid, "PosY", -1770.7849);
								SetPVarFloat(playerid, "PosZ", 18.7958);
								SetPVarInt(playerid, "World", 0);
								SetPVarInt(playerid, "Interior", 0);
							}
						}
					}
				}
				for(new i = 0; i < 6; i++) { TextDrawHideForPlayer(playerid, SpawnDraw[i]); }
				SetPVarInt(playerid, "SpawnLocation", 0);
				SetTimerEx("OnLoginInit", 500, false, "ii", playerid, 1);
				return true;
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(IsNotAEngineCar(GetPlayerVehicleID(playerid))) return true;
				CarLights(GetPlayerVehicleID(playerid));
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
		}
		if(PRESSED(KEY_HANDBRAKE))
		{
			if(GetPVarInt(playerid, "PlayerSpectate") != 0 && GetPVarInt(playerid, "SpecID") != INVALID_MAXPL && GetPVarInt(playerid, "Admin") > 0) {
				new target = GetPVarInt(playerid, "SpecID") + 1;
				if(IsPlayerConnected(target) && !IsPlayerNPC(target)) {
					SetPVarInt(playerid, "SpecID", target);
					new targetip[20];
					GetPlayerIp(target,targetip,sizeof(targetip));
					format(string, sizeof(string), "Player: %s - ID: %d - Hours Played: %d - IP: %s", PlayerInfo[target][pName], target, GetPVarInt(target, "ConnectTime"), targetip);
					SendClientMessage(playerid, COLOR_GREY, string);
					TogglePlayerSpectatingEx(playerid, 1);
					SetPlayerInterior(playerid,GetPlayerInterior(target));
					SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(target));
					if(IsPlayerInAnyVehicle(target))
					{
						PlayerSpectateVehicle(playerid, GetPlayerVehicleID(target));
					}
					else
					{
						PlayerSpectatePlayer(playerid, target);
					}
				}
			}
			if(GetPVarInt(playerid, "PlayerLogged") == 2 && GetPVarInt(playerid,"SpawnLocation") != 0)
			{
				CallRemoteFunction("SelectSpawnpoint","i", playerid);
				PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
				return true;
			}
			if(PlayerInfo[playerid][pFishing] == 1) {
				CancelFishing(playerid);
				SendClientMessage(playerid, COLOR_WHITE, "{4F13DB}[Fishing] {FFFFFF}You have stopped fishing.");
				return true;
			}
			if(!IsPlayerInAnyVehicle(playerid) && GetPVarInt(playerid, "AnimUse") == 1) {
				cmd_stopanim(playerid, "");
			}
			for(new p = 0; p < sizeof(PaintSprays); p++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, PaintSprays[p][0], PaintSprays[p][1], PaintSprays[p][2]))
				{
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						if(AbleToUsePNS(playerid))
						{
							new priceo = 0;
							if(GetPVarInt(playerid, "MonthDon") > 0) priceo=50;
							if(GetPVarInt(playerid, "PaintUse") <= 1) priceo=400;
							if(GetPVarInt(playerid, "Member") == 1 || GetPVarInt(playerid, "Member") == 2) priceo=0;
							if(GetPlayerMoneyEx(playerid) >= priceo)
							{
								new idcar = GetPlayerVehicleID(playerid);
								SetVehicleVirtualWorldEx(idcar,playerid);
								foreach(new i : Player)
								{
									if(GetPlayerVehicleID(i) == idcar)
									{
										SetPlayerVirtualWorld(i,playerid);
									}
								}
								TogglePlayerControllableEx(playerid,false);
								SetVehiclePosEx(GetPlayerVehicleID(playerid),PaintSprays[p][4],PaintSprays[p][5],PaintSprays[p][6]);
								SetPVarInt(playerid, "PaintID", p);
								SetTimerEx("OnPaintSpray", 4000, false, "i", playerid);
								SetPVarInt(playerid, "PaintUse", GetPVarInt(playerid, "PaintUse")+1);
								if(priceo > 0) GivePlayerMoneyEx(playerid, -priceo);
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
						}
						else SCM(playerid, COLOR_LIGHTRED, "You are not government, subscriber or you have used up your PnS tries!");
					}
					else SCM(playerid, COLOR_LIGHTRED, "You must be in a vehicle to use this!");
				}
			}
			for(new p = 0; p < sizeof(ModShop); p++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, ModShop[p][0], ModShop[p][1], ModShop[p][2]))
				{
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						new vehicleID = GetPlayerVehicleID(playerid);
						if(!isnull(VehicleInfo[vehicleID][vOwner]) && strcmp(VehicleInfo[vehicleID][vOwner], PlayerInfo[playerid][pUsername], false) == 0) {
							SetPVarInt(playerid, "VEHMODID", p), SetPVarInt(playerid, "VEHMODKEY", vehicleID);
							SetPVarInt(playerid, "VEHSEC", 0), SetPVarInt(playerid, "VEHMOD", 0);
							CallRemoteFunction("VehMod", "i", playerid);
							return 1;
						}
					}
					else SCM(playerid, COLOR_LIGHTRED, "You must be in a vehicle to use this!");
				}
			}
			foreach(new h : HouseIterator)
			{
				if(GetPVarInt(playerid, "OnRoute") != 0) return 1;
				if(HouseInfo[h][hID] != 0)
				{
					if(IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[h][hgXo], HouseInfo[h][hgYo], HouseInfo[h][hgZo]))
					{
						if(HouseInfo[h][hLocked] == 1)
						{
							error(playerid, "This garage is locked.");
							return true;
						}
			   
						if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
						{
							new vehicleid = GetPlayerVehicleID(playerid);
							foreach(new i : Player)
							{
								if(GetPlayerVehicleID(i) == vehicleid)
								{
									SetPlayerVirtualWorld(i, h);
									SetPlayerInterior(i, 1);
								}
							}

							TempFreeze(playerid);

							SetVehicleVirtualWorldEx(GetPlayerVehicleID(playerid), h);
							LinkVehicleToInteriorEx(GetPlayerVehicleID(playerid), 1);
							SetVehiclePosEx(GetPlayerVehicleID(playerid), HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi] + 0.5);
							SetVehicleZAngle(GetPlayerVehicleID(playerid), HouseInfo[h][hgAi]);

							SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", h), SetPVarInt(playerid, "GarageEnter", h);

							TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 1, h));

							if(strcmp(HouseInfo[h][hRadioU], "None", true) == 0){}
							else
							{
								PlayAudioStreamForPlayerEx(playerid, HouseInfo[h][hRadioU]);
							}

							HouseLights(h);

							if(GetPVarInt(playerid, "DrugTime") == 0)
							{
								//SetPlayerTime(playerid, 12, 0);
								SetPlayerWeather(playerid, 0);
							}

							SetTimerEx("EnterGarage", 1000, false, "ii", playerid, h);

							Streamer_Update(playerid);
							return 1;
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[h][hgXi], HouseInfo[h][hgYi], HouseInfo[h][hgZi]) && GetPlayerVirtualWorld(playerid) == h)
					{
						if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
						{
							new vehicleid = GetPlayerVehicleID(playerid);

							foreach(new i : Player)
							{
								if(GetPlayerVehicleID(i) == vehicleid)
								{
									SetPlayerVirtualWorld(i, 0);
									SetPlayerInterior(i, 0);
								}
							}

							TempFreeze(playerid);

							SetVehicleVirtualWorldEx(GetPlayerVehicleID(playerid), 0);
							LinkVehicleToInteriorEx(GetPlayerVehicleID(playerid), 0);
							SetVehiclePosEx(GetPlayerVehicleID(playerid), HouseInfo[h][hgXo], HouseInfo[h][hgYo], HouseInfo[h][hgZo] + 0.5);
							SetVehicleZAngle(GetPlayerVehicleID(playerid), HouseInfo[h][hgAo]);

							SetPVarInt(playerid, "IntEnter", 0), SetPVarInt(playerid, "BizzEnter", 0), SetPVarInt(playerid, "HouseEnter", 0), SetPVarInt(playerid, "GarageEnter", 0);

							TextDrawSetString(Text:LocationDraw[playerid], PrintArea(playerid, 0, 0));
								
							StopAudioStreamForPlayerEx(playerid);
							LoadRadios(playerid);

							if(GetPVarInt(playerid, "DrugTime") == 0)
							{
								SetPlayerTime(playerid, GMHour, GMMin);
								SetPlayerWeather(playerid, GMWeather);
							}

							Streamer_Update(playerid);
							return 1;
						}
					}
				}
			}
		}
		if(PRESSED(KEY_CTRL_BACK) || PRESSED(9))
		{
			if(GetPVarInt(playerid, "Admin") == 0)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 509 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 510)
					{
						ClearAnimations(playerid), GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~Jump key is restricted for bicycles",3000,5);
					}
				}
			}
		}
		if(PRESSED(KEY_SPRINT))
		{
			if(GetPVarInt(playerid, "Admin") == 0)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					new animlib[30],animname[30];
					GetAnimationName(GetPlayerAnimationIndex(playerid) , animlib, sizeof(animlib), animname, sizeof(animname));
					if(strcmp(animlib, "PED", true) == 0 && strcmp(animname, "RUN_PLAYER", true) == 0 && GetPlayerSkin(playerid) != 0 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
					{
						if(GetPVarInt(playerid, "Control") == 0 && GetPVarInt(playerid, "CJRun") == 0)
						{
							SetPVarInt(playerid,"CJRun",1);
							format(string, sizeof(string), "AdmWarning: %s[%d] is supposedly CJ-Running.", PlayerName(playerid), playerid);
							SendAdminMessage(COLOR_YELLOW,string);
							return true;
						}
					}
				}
			}
		}
		if(PRESSED(KEY_SPRINT))
		{
			if(GetPVarInt(playerid, "Admin") == 0)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					new animlib[30],animname[30];
					GetAnimationName(GetPlayerAnimationIndex(playerid) , animlib, sizeof(animlib), animname, sizeof(animname));
					if(strcmp(animlib, "PED", true) == 0 && strcmp(animname, "RUN_PLAYER", true) == 0 && GetPlayerSkin(playerid) != 0 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
					{
						if(GetPVarInt(playerid, "Control") == 0 && GetPVarInt(playerid, "CJRun") == 0)
						{
							SetPVarInt(playerid,"CJRun",1);
							format(string, sizeof(string), "AdmWarning: %s[%d] is supposedly CJ-Running.", PlayerName(playerid), playerid);
							SendAdminMessage(COLOR_YELLOW,string);
							return true;
						}
					}
				}
			}
		}
		if(PRESSED(KEY_WALK))
		{
			if (GetPVarInt(playerid, "Dead") == 0 && GetPVarInt(playerid, "Mute") == 0 && GetPVarInt(playerid, "Cuffed") == 0)
			{
				if(GetPlayerWalkStyle(playerid) > 0)
				{
					switch(GetPlayerWalkStyle(playerid))
					{
						case WALKSTYLE_GANG1: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1,1);
						case WALKSTYLE_GANG2: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1,1);
						case WALKSTYLE_NORMAL: ApplyAnimation(playerid,"ped","WALK_player",4.1,1,1,1,1,1,1);
						case WALKSTYLE_SEXY: ApplyAnimation(playerid,"ped","WOMAN_walksexy",4.1,1,1,1,1,1,1);
						case WALKSTYLE_OLD: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1,1);
						case WALKSTYLE_SNEAK: ApplyAnimation(playerid,"PED","Player_Sneak",4.1,1,1,1,1,1,1);
						case WALKSTYLE_BLIND: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1,1);
						case WALKSTYLE_ARMED: ApplyAnimation(playerid,"PED","WALK_armed",4.1,1,1,1,1,1,1);
						case WALKSTYLE_POLICE: ApplyAnimation(playerid,"POLICE","Cop_move_FWD",4.1,1,1,1,1,1,1);
					}
					SetPVarInt(playerid, "AnimUse" , 1);
				}
			}
		}
	}
	return 1;
}
//============================================//
public VendingFinish(playerid)
{
    SetPVarInt(playerid, "Mute", 0);
    SetPVarInt(playerid, "Hunger", 0);
    ApplyAnimation(playerid, "VENDING", "VEND_Drink2_P", 3.0, 0, 0, 0, 0, 0);
    SetPlayerSpecialAction(playerid, 0); // Clear sprunk can.
    return DeletePVar(playerid,"VendingUse");
}
//============================================//
public PayDay(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
    new string[128], account, total = 150, Tax = 0, interest,Float:interestf;
	if(IsPlayerConnected(playerid))
	{
		if(GetPVarInt(playerid, "PlayerLogged") == 1)
		{
		    if(GetPVarInt(playerid, "PayDay") >= 60)
		    {
		        account = GetPVarInt(playerid, "Bank");
		        if(account >= 0 && account <= 30000) Tax = TaxValue;
		        if(account >= 30000 && account <= 60000) Tax = TaxValue*1;
		        if(account >= 60000 && account <= 80000) Tax = TaxValue*2;
		        if(account >= 80000 && account <= 100000) Tax = TaxValue*3;
		        if(account >= 100000 && account <= 300000) Tax = TaxValue*5;
		        if(account >= 300000 && account <= 600000) Tax = TaxValue*7;
		        if(account >= 600000 && account <= 900000) Tax = TaxValue*9;
		        if(account >= 900000) Tax = TaxValue*20;
		        new cnt;
				if(GetPVarInt(playerid, "ConnectTime") < 500)
				{
					cnt = GetPVarInt(playerid, "ConnectTime");
				}
				else
				{
					cnt=500;
				}
		        total+=500+cnt;
		        if(GetPVarInt(playerid,"Member") == 1 || GetPVarInt(playerid,"Member") == 2 || GetPVarInt(playerid,"Member") == 8)
		        {
		            if(GetPVarInt(playerid,"Bonus") > 0) total+=GetPVarInt(playerid,"Bonus");
		        }
				SendClientMessage(playerid, COLOR_GREEN, "");
		        SendClientMessage(playerid,COLOR_WHITE,":Bank Statement:");
		        format(string, sizeof(string), "Paycheck: $%d", total);
		        SendClientMessage(playerid,COLOR_GREEN,string);
				total -= Tax;
				interestf = (GetPVarInt(playerid, "Bank") / 100) * 0.5;
				interest = floatround(interestf, floatround_floor);
				if(interest > 700) interest = 700;
				if(interest < 0) interest = 0;
				if(GetPVarInt(playerid, "MonthDon") > 0) total = total + interest;
				//SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") + interest);
		        format(string, sizeof(string), "Tax: -$%d", Tax);
		        SendClientMessage(playerid,COLOR_GREEN,string);
		        if(GetPVarInt(playerid, "MonthDon") > 0)
		        {
			        format(string, sizeof(string), "Interest: +$%d", interest);
			        SendClientMessage(playerid,COLOR_GREEN,string);
				}
		        //==========//
		        if(total < 0) total = 1;
				if(Event == 2 || Event == 3) total = total*2;
				format(string, sizeof(string), "Total Amount: $%d", total);
		        SendClientMessage(playerid, COLOR_GREEN, string);
		        GameTextForPlayer(playerid, "~w~collect your check at the bank", 5000, 1);
		        SetPVarInt(playerid, "CheckEarn", GetPVarInt(playerid, "CheckEarn")+ total);
		        PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		        SetPVarInt(playerid, "PayCheck", 0);
		        if(Event != 1 && Event != 3) //Double Hours
				{
					SetPVarInt(playerid, "ConnectTime", 1+GetPVarInt(playerid, "ConnectTime"));
				}
				else
				{
					SetPVarInt(playerid, "ConnectTime", 2+GetPVarInt(playerid, "ConnectTime"));
				}
		        SetPlayerScore(playerid,GetPVarInt(playerid, "ConnectTime"));
		        SendClientMessage(playerid, COLOR_GREEN, " ");
				SetPVarInt(playerid, "PayDay", 0);
				//==========//
				if(GetPVarInt(playerid,"Member") == 1 || GetPVarInt(playerid,"Member") == 2 || GetPVarInt(playerid,"Member") == 8)
				{
				    new bonusex = FactionBonus[GetPVarInt(playerid, "Member")][GetPVarInt(playerid,"Rank")];
				    if(bonusex >= 1)
				    {
				        SetPVarInt(playerid, "CheckEarn", GetPVarInt(playerid, "CheckEarn")+bonusex);
				        format(string, sizeof(string), "Bonus: +$%d", bonusex);
			            SendClientMessage(playerid,COLOR_GREEN,string);
				    }
		        }
		        //==========//
		        if(GetPVarInt(playerid, "RentKey") >= 1 && VehicleInfo[GetPVarInt(playerid, "RentKey")][vType] == VEHICLE_RENTAL)
		        {
		            if(GetPVarInt(playerid, "CheckEarn") >= 50)
		            {
		                SendClientMessage(playerid, COLOR_WHITE, "Rental Fee: -$50");
		                SetPVarInt(playerid, "CheckEarn", GetPVarInt(playerid, "CheckEarn")-50);
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_WHITE, "Rental fee could not be paid!");
		                DespawnVehicle(GetPVarInt(playerid, "RentKey"));
		                DeletePVar(playerid, "RentKey");
		                GameTextForPlayer(playerid, "~w~You no longer rent a vehicle!", 5000, 3);
		            }
		        }
		        new hid = GetPVarInt(playerid, "HouseKey");
		        if(HouseInfo[hid][hOwned] == 1)
		        {
					if(!strmatch(PlayerName(playerid), HouseInfo[hid][hOwner])) {
						if(GetPVarInt(playerid, "Bank") < HouseInfo[hid][hValue])
						{
							SetPVarInt(playerid, "PaidRent", GetPVarInt(playerid, "PaidRent") + 1);
							if(GetPVarInt(playerid, "PaidRent") == 2)
							{
								SCM(playerid, COLOR_LIGHTRED, "You have been evicted from your house since you were unable to pay the rent.");
								SetPVarInt(playerid, "PaidRent",0);
								SetPVarInt(playerid, "HouseKey", 0);
							}
							else SCM(playerid, COLOR_LIGHTRED, "You were unable to pay your rent, you will be evicted if this happens again.");
						}
						else
						{
							SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank") - HouseInfo[hid][hValue]);
							format(string, sizeof(string), "Rent: -$%d", HouseInfo[hid][hValue]);
							SendClientMessage(playerid,COLOR_GREEN,string);
		        		    PayHouseRent(hid);
						}
					}
		        }
		        //==========//
		        if(GetPVarInt(playerid, "LicTime") > 0)
		        {
		            SetPVarInt(playerid, "LicTime", GetPVarInt(playerid, "LicTime")-1);
		            if(GetPVarInt(playerid, "LicTime") == 0)
		            {
		                SetPVarInt(playerid, "LicGuns", 0);
		                SendClientMessage(playerid,COLOR_WHITE,"You are now able to purchase weapons again!");
		            }
		        }
		        //==========//
		        if(GetPVarInt(playerid, "CheckEarn") <= 0) SetPVarInt(playerid, "CheckEarn", 0);
		        if(GetPVarInt(playerid, "PaintUse") > 0)
		        {
		            SetPVarInt(playerid, "PaintUse", GetPVarInt(playerid, "PaintUse")-1);
		            if(GetPVarInt(playerid, "PaintUse") == 0)
		            {
		                SendClientMessage(playerid,COLOR_WHITE,"You are now able to use the Pay & Spray again!");
		            }
		        }
				if(PlayerInfo[playerid][pForbid] > 0) {
					PlayerInfo[playerid][pForbid]--;
					if(PlayerInfo[playerid][pForbid] == 0) { SendClientMessage(playerid, COLOR_ORANGE, "[NOTICE] {FFFFFF}Your weapons restriction has expired, you may now use weapons again."); }
					SaveForbid(playerid);
				}
		        CallRemoteFunction("OnPlayerDataSave", "i", playerid);
		    }
		}
	}
    return 1;
}
//============================================//
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(GetPVarInt(playerid, "Admin") >= 1 && GetPlayerInterior(playerid) == 0)
    {
        SendClientMessage(playerid, COLOR_GREY, "You have been teleported.");
        SetPlayerVirtualWorld(playerid, 0);
        if(IsPlayerInAnyVehicle(playerid))
		{
            SetVehiclePosEx(GetPlayerVehicleID(playerid), fX, fY, fZ);
		}
		else
		{
            SetPlayerPosEx(playerid, fX, fY, fZ);
        }
    }
    return 1;
}
//============================================//
public ShowBlood(playerid)
{
	if(GetPVarInt(playerid,"PlayerLogged") == 1 && GetPVarInt(playerid,"PlayerBlood") == 0)
	{
        TextDrawHideForPlayer(playerid,BloodDraw[0]),TextDrawHideForPlayer(playerid,BloodDraw[1]),TextDrawHideForPlayer(playerid,BloodDraw[2]);
        TextDrawShowForPlayer(playerid,BloodDraw[0]),TextDrawShowForPlayer(playerid,BloodDraw[1]),TextDrawShowForPlayer(playerid,BloodDraw[2]);
        SetPVarInt(playerid,"PlayerBlood", 2);
    }
    return true;
}
//============================================//
public OnPlayerStreamIn(playerid, forplayerid)
{
	if(IsPlayerNPC(playerid)) {
	    new found = 0;
	    for(new i = 1; i < sizeof(NPCInfo); i++)
        {
            if(NPCInfo[i][nID] > 0 && found == 0)
            {
                if(strcmp(PlayerName(playerid), NPCInfo[i][nName], true) == 0)
                {
                    found++;
                    SetPlayerFacingAngle(playerid, NPCInfo[i][n_A]);
                    switch(NPCInfo[i][nType])
                    {
                        case NPC_TYPE_STRIPPER:
						{
						    new rand = random(6);
						    switch(rand)
						    {
						        case 1: { ApplyAnimation(playerid,"STRIP","strip_A",4.0,1,1,1,1,0); }
						        case 2: { ApplyAnimation(playerid,"STRIP","strip_B",4.0,1,1,1,1,0); }
						        case 3: { ApplyAnimation(playerid,"STRIP","strip_C",4.0,1,1,1,1,0); }
						        case 4: { ApplyAnimation(playerid,"STRIP","strip_D",4.0,1,1,1,1,0); }
						        case 5: { ApplyAnimation(playerid,"STRIP","strip_F",4.0,1,1,1,1,0); }
						        default: { ApplyAnimation(playerid,"STRIP","strip_G",4.0,1,1,1,1,0); }
						    }
						}
                        case NPC_TYPE_BOXER: { ApplyAnimation(playerid,"GYMNASIUM","gym_shadowbox",4.1,1,1,1,1,0); }
                        case NPC_TYPE_DANCER: { ApplyAnimation(playerid,"GFUNK","DANCE_LOOP", 4.0, 1, 0, 0, 1, 0); }
                    }
                }
            }
        }
	} else {
		switch(GetPVarInt(playerid, "MaskUse"))
		{
			case 0: ShowPlayerNameTagForPlayer(forplayerid,playerid,1);
			case 1: ShowPlayerNameTagForPlayer(forplayerid,playerid,0);
		}	
	}
	return 1;
}
//============================================//
public OnPlayerSpawn(playerid)
{
	new string[128];
	if(GetPVarInt(playerid, "PlayerLogged") == 1)
	{
	    SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL,GetPVarInt(playerid, "9mmSkill"));
	    SetPlayerSkillLevel(playerid,WEAPONSKILL_SAWNOFF_SHOTGUN,GetPVarInt(playerid, "sawnoffSkill"));
	    SetPlayerSkillLevel(playerid,WEAPONSKILL_MICRO_UZI,GetPVarInt(playerid, "uziSkill"));
        switch(GetPVarInt(playerid, "FightStyle"))
        {
            case 0: SetPlayerFightingStyle(playerid,FIGHT_STYLE_NORMAL);
            case 1: SetPlayerFightingStyle(playerid,FIGHT_STYLE_BOXING);
            case 2: SetPlayerFightingStyle(playerid,FIGHT_STYLE_KUNGFU);
            case 3: SetPlayerFightingStyle(playerid,FIGHT_STYLE_KNEEHEAD);
            case 4: SetPlayerFightingStyle(playerid,FIGHT_STYLE_GRABKICK);
            case 5: SetPlayerFightingStyle(playerid,FIGHT_STYLE_ELBOW);
        }
        CallRemoteFunction("LoadHolsters","i",playerid);
		if(GetPVarInt(playerid, "Jailed") == 1)
		{
		    SetPlayerPosEx(playerid, -1406.7714,1245.1904,1029.8984);
			SetPlayerFacingAngle(playerid, 177.0008);
			SetPlayerInterior(playerid, 16);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			format(string, sizeof(string),"[JAILED] You are in jail for %d seconds.", GetPVarInt(playerid, "Jailtime"));
			SCM(playerid, 0xE65A5AAA, string);
			return true;
		}
		if(GetPVarInt(playerid, "Jailed") == 2)
		{
		    new ran = random(3) + 1;
			if(ran == 1) SetPlayerPosEx(playerid, 2592.0681,-1506.9999,-48.9141);
			else if(ran == 2) SetPlayerPosEx(playerid, 2588.0879,-1526.0541,-48.9141);
			else SetPlayerPosEx(playerid, 2583.7458,-1526.5377,-48.9141);
			SCM(playerid, 0xE65A5AAA, "[JAILED] You are in jail.");
			return true;
		}
        if(GetPVarInt(playerid, "Dead") == 1 || GetPVarInt(playerid, "Dead") == 2)
		{
			if(PlayerInfo[playerid][pPlayerWeapon] > 0)
			{
				if(!IsPlayerAttachedObjectSlotUsed(playerid, 9)) SetPlayerAttachedObject(playerid, 9, PrintIid(PlayerInfo[playerid][pPlayerWeapon]), 6, 0.0, 0.0, 0.0);
			}
			ResetPlayerWeapons(playerid);
			TogglePlayerControllableEx(playerid,false);
		    SetPVarInt(playerid, "Dead", 2);
		    SetPlayerPosEx(playerid,GetPVarFloat(playerid, "PosX"),GetPVarFloat(playerid, "PosY"),GetPVarFloat(playerid, "PosZ"));
			SetPlayerFacingAngle(playerid,GetPVarFloat(playerid, "Angle"));
			SetPlayerInterior(playerid,GetPVarInt(playerid, "Interior"));
			SetPlayerVirtualWorld(playerid,GetPVarInt(playerid, "World"));
			SetCameraBehindPlayer(playerid);
            SendClientMessage(playerid,COLOR_WHITE,"Type (/accept death) to continue.");
            SetPlayerHealth(playerid,1.0);
            new rand = random(5)+1;
			switch(rand)
			{
			    case 1: ApplyAnimation(playerid, "ped", "FLOOR_hit", 4.0, 0, 1, 1, 1, -1);
		        case 2: ApplyAnimation(playerid, "ped", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, -1);
		        case 3: ApplyAnimation(playerid, "ped", "KO_shot_front", 4.0, 0, 1, 1, 1, -1);
		        case 4: ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1);
                case 5: ApplyAnimation(playerid, "ped", "BIKE_fall_off", 4.0, 0, 1, 1, 1, -1);
			    default: ApplyAnimation(playerid, "FINALE", "FIN_Land_Die", 4.0, 0, 1, 1, 1, -1);
			}
			//if(GetPVarInt(playerid, "Admin") < 10) SetPVarInt(playerid, "DeathTime", GetCount()+60000);
            return 1;
		}
		if(GetPVarInt(playerid, "Dead") == 3)
		{
		    ResetPlayerWeaponsEx(playerid);
            SetPVarInt(playerid, "Mute", 1);
            TogglePlayerControllableEx(playerid,false);
            SetPlayerHealth(playerid,1.0);
            SetPlayerInterior(playerid,0);
            SetPlayerPosEx(playerid, 269.4417,1861.8927,8.7578);
            SetPlayerCameraPos(playerid, 275.2712,1859.6465,9.8133);
		    SetPlayerCameraLookAt(playerid, 275.2712,1859.6465,16.6257, 0);
            if(playerid == 0) SetPlayerVirtualWorld(playerid,INVALID_MAXPL);
            else SetPlayerVirtualWorld(playerid,playerid);
            return 1;
		}
		if(GetPVarInt(playerid, "Dead") == 5) SetPVarInt(playerid, "Dead", 0);
		SetPlayerSkin(playerid,GetPVarInt(playerid,"Model"));
		if(PlayerInfo[playerid][pPlayerWeapon] > 0 && PlayerInfo[playerid][pPlayerAmmo] > 0) { SetPlayerArmedWeapon(playerid, PlayerInfo[playerid][pPlayerWeapon]); }
		if(PlayerInfo[playerid][pPeeping] == 1) {
			new key = GetPVarInt(playerid, "LastHouse");
			SetPlayerVirtualWorld(playerid, key);
			SetPlayerInterior(playerid, HouseInfo[key][hIntIn]);
			SetPlayerPosEx(playerid, HouseInfo[key][hXi], HouseInfo[key][hYi], HouseInfo[key][hZi]);
			SetCameraBehindPlayer(playerid);
			DeletePVar(playerid, "LastHouse");
			PlayerInfo[playerid][pPeeping] = 0;
		}
	}
	return 1;
}
//============================================//
public OnPlayerDeath(playerid, killerid, reason)
{
	new string[128], Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
    SetPVarInt(playerid, "Drag", INVALID_MAXPL);
	RemovePlayerTag(playerid);
    ResetPlayerWeapons(playerid);
    if(GetPVarInt(playerid, "Mobile") != INVALID_MAXPL)
    {
        if(IsPlayerConnected(GetPVarInt(playerid, "Mobile")) && GetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile") == playerid)
        {
            CallRemoteFunction("LoadRadios","i", GetPVarInt(playerid, "Mobile"));
		    SendClientMessage(GetPVarInt(playerid, "Mobile"),COLOR_GREY,"The phone line went dead...");
		    if(GetPlayerSpecialAction(GetPVarInt(playerid, "Mobile")) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(GetPVarInt(playerid, "Mobile"), SPECIAL_ACTION_STOPUSECELLPHONE);
			cancelPayphone(GetPVarInt(playerid, "Mobile"));
            SetPVarInt(GetPVarInt(playerid, "Mobile"), "Mobile", INVALID_MAXPL);
			cancelPayphone(playerid);
		}
        SetPVarInt(playerid, "Mobile", INVALID_MAXPL);
    }
    if(killerid != INVALID_MAXPL) {
	    if(IsPlayerConnected(killerid) && GetPVarInt(playerid, "Dead") < 1)
		{
		    format(string, sizeof(string), "KILL: %s has killed %s with a %s.", PlayerName(killerid), PlayerName(playerid), DeathNames[reason]);
	    	SendAdminMessage(0xAA3333AA, string);
	    	if(!IsACop(killerid) && GetPVarInt(playerid, "Jailed") == 0)
	    	{
			    if(reason >= 0 && reason <= 34)
				{
				    if(X > 46.7115 && Y > -2755.979 && X < 2931.147 && Y < -548.8602)
					{
			    	    /*SendFactionMessage(1, COLOR_BLUE, "HQ: All Units - HQ: Civilian is injured.");
						format(string, sizeof(string), "HQ: Location: %s",GetPlayerArea(killerid));
						SendFactionMessage(1, COLOR_BLUE, string);*/
						SendFactionMessage(2, COLOR_PINK, "HQ: All Units - HQ: Civilian is injured.");
						format(string, sizeof(string), "HQ: Location: %s",GetPlayerArea(killerid));
						SendFactionMessage(2, COLOR_PINK, string);
				    }
				}
		    }
		}
	}
	if(GetPVarInt(playerid, "Jailed") == 0)
	{
		SetPVarInt(playerid, "DR", reason);
		if(GetPVarInt(playerid, "Dead") < 1) SetPVarInt(playerid, "DeathTime", GetCount()+60000);
	    SetPVarInt(playerid, "Dead", 1);
    	CallRemoteFunction("OnPlayerDataSave", "i", playerid);
    }
	if(HavingBall[playerid]) Baller = 999;
    HavingBall[playerid] = 0; //Basketball
	PlayerInfo[playerid][pBalling] = 0;
	PlayerInfo[playerid][pBallTeam] = 0;
	SetPlayerColor(playerid, COLOR_WHITE);
	if(PlayerInfo[playerid][pFishing] == 1) {
		if(IsPlayerAttachedObjectSlotUsed(playerid,HOLDOBJECT_CLOTH4)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4);
		PlayerInfo[playerid][pFishing] = 0;
	}
	return 1;
}
//============================================//
public EngineResult(playerid, vehicleid)
{
    DeletePVar(playerid, "EngAmpt");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
    if(GetPlayerVehicleID(playerid) != vehicleid) return true;
    if(VehicleInfo[vehicleid][vEngine] != 0) return true;
    new rand = random(1000);
    new Float:h;
    GetVehicleHealth(vehicleid, h);
    if(rand < (floatround(h, floatround_ceil)) - 50)
    {
        VehicleInfo[vehicleid][vEngine]=1;
        CarEngine(vehicleid, VehicleInfo[vehicleid][vEngine]);
        GameTextForPlayer(playerid, "~n~~w~engine ~g~~h~on~w~!", 5000, 5);
        foreach(new i : Player)
        {
            if(strcmp(PlayerInfo[i][pAudioUrl], "http://www.diverseroleplay.org/sounds/vehstart.mp3", true) == 0)
            {
                CallRemoteFunction("LoadRadios","i", i);
            }
        }
		TriggerBomb(vehicleid);
	}
	else
	{
        GameTextForPlayer(playerid, "~n~~n~~n~~w~attempt ~r~~h~failed~n~~w~try again!", 5000, 3);
    }
	return true;
}
//============================================//
public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsPlayerNPC(playerid)) return 1;
    UnAFK(playerid);
	new string[128];
	switch(newstate)
	{
	    case PLAYER_STATE_DRIVER:
	    {
	        new idcar = GetPlayerVehicleID(playerid);
	        if(idcar == BotBus && !IsPlayerNPC(playerid)) return Kick(playerid);
		    if(idcar == BotBus2 && !IsPlayerNPC(playerid)) return Kick(playerid);
		    if(idcar == BotTrain && !IsPlayerNPC(playerid)) return Kick(playerid);			
	        if(GetPVarInt(playerid, "EnterVehicle") < GetCount() && GetPVarInt(playerid, "Admin") == 0 && GetPlayerPing(playerid) <= 800)
		    {
		        format(string, sizeof(string), "AdmCmd: %s is supposedly vehicle warping.", PlayerName(playerid));
			    SendAdminMessage(COLOR_YELLOW, string);
		        new acount = GetAdminCount(2);
		        if(acount == 0)
		        {
					//KickPlayer(playerid, "You have been kicked for supposedly vehicle warping.");
		        }
		        else
		        {
			        SendClientMessage(playerid, COLOR_WHITE, "You have been ejected due to supposedly vehicle warping.");
			        RemovePlayerFromVehicle(playerid);
			    }
			    return true; // Pause the script from entering extra useless information.
			}
			DeletePVar(playerid,"EnterVehicle");
			DeletePVar(playerid, "FlipWarn");
			RemovePlayerTag(playerid);
	        if(GetPVarInt(playerid, "PlayerLogged") == 1)
	        {
	            //=========//]
	            SetPlayerArmedWeapon(playerid,0);
	            //=========//]
				if(PlayerInfo[playerid][pBalling] == 1) {
					PlayerInfo[playerid][pBalling] = 0;
					scm(playerid, COLOR_GREEN, "[Basketball] You've been removed from the game for entering a vehicle.");
				}
				//=========//
	            if(!IsNotAEngineCar(idcar))
	            {
	                CarEngine(idcar, VehicleInfo[idcar][vEngine]);
	                if(GetPVarInt(playerid, "VD") == 0)
	                {
	        	        VehicleIDraw[0][playerid] = TextDrawCreate(513.0, 351.0, "IIIIIIIIII");
				        TextDrawBackgroundColor(VehicleIDraw[0][playerid], 255);
				        TextDrawFont(VehicleIDraw[0][playerid], 2);
				        TextDrawLetterSize(VehicleIDraw[0][playerid], 0.500000, 1.500000);
				        TextDrawColor(VehicleIDraw[0][playerid], -1);
				        TextDrawSetOutline(VehicleIDraw[0][playerid], 0);
				        TextDrawSetProportional(VehicleIDraw[0][playerid], 1);
				        TextDrawSetShadow(VehicleIDraw[0][playerid], 1);
            	        VehicleIDraw[1][playerid] = TextDrawCreate(513.0, 386.0, "IIIIIIIIII");
		    	        TextDrawBackgroundColor(VehicleIDraw[1][playerid], 255);
		    	        TextDrawFont(VehicleIDraw[1][playerid], 2);
		    	        TextDrawLetterSize(VehicleIDraw[1][playerid], 0.500000, 1.500000);
		    	        TextDrawColor(VehicleIDraw[1][playerid], -1);
		    	        TextDrawSetOutline(VehicleIDraw[1][playerid], 0);
		    	        TextDrawSetProportional(VehicleIDraw[1][playerid], 1);
		    	        TextDrawSetShadow(VehicleIDraw[1][playerid], 1);
		    	        SetPVarInt(playerid, "VD", 1);
	        	        for(new i; i < 5; i++) { TextDrawShowForPlayer(playerid, VehicleDraw[i]); }
				        for(new i; i < 2; i++) { TextDrawShowForPlayer(playerid, VehicleIDraw[i][playerid]); }
				    }
				} else {
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(idcar, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(idcar, 1, lights, alarm, doors, bonnet, boot, objective);
				}		
	            //=========//
                format(string, 128, "~n~~n~~n~~n~~n~~n~~n~~g~~h~%s", VehicleName[GetVehicleModel(idcar)-400]);
	            GameTextForPlayer(playerid, string, 3500, 5);
				if(IsMatTruck(idcar)) {
					new trailer = GetVehicleTrailer(idcar);
					if(IsTrailerAttachedToVehicle(idcar) && IsMatTrailer(trailer)) {
						if(VehicleInfo[trailer][vMats] > 0) {
							DisablePlayerCheckpoint(playerid);
							SetPlayerCheckpoint(playerid, -2091.3152, -2242.6431, 30.6625, 3.0);
							scm(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Drive to the checkpoint on your minimap to collect your materials. (Beware of robbers.)");
						} else scm(playerid, COLOR_BLUE, "[TIP] {FFFFFF}You can fill this trailer with materials at the Las Venturas mine.");
					} else scm(playerid, COLOR_BLUE, "[TIP] {FFFFFF}This vehicle is qualified to do materials runs from the Las Venturas mine. (Trailer required.)");
				}
	            switch(VehicleInfo[idcar][vType])
	            {
	                case VEHICLE_RENTAL:
	                {
	                    if(GetPVarInt(playerid, "RentKey") != idcar) RemovePlayerFromVehicle(playerid);
	                }
	                case VEHICLE_JOB:
	                {
	                    if(GetPVarInt(playerid, "RouteVeh") != idcar) RemovePlayerFromVehicle(playerid);
	                    if(GetPVarInt(playerid, "Job") != VehicleInfo[idcar][vJob]) RemovePlayerFromVehicle(playerid);
	                    DeletePVar(playerid, "RouteOT");
	                    if(GetPVarInt(playerid, "OnRoute") == 0)
	                    {
							new id = GetPVarInt(playerid, "OnRoute");
                            if(GetPVarInt(playerid, "JobReduce") >= 1 && GetPVarInt(playerid, "MonthDon") == 0)
							{
							    RemovePlayerFromVehicle(playerid);
							    format(string, sizeof(string), "You must wait (%d) seconds before starting another route!", GetPVarInt(playerid, "JobReduce"));
					    	    SCM(playerid, COLOR_LIGHTRED, string);
							    return true;
							}
	                        switch(VehicleInfo[idcar][vJob])
	                        {
	                            case 1: // Mechanic
	                            {
	                                SendClientMessage(playerid, COLOR_WHITE, "You are now on mechanic duty, use the commands (/repair, /refill).");
	                                SetPVarInt(playerid, "OnRoute", 1);
	                                DeletePVar(playerid, "RouteOT");
	                            }
	                            case 2: // Garbage Man
	                            {
	                                SetPVarInt(playerid, "OnRoute", 1);
	                                DeletePVar(playerid, "RouteOT");
	                                TogglePlayerAllDynamicCPs(playerid, false);
	                                NextRoute(playerid, TrashRoute[id][0], TrashRoute[id][1], TrashRoute[id][2], 0);
	                            }
	                            case 3: // Sweeper Route
	                            {
	                                SetPVarInt(playerid, "OnRoute", 1);
	                                DeletePVar(playerid, "RouteOT");
	                                TogglePlayerAllDynamicCPs(playerid, false);
	                                NextRoute(playerid, SweepRoute[id][0], SweepRoute[id][1], SweepRoute[id][2], 0);
	                            }
	                            case 4: // Pizza Boy
	                            {
	                                SetPVarInt(playerid, "OnRoute", 1);
	                                DeletePVar(playerid, "RouteOT");
	                                TogglePlayerAllDynamicCPs(playerid, false);
	                                NextRoute(playerid, 2111.6963, -1788.6849, 13.5608, 0);
	                            }
	                            case 5: // Taxi Driver
	                            {
	                                SetPVarInt(playerid, "OnRoute", 1);
	                                DeletePVar(playerid, "RouteOT");
	                                SendClientMessage(playerid, COLOR_WHITE, "You are now on taxi duty, type (/setfare) to set a fare.");
	                            }
	                            case 6: // Trucker
	                            {
									SetPVarInt(playerid, "OnRoute", 1);
									DeletePVar(playerid, "RouteOT");
									new found = 0;
	        	   				    foreach(new b : BizIterator) {
		        	    			    if(BizInfo[b][bReq] == 1) {
		        	        				found++;
											break;
		        	    				}
									}
									if(found == 0)
									{
									    new rand2 = random(2)+1;
									    switch(rand2)
									    {
									        case 1: SetPVarInt(playerid, "TruckerRoute", 2);
									        default: SetPVarInt(playerid, "TruckerRoute", 3);
									    }
									}
									else
									{
									    SetPVarInt(playerid, "TruckerRoute", 1);
									}
									SendClientMessage(playerid,COLOR_WHITE,"Head to the checkpoint to start a delivery.");
									new rand = random(3)+1;
				    				switch(rand)
				    				{
				       				    case 1:
				       				    {
				        				    SetPVarInt(playerid, "TruckerPos", 1);
										    SetPlayerCheckpoint(playerid,64.0079,-264.9132,1.5781,5.0);
										}
				        				case 2:
				        				{
				        				    SetPVarInt(playerid, "TruckerPos", 2);
										    SetPlayerCheckpoint(playerid,2281.6870,-72.5195,26.5047,5.0);
										}
				        				default:
				        				{
				        				    SetPVarInt(playerid, "TruckerPos", 3);
										    SetPlayerCheckpoint(playerid,1212.4586,193.5421,19.9181,5.0);
										}
				    				}
   	                				TogglePlayerAllDynamicCPs(playerid, false);
	                            }
	                            case 7: // Farmer
	                            {
	                                SetPVarInt(playerid, "OnRoute", 1);
	                                DeletePVar(playerid, "RouteOT");
	                                TogglePlayerAllDynamicCPs(playerid, false);
	                                NextRoute(playerid, FarmerRoute[id][0], FarmerRoute[id][1], FarmerRoute[id][2], 0);
	                            }
	                        }
	                    }
	                }
	                case VEHICLE_LSPD:
	                {
	                    if(GetPVarInt(playerid, "Member") != 1) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }
	                case VEHICLE_LSFD:
	                {
	                    if(GetPVarInt(playerid, "Member") != 2) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }
	                case VEHICLE_GOV:
	                {
	                    if(GetPVarInt(playerid, "Member") != 8) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }
	                case VEHICLE_RLS:
	                {
	                    if(GetPVarInt(playerid, "Member") != 3) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }
	                case VEHICLE_SAN:
	                {
	                    if(GetPVarInt(playerid, "Member") != 4) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }
	                case VEHICLE_RAPID:
	                {
	                    if(GetPVarInt(playerid, "Member") != 5) return RemovePlayerFromVehicle(playerid);
				        format(string, sizeof(string),"Vehicle borrowed by %s.", CopInfo[idcar][Owner]);
		                SendClientMessage(playerid, 0x8080FF96, string);
	                }					
	                case VEHICLE_PERSONAL:
	        	    {
					    if(VehicleInfo[idcar][vLock] == 1)
					    {
					        if(GetVehicleModel(idcar) == 481 || GetVehicleModel(idcar) == 509 || GetVehicleModel(idcar) == 510)
					        {
							    new Float:X, Float:Y, Float:Z;
							    GetPlayerPos(playerid,X,Y,Z); SetPlayerPosEx(playerid,X,Y,Z);
							    RemovePlayerFromVehicle(playerid);
				                SendClientMessage(playerid,COLOR_LIGHTRED,"WARNING: You can't ride a bike if it's locked!");
				                return true;
					        }
					    }
					    if(VehicleInfo[idcar][vEngine] == 0 && !IsNotAEngineCar(idcar))
					    {
					        if(!PlayerOwnsVehicle(playerid, idcar) && !HasCarKey(playerid, VehicleInfo[idcar][vID]))
					        {
								if(GetVehicleVirtualWorld(idcar) == 0)
								{
					                SendClientMessage(playerid, COLOR_LIGHTRED, "Press '~k~~CONVERSATION_YES~' to hotwire the vehicle!");
					                return true;
					            }
					            else
					            {
					                RemovePlayerFromVehicle(playerid);
					            }
             				}
					    }
					    VehicleInfo[idcar][vAlarm] = 0;
	        	        format(string, sizeof(string),"Vehicle registered to %s.", GetNameWithSpace(VehicleInfo[idcar][vOwner]));
		                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		                if(PlayerOwnsVehicle(playerid, idcar))
		                {
	                        if(VehicleInfo[idcar][vInsurance] > 1 && VehicleInfo[idcar][vInsuranceC] > 0)
	                        {
	                            format(string, sizeof(string),"You owe $%d to the insurance company, type (/v payinsurance) or wait until payday!", VehicleInfo[idcar][vInsuranceC]);
		                        SendClientMessage(playerid, COLOR_LIGHTRED, string);
	                        }
	                    }
					}
	                case VEHICLE_THEFT:
	        	    {
					    if(VehicleInfo[idcar][vEngine] == 0 && !IsNotAEngineCar(idcar))
					    {
							if(GetVehicleVirtualWorld(idcar) == 0)
							{
								SendClientMessage(playerid, COLOR_LIGHTRED, "Press '~k~~CONVERSATION_YES~' to hotwire the vehicle!");
								return true;
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
							}
					    }
					}
	            }
	            /*if(VehicleInfo[idcar][vEngine] == 0)
	            {
	                ClearChatbox(playerid, 1);
	                SendClientMessage(playerid, COLOR_LIGHTRED, "Press '~k~~CONVERSATION_YES~' to toggle the engine!");
	            }*/
				if(!IsNotAEngineCar(idcar))
				{
					if(strcmp(VehicleInfo[idcar][vRadio], "None", true) == 0){}
	            	else
	            	{
	                    PlayAudioStreamForPlayerEx(playerid, VehicleInfo[idcar][vRadio]);
	            	}
	            	if(GetPVarInt(playerid, "Seatbelt") == 0)
				    {
					    if(IsHelmetCar(idcar)) SendClientMessage(playerid,COLOR_GREEN,"Remember to put your helmet on (/helmet).");
					    else SendClientMessage(playerid,COLOR_GREEN,"Remember to put your seatbelt on (/seatbelt).");
				    }
	            }
	        }
	    }
	    case PLAYER_STATE_PASSENGER:
	    {
	        if(GetPVarInt(playerid, "EnterVehicle") < GetCount() && GetPVarInt(playerid, "Admin") == 0 && GetPlayerPing(playerid) <= 800)
		    {
		        format(string, sizeof(string), "AdmCmd: %s was kicked by Anticheat for supposedly vehicle warping.", PlayerName(playerid));
			    SendAdminMessage(COLOR_YELLOW, string);
			    SendClientMessage(playerid, COLOR_WHITE, "You have been kicked by Anticheat for supposedly vehicle warping.");
			    Kick(playerid);
			    return true; // Pause the script from entering extra useless information.
			}
			DeletePVar(playerid,"EnterVehicle");
			if(PlayerInfo[playerid][pPlayerWeapon] == 24) SetPlayerArmedWeapon(playerid,0);
	        //=========//
	        if(GetPlayerVehicleID(playerid) == BotBus || GetPlayerVehicleID(playerid) == BotBus2)
			{
			    if(GetPlayerMoneyEx(playerid) >= 3)
				{
				    GivePlayerMoneyEx(playerid,-3);
				    GameTextForPlayer(playerid, "~r~-$3.", 5000, 1);
				}
				else
				{
				    SendClientMessage(playerid,COLOR_WHITE,"The bus driver kicked you off the bus because you could not afford the 3$ fare.");
				    RemovePlayerFromVehicle(playerid);
				    return true;
				}
			}
			if(GetPlayerVehicleID(playerid) == BotTrain)
			{
			    if(GetPlayerMoneyEx(playerid) >= 50)
				{
					GivePlayerMoneyEx(playerid,-50);
			    	GameTextForPlayer(playerid, "~r~-$50.", 5000, 1);
				}
				else
				{
					SendClientMessage(playerid,COLOR_WHITE,"The train driver kicked you off the train because you could not afford the 50$ fare.");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
			}
			//=========//
			if(PlayerInfo[playerid][pBalling] == 1) {
				PlayerInfo[playerid][pBalling] = 0;
				scm(playerid, COLOR_GREEN, "[Basketball] You've been removed from the game for entering a vehicle.");
			}
			//=========//
	        new idcar = GetPlayerVehicleID(playerid);
	        if(!IsNotAEngineCar(idcar))
	        {
	            if(GetPVarInt(playerid, "VD") == 0)
	            {
	        	    VehicleIDraw[0][playerid] = TextDrawCreate(513.0, 351.0, "IIIIIIIIII");
				    TextDrawBackgroundColor(VehicleIDraw[0][playerid], 255);
				    TextDrawFont(VehicleIDraw[0][playerid], 2);
				    TextDrawLetterSize(VehicleIDraw[0][playerid], 0.500000, 1.500000);
				    TextDrawColor(VehicleIDraw[0][playerid], -1);
				    TextDrawSetOutline(VehicleIDraw[0][playerid], 0);
				    TextDrawSetProportional(VehicleIDraw[0][playerid], 1);
				    TextDrawSetShadow(VehicleIDraw[0][playerid], 1);
            	    VehicleIDraw[1][playerid] = TextDrawCreate(513.0, 386.0, "IIIIIIIIII");
		    	    TextDrawBackgroundColor(VehicleIDraw[1][playerid], 255);
		    	    TextDrawFont(VehicleIDraw[1][playerid], 2);
		    	    TextDrawLetterSize(VehicleIDraw[1][playerid], 0.500000, 1.500000);
		    	    TextDrawColor(VehicleIDraw[1][playerid], -1);
		    	    TextDrawSetOutline(VehicleIDraw[1][playerid], 0);
		    	    TextDrawSetProportional(VehicleIDraw[1][playerid], 1);
		    	    TextDrawSetShadow(VehicleIDraw[1][playerid], 1);
		    	    SetPVarInt(playerid, "VD", 1);
	        	    for(new i; i < 5; i++) { TextDrawShowForPlayer(playerid, VehicleDraw[i]); }
				    for(new i; i < 2; i++) { TextDrawShowForPlayer(playerid, VehicleIDraw[i][playerid]); }
				}
	        	//=========//
				if(strcmp(VehicleInfo[idcar][vRadio], "None", true) == 0){}
				else
				{
					PlayAudioStreamForPlayerEx(playerid, VehicleInfo[idcar][vRadio]);
				}
				//=========//
	        	if(VehicleInfo[idcar][vType] == VEHICLE_JOB) {
	        	    InitiateFare(playerid);
	        	}
	        	//=========//
	        	if(GetPVarInt(playerid, "Seatbelt") == 0)
				{
			    	if(IsHelmetCar(idcar)) SendClientMessage(playerid,COLOR_GREEN,"Remember to put your helmet on, (/helmet).");
					else SendClientMessage(playerid,COLOR_GREEN,"Remember to put your seatbelt on, (/seatbelt).");
		    	}
		    }
	    }
	}
	switch(oldstate)
	{
		case PLAYER_STATE_DRIVER:
	    {
			mdc_Hide(playerid, true);
			StopProgress(playerid);
			StopAudioStreamForPlayerEx(playerid);
	        DeletePVar(playerid, "PizzaTimeEx");
	        if(GetPVarInt(playerid, "VD") == 1)
	        {
	            for(new i; i < 5; i++) { TextDrawHideForPlayer(playerid, VehicleDraw[i]); }
			    for(new i; i < 2; i++)
			    {
			        TextDrawHideForPlayer(playerid, VehicleIDraw[i][playerid]);
		            TextDrawDestroy(VehicleIDraw[i][playerid]);
			    }
			    DeletePVar(playerid, "VD");
			}
			if(GetPVarInt(playerid, "Hotwire") > 0) { DeletePVar(playerid,"Hotwire"); }
			if(GetPVarInt(playerid, "TakeTest") >= 1)
			{
			    DespawnVehicle(GetPVarInt(playerid, "TestVeh"));
			    DeletePVar(playerid, "TakeTest"), DeletePVar(playerid, "TestVeh");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "FAILED: You left your vehicle!");
			    DisablePlayerRaceCheckpoint(playerid);
			}
			if(IsPlayerAttachedObjectSlotUsed(playerid,HOLDOBJECT_CLOTH1)) RemovePlayerAttachedObject(playerid,HOLDOBJECT_CLOTH1);
			SetPVarInt(playerid, "Seatbelt", 0);
			LoadRadios(playerid);
			if(GetPVarInt(playerid, "OnRoute") != 0)
			{
				switch(GetPVarInt(playerid, "Job"))
				{
				    case 1: return true;
				    case 5: return true;
				}
				SetPVarInt(playerid, "RouteOT", 15);
			}
	    }
	    case PLAYER_STATE_PASSENGER:
	    {
			mdc_Hide(playerid, true);
	        StopAudioStreamForPlayerEx(playerid);
	        RemovePlayerTag(playerid);
	        if(IsPlayerAttachedObjectSlotUsed(playerid,HOLDOBJECT_CLOTH1)) RemovePlayerAttachedObject(playerid,HOLDOBJECT_CLOTH1);
	        SetPVarInt(playerid, "Seatbelt", 0);
	        if(GetPVarInt(playerid, "VD") == 1)
	        {
	            for(new i; i < 5; i++) { TextDrawHideForPlayer(playerid, VehicleDraw[i]); }
			    for(new i; i < 2; i++)
			    {
			        TextDrawHideForPlayer(playerid, VehicleIDraw[i][playerid]);
		            TextDrawDestroy(VehicleIDraw[i][playerid]);
			    }
			    DeletePVar(playerid, "VD");
			}
			LoadRadios(playerid);
	    }
	}
	return 1;
}
//============================================//
/*public FadeScreen(playerid, type)
{
	switch(type)
	{
	    case 1: // Fade In
	    {
            if(GetPVarInt(playerid, "FADEIN") == 0)
            {
                FadeTime[playerid]=0;
                SetPVarInt(playerid, "FADEIN", 1);
                FadeDraw[playerid] = TextDrawCreate(-10.0, 1.0, "-INPUT TEXT-");
		        TextDrawBackgroundColor(FadeDraw[playerid], 0);
		        TextDrawFont(FadeDraw[playerid], 1);
		        TextDrawLetterSize(FadeDraw[playerid], 0.500000, 50.0);
		        TextDrawColor(FadeDraw[playerid], 0);
		        TextDrawSetOutline(FadeDraw[playerid], 1);
		        TextDrawSetProportional(FadeDraw[playerid], 1);
		        TextDrawUseBox(FadeDraw[playerid], 1);
		        TextDrawBoxColor(FadeDraw[playerid], 255);
		        TextDrawTextSize(FadeDraw[playerid], 720.0, 0.0);
            }
            if(GetPVarInt(playerid, "FADEOUT")) DeletePVar(playerid, "FADEOUT");
			if(FadeTime[playerid] >= 255 && FadeTime[playerid] <= 299)
			{
			    TextDrawBoxColor(FadeDraw[playerid], 255);
			    FadeTime[playerid]=300;
			    SetTimerEx("FadeScreen", 2000, false, "ii", playerid, 1);
			    return 1;
			}
			if(FadeTime[playerid] >= 300) // End the fade
			{
			    TextDrawHideForPlayer(playerid, FadeDraw[playerid]);
			    FadeTime[playerid]=0;
			    DeletePVar(playerid, "FADEIN");
			    TextDrawDestroy(FadeDraw[playerid]);
			    CallRemoteFunction("OnPlayerFade","ii",playerid, 1);
			    return 1;
			}
			if(FadeTime[playerid] == 0) TextDrawBoxColor(FadeDraw[playerid], 0), TextDrawShowForPlayer(playerid, FadeDraw[playerid]);
            FadeTime[playerid]+=25;
            TextDrawBoxColor(FadeDraw[playerid], FadeTime[playerid]);
            TextDrawHideForPlayer(playerid, FadeDraw[playerid]);
            TextDrawShowForPlayer(playerid, FadeDraw[playerid]);
            SetTimerEx("FadeScreen", 20, false, "ii", playerid, 1);
	    }
	    case 2: // Fade Out
	    {
	        if(GetPVarInt(playerid, "FADEOUT") == 0)
            {
                FadeTime[playerid]=255;
                SetPVarInt(playerid, "FADEOUT", 1);
                FadeDraw[playerid] = TextDrawCreate(-10.0, 1.0, "-INPUT TEXT-");
		        TextDrawBackgroundColor(FadeDraw[playerid], 0);
		        TextDrawFont(FadeDraw[playerid], 1);
		        TextDrawLetterSize(FadeDraw[playerid], 0.500000, 50.0);
		        TextDrawColor(FadeDraw[playerid], 0);
		        TextDrawSetOutline(FadeDraw[playerid], 1);
		        TextDrawSetProportional(FadeDraw[playerid], 1);
		        TextDrawUseBox(FadeDraw[playerid], 1);
		        TextDrawBoxColor(FadeDraw[playerid], 255);
		        TextDrawTextSize(FadeDraw[playerid], 720.0, 0.0);
            }
            if(GetPVarInt(playerid, "FADEIN")) DeletePVar(playerid, "FADEIN");
			if(FadeTime[playerid] <= 0) // End the fade
			{
			    TextDrawHideForPlayer(playerid, FadeDraw[playerid]);
			    FadeTime[playerid]=0;
			    DeletePVar(playerid, "FADEOUT");
			    TextDrawDestroy(FadeDraw[playerid]);
			    CallRemoteFunction("OnPlayerFade","ii",playerid, 2);
			    return 1;
			}
			if(FadeTime[playerid] == 255) TextDrawBoxColor(FadeDraw[playerid], 255), TextDrawShowForPlayer(playerid, FadeDraw[playerid]);
            FadeTime[playerid]-=25;
            TextDrawBoxColor(FadeDraw[playerid], FadeTime[playerid]);
            TextDrawHideForPlayer(playerid, FadeDraw[playerid]);
            TextDrawShowForPlayer(playerid, FadeDraw[playerid]);
            SetTimerEx("FadeScreen", 20, false, "ii", playerid, 2);
	    }
	}
    return 1;
}*/
//============================================//
public AfterSpawnHos(playerid)
{
	if(IsPlayerConnected(playerid) && GetPVarInt(playerid, "PlayerLogged") == 1)
	{
	    new string[128],bill,tax,amount=0,hour,minuite,second,year,month,day,sendername[MAX_PLAYER_NAME];
	    gettime(hour,minuite,second), getdate(year, month, day), FixHour(hour);
	    format(sendername, sizeof(sendername), "%s", PlayerName(playerid)), GiveNameSpace(sendername);
	    bill = 200, tax = 15;
		SendClientMessage(playerid,0xFF8282AA,"**********************************************");
        SendClientMessage(playerid,0xFF8282AA,"            Hospital Receipt:");
        format(string, sizeof(string),"Name: %s - Date: %d-%d-%d.", sendername, day, month, year);
        SendClientMessage(playerid,0xFF8282AA,string);
	    format(string, sizeof(string),"Medical Bill: $%d - Tax: $%d.", bill, tax);
        SendClientMessage(playerid,0xFF8282AA,string);
        bill+=tax;
        format(string, sizeof(string),"Total Charge: $%d.", bill);
        SendClientMessage(playerid,0xFF8282AA,string);
        SendClientMessage(playerid,0xFF8282AA,"**********************************************");
        /*SendClientMessage(playerid,0xFF8282AA,"            Other Notes:");
        new found = 0;
        if(found == 0) SendClientMessage(playerid,0xFF8282AA,"No information available.");
        SendClientMessage(playerid,0xFF8282AA,"**********************************************");*/
        if(GetPVarInt(playerid, "Cash") >= bill) GivePlayerMoneyEx(playerid,-bill);
        else
        {
            if(GetPVarInt(playerid, "Bank") >= bill)
            {
			    SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")-bill);
			    amount=1;
			}
			if(amount == 0)
			{
			    SetPVarInt(playerid, "Cash", 0);
			    SetPVarInt(playerid, "Bank", 0);
			}
		}
		format(string, sizeof(string),"~r~-$%d",bill);
		GameTextForPlayer(playerid, string, 5000, 1);
		TogglePlayerControllableEx(playerid, true);
		SetPlayerPosEx(playerid, 1178.3928,-1323.4797,14.1178);
    	SetPlayerFacingAngle(playerid, 270.9649);
    	SetPlayerInterior(playerid,0);
    	SetPlayerVirtualWorld(playerid,0);
		PlayerInfo[playerid][pInVehicle] = -1;
		ClearAnimations(playerid);
    	SetPlayerHealth(playerid, 50.0);
    	PlayerPlaySound(playerid,1150, 0.0, 0.0, 0.0);
		SetPVarInt(playerid, "DR", 0);
    	SetPVarInt(playerid, "Dead", 0);
    	SetPVarInt(playerid, "Mute", 0);
    	ResetPlayerWeaponsEx(playerid);
    	SetCameraBehindPlayer(playerid);
    	SetPlayerColor(playerid, COLOR_WHITE);
    	PlayerWound(playerid, 0, 0);
        if(GetPVarInt(playerid, "Member") == 1 && GetPVarInt(playerid, "Duty") == 1)
        {
            format(string, sizeof(string),"%s", PlayerNameEx(playerid));
            SetPlayerColor(playerid, 0x8080FFFF);
		    if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], 0x8080FFFF, string);
		}
        if(GetPVarInt(playerid, "Member") == 2 && GetPVarInt(playerid, "Duty") == 1)
        {
            format(string, sizeof(string),"%s", PlayerNameEx(playerid));
            SetPlayerColor(playerid, COLOR_PINK);
		    if(GetPVarInt(playerid, "MaskUse") == 1) Update3DTextLabelText(PlayerTag[playerid], COLOR_PINK, string);
		}
    	CallRemoteFunction("OnPlayerDataSave", "i", playerid);
    }
	return 1;
}
//============================================//
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(oldinteriorid != 0 && newinteriorid == 0)
	{
	    SetPVarInt(playerid, "IntEnter", 0);
		SetPVarInt(playerid, "BizzEnter", 0);
		SetPVarInt(playerid, "HouseEnter", 0);
		PlayerInfo[playerid][pInVehicle] = -1;
		TextDrawHideForPlayer(playerid, BlindDraw2);
	}
    return 1;
}
//============================================//
public VehicleTrunk(vehicleid, type)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	switch(type)
	{
	    case true:
	    {
            SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,1,objective);
	    }
	    case false:
	    {
	        SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,0,objective);
	    }
	}
	return true;
}
//============================================//
public SetCameraBehindPlayerEx(playerid) return SetCameraBehindPlayer(playerid);
//============================================//
public UnFreeze(playerid) return TogglePlayerControllable(playerid, true);
//============================================//
public ForceInVeh(playerid, veh)
{
	if(VehicleInfo[veh][vType] == VEHICLE_DMV)
	{
	    foreach(new i : Player) { SetVehicleParamsForPlayer(veh, i, 0, 1); }
	}
	else
	{
	    foreach(new i : Player) { SetVehicleParamsForPlayer(veh, i, 0, 0); }
	}
    PutPlayerInVehicleEx(playerid, veh, 0);
    TogglePlayerControllableEx(playerid, true);
	return true;
}
//============================================//
public NextRoute(playerid, Float:X, Float:Y, Float:Z, next)
{
    if(GetPVarInt(playerid, "OnRoute") == 0) return true;
    if(GetPlayerVehicleID(playerid) != GetPVarInt(playerid, "RouteVeh")) return true;
    new str[128];
    SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
    if(next == 0) format(str, sizeof(str), "Proceed to the checkpoint in %s!", GetZone(X, Y, Z));
    else format(str, sizeof(str), "Proceed to the next checkpoint in %s!", GetZone(X, Y, Z));
	SendClientMessage(playerid, COLOR_WHITE, str);
	TogglePlayerControllableEx(playerid,true);
    return true;
}
//============================================//
public EndRoute(playerid, cash)
{
	new str[128];
    if(GetPVarInt(playerid, "OnRoute") == 0) return true;
	DeletePVar(playerid, "OnRoute");
	if(GetPVarInt(playerid, "RouteVeh") >= 1) DespawnVehicle(GetPVarInt(playerid, "RouteVeh"));
	DeletePVar(playerid, "RouteVeh");
	format(str, 128, "You have completed your route and earned a $%d check, collect it at the bank!", cash);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, str);
	SetPVarInt(playerid, "CheckEarn", cash+GetPVarInt(playerid, "CheckEarn"));
    TogglePlayerAllDynamicCPs(playerid, true);
    DisablePlayerCheckpoint(playerid);
	if(GetPVarInt(playerid, "MonthDon") < 1) {
		SetPVarInt(playerid, "JobReduce", 120);
		scm(playerid, COLOR_LIGHTBLUE, "You'll beable to start a new route in 120 seconds.");
	} else {
		SetPVarInt(playerid, "JobReduce", 30);
		scm(playerid, COLOR_LIGHTBLUE, "You'll beable to start a new route in just 30 seconds because you're a monthly subscriber.");
	}
	return true;
}
//============================================//
public KickPlayer(playerid, str[])
{
    switch(GetPVarInt(playerid, "KPNUM"))
    {
        case 0:
        {
            SetPVarInt(playerid, "KPNUM", GetPVarInt(playerid, "KPNUM")+1);
            SendClientMessage(playerid, COLOR_LIGHTRED, str);
            SetTimerEx("KickPlayer", 500, false, "is", playerid, " ");
        }
        case 1:
        {
            DeletePVar(playerid, "KPNUM");
            Kick(playerid);
        }
    }
	return true;
}
//============================================//
public ProxDetector(Float:radi, playerid, string[], color)
{
    new Float:posx, Float:posy, Float:posz;
	GetPlayerPos(playerid, posx, posy, posz);
	if(color == COLOR_PURPLE) SetPlayerChatBubble(playerid, string, COLOR_PURPLE, radi, 5000);
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "PlayerLogged") == 1)
        {
		    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		    {
		        if(IsPlayerInRangeOfPoint(i,radi,posx, posy, posz))
		        {
					if(color == COLOR_FADE)
					{
						new Float:radius, feet;
						radius = GetPlayerDistanceFromPoint(i,posx, posy, posz);
		                feet = floatround(radius);
		                switch(feet)
		                {
		                    case 0 .. 10: SPCM(i,0xF0F0F096,string), SendBugMessage(i,string);
			                case 11 .. 15: SPCM(i,0xC9C9C996,string), SendBugMessage(i,string);
			                case 16 .. 20: SPCM(i,0xB5B5B596,string), SendBugMessage(i,string);
			                case 21 .. 25: SPCM(i,0xA3A3A396,string), SendBugMessage(i,string);
			                case 26 .. 100: SPCM(i,0x79797996,string), SendBugMessage(i,string);
		                }
					}
					else SPCM(i, color, string), SendBugMessage(i,string);
		        }
		    }
        }
    }
    return 1;
}
//============================================//
public StopTalking(playerid) return ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
//============================================//
public LoginCamera(playerid)
{
    //SetPVarInt(playerid, "LoginCA", GetPVarInt(playerid, "LoginCA")+1);
	/*switch(GetPVarInt(playerid, "LoginCA"))
	{
	    case 1: SetPlayerCameraPos(playerid, 1738.6039,-2346.3584,44.8555), SetPlayerCameraLookAt(playerid, 1578.8135,-2206.3071,24.0884);
	    case 2: SetPlayerCameraPos(playerid, 1552.0936,-1948.3346,77.6734), SetPlayerCameraLookAt(playerid, 1624.8260,-1605.8579,90.5439, 1);
	    case 3: SetPlayerCameraPos(playerid, 1732.0344,-1346.4556,108.8265), SetPlayerCameraLookAt(playerid, 1489.5177,-1030.1857,31.1757, 1);
	    case 4: SetPlayerCameraPos(playerid, 2248.3684,-1518.0212,115.2022), SetPlayerCameraLookAt(playerid, 2582.2124,-1272.1514,68.6015, 1);
	    case 5:
	    {
	        SetPlayerCameraPos(playerid, 1738.6039,-2346.3584,44.8555);
			SetPlayerCameraLookAt(playerid, 1578.8135,-2206.3071,24.0884, 1);
	        SetPVarInt(playerid, "LoginCA", 1);
	    }
	}*/
	new rand = random(4);
	switch(rand)
	{
	    case 1: InterpolateCameraPos(playerid, 2608.8567,-2495.1262,66.1117, 621.4464,-973.0934,140.1878, 60000, CAMERA_MOVE);
		case 2: InterpolateCameraPos(playerid, 621.4464,-973.0934,140.1878, 2608.8567,-2495.1262,66.1117, 60000, CAMERA_MOVE);
		case 3: InterpolateCameraPos(playerid, 2666.7107,-1399.4921,108.5323, 1361.1880,-2338.8389,65.3276, 60000, CAMERA_MOVE);
		default: InterpolateCameraPos(playerid, 1361.1880,-2338.8389,65.3276, 2666.7107,-1399.4921,108.5323, 60000, CAMERA_MOVE);
	}
	return true;
}
//============================================//
public PrintHud(playerid)
{
	if(GetPVarInt(playerid, "PlayerLogged") == 1) SetSlidedMoneyBar(playerid);
	return true;
}
//============================================//
public PrintStats(playerid, forplayerid) {
	new query[154];
	mysql_format(handlesql, query, sizeof(query), "SELECT `ID`, `Model`, `Value`, `Donate`, `ColorOne`, `ColorTwo`, `Locked`, `Impounded` FROM `vehicles` WHERE `Owner` = '%e';", PlayerInfo[playerid][pUsername]);
	mysql_tquery(handlesql, query, "OnStatsPrint", "ii", playerid, forplayerid);
}
//============================================//
forward OnStatsPrint(playerid, forplayerid);
public OnStatsPrint(playerid, forplayerid) {
	new msg[256],
	    color[7],
	    donator[10],
	    fightstyle[10],
	    walkstyle[10],
		marriedto[128];
    
    switch(GetPVarInt(playerid, "DonateRank")) {
        case 1: donator = "Bronze", color="FFFFFF";
        case 2: donator = "Silver", color="FFFFFF";
        case 3: donator = "Gold", color="FFFFFF";
        case 4: donator = "Premium", color="FFA319";
        default: donator = "None", color="FFFFFF";
    }
    
    switch(GetPlayerFightingStyle(playerid)) {
        case FIGHT_STYLE_BOXING: fightstyle = "Boxing";
		case FIGHT_STYLE_KUNGFU: fightstyle = "KungFu";
		case FIGHT_STYLE_KNEEHEAD: fightstyle = "KneeHead";
		case FIGHT_STYLE_GRABKICK: fightstyle = "GrabKick";
		case FIGHT_STYLE_ELBOW: fightstyle = "Elbow";
		default: fightstyle = "Normal";
    }
    
    switch(GetPlayerWalkStyle(playerid)) {
        case WALKSTYLE_GANG1: walkstyle = "Gang-1";
        case WALKSTYLE_GANG2: walkstyle = "Gang-2";
        case WALKSTYLE_NORMAL: walkstyle = "Normal";
        case WALKSTYLE_SEXY: walkstyle = "Sexy";
        case WALKSTYLE_OLD: walkstyle = "Old";
        case WALKSTYLE_SNEAK: walkstyle = "Sneaking";
        case WALKSTYLE_BLIND: walkstyle = "Blind";
        case WALKSTYLE_ARMED: walkstyle = "Armed";
        case WALKSTYLE_POLICE: walkstyle = "Police";
        default: walkstyle = "Original";
    }

    strmid(marriedto, PlayerInfo[playerid][pMarriedTo], 0, strlen(PlayerInfo[playerid][pMarriedTo]), 255);
    if(strcmp(marriedto, "None", true) == 0) {
    strmid(marriedto, "No-one", 0, strlen("No-one"), 255); }

    /* Line 0 */
    format(msg, sizeof(msg), "{%s}_____________________________________________________", color);
    SendClientMessage(forplayerid, -1, msg);
    
    format(msg, sizeof(msg), "                               %s", PlayerInfo[playerid][pUsername]);
    SendClientMessage(forplayerid, -1, msg);

	/* Line 1 */
	format(msg, sizeof(msg), "{%s}(ACC): Cash: $%d | Bank: $%d | Occupation: %s | Age: %d", color, GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"), GetOccupation(GetPVarInt(playerid, "Job")), GetPVarInt(playerid, "Age"));
	SendClientMessage(forplayerid, -1, msg);

    /* Line 2 */
	format(msg, sizeof(msg), "{%s}(ACC): Gender: %s | Fightstyle: %s | Walkstyle: %s | MarriedTo: %s", color, GetGenderString(GetPVarInt(playerid, "Sex")), fightstyle, walkstyle, marriedto);
    SendClientMessage(forplayerid, -1, msg);

    /* Line 3 */
	if(GetPVarInt(playerid, "Member") >= 1) {
	    if(GetPVarInt(playerid, "MonthDon") != 0) {
			format(msg, sizeof(msg), "{%s}(MISC): Subscription Rank: %s | Club Membership: Yes (%i days left) | Faction: %s | Rank: %s", color, donator, GetPVarInt(playerid, "MonthDonT"), FactionInfo[GetPVarInt(playerid, "Member")][fName], FactionRank[GetPVarInt(playerid, "Member")][GetPVarInt(playerid, "Rank")]);
		} else {
            format(msg, sizeof(msg), "{%s}(MISC): Subscription Rank: %s | Club Membership: No | Faction: %s | Rank: %s", color, donator, FactionInfo[GetPVarInt(playerid, "Member")][fName], FactionRank[GetPVarInt(playerid, "Member")][GetPVarInt(playerid, "Rank")]);
		}
    } else {
        if(GetPVarInt(playerid, "MonthDon") != 0) {
			format(msg, sizeof(msg), "{%s}(MISC): Subscription Rank: %s | Club Membership: Yes (%i days left) | Faction: None | Rank: None", color, donator, GetPVarInt(playerid, "MonthDonT"));
		} else {
		    format(msg, sizeof(msg), "{%s}(MISC): Subscription Rank: %s | Club Membership: No | Faction: None | Rank: None", color, donator);
		}
	}
	
	SendClientMessage(forplayerid, -1, msg);
	
	new Float:hp, Float:armr;
	GetPlayerHealth(forplayerid, hp);
	GetPlayerArmour(forplayerid, armr);
	/* Line 4 */
	format(msg, sizeof(msg), "{%s}(MISC): Number: %d | Walkie Freq: %d | Materials: %d | Health: %.1f | Armor: %.1f | Weapon Serial: %d", color, GetPVarInt(playerid, "PhoneNum"), GetPVarInt(playerid, "WalkieFreq"), PlayerInfo[playerid][pMaterials], hp, armr, PlayerInfo[playerid][pWepSerial]);
    SendClientMessage(forplayerid, -1, msg);

    /* Line 5 */
    format(msg, sizeof(msg), "{%s}(LICENSES): Vehicle: %s | Weapon: %s", color, GetDriveLicStatus(GetPVarInt(playerid, "DriveLic")), GetWeaponLicStatus(GetPVarInt(playerid, "GunLic")));
    SendClientMessage(forplayerid, -1, msg);
	
	/* Line 6 */
	format(msg, sizeof(msg), "{%s}(OOC): Hours Played:[%d] | CarTickets:[%d] | NChanges:[%d] | Forumname:[%s]", color, GetPVarInt(playerid, "ConnectTime"), GetPVarInt(playerid, "CarTicket"), GetPVarInt(playerid, "Changes"), AdminName(playerid));
    SendClientMessage(forplayerid, -1, msg);

	/* Line 7 (Vehicles) */
	for(new i = 0; i < cache_get_row_count(); i++) {
		new vehicleid = -1;
		foreach(new car : Vehicle) {
    		if(VehicleInfo[car][vID] == cache_get_field_content_int(i, "ID")) {
    			vehicleid = car;
				break;
    		}
		}
		new impounded[14];
		if(cache_get_field_content_int(i, "Impounded") > 0) {
			format(impounded, sizeof(impounded), "$%i", cache_get_field_content_int(i, "Impounded"));
		} else format(impounded, sizeof(impounded), "No.");
		new vmodel = cache_get_field_content_int(i, "Model");
		if(cache_get_field_content_int(i, "Donate") == 0) {
			if(GetPVarInt(forplayerid, "Admin") > 0) {
				if(vehicleid != -1) {
					format(msg, sizeof(msg), "{%s}(VEHICLE): Database ID:[%i] ID:[%i] Model:[%s] Fuel:[%s{%s}] Value:[$%i] ColorOne:[%i] ColorTwo:[%i] Locked:[%i] Impounded:[%s]", color, cache_get_field_content_int(i, "ID"), vehicleid, VehicleName[vmodel - 400], FuelName(GasType(vmodel)), color, cache_get_field_content_int(i, "Value"), cache_get_field_content_int(i, "ColorOne"), cache_get_field_content_int(i, "ColorTwo"), cache_get_field_content_int(i, "Locked"), impounded);
				} else format(msg, sizeof(msg), "{%s}(VEHICLE): Database ID:[%i] ID:[Not Spawned] Model:[%s] Fuel:[%s{%s}] Value:[$%i] ColorOne:[%i] ColorTwo:[%i] Locked:[%i] Impounded:[%s]", color, cache_get_field_content_int(i, "ID"), VehicleName[vmodel - 400], FuelName(GasType(vmodel)), color, cache_get_field_content_int(i, "Value"), cache_get_field_content_int(i, "ColorOne"), cache_get_field_content_int(i, "ColorTwo"), cache_get_field_content_int(i, "Locked"), impounded);
			} else format(msg, sizeof(msg), "{%s}(VEHICLE): ID:[%i] Model:[%s] Fuel:[%s{%s}] Value:[$%i] ColorOne:[%i] ColorTwo:[%i] Locked:[%i] Impounded:[%s]", color, cache_get_field_content_int(i, "ID"), VehicleName[vmodel - 400], FuelName(GasType(vmodel)), color, cache_get_field_content_int(i, "Value"), cache_get_field_content_int(i, "ColorOne"), cache_get_field_content_int(i, "ColorTwo"), cache_get_field_content_int(i, "Locked"), impounded);
		} else {
			if(GetPVarInt(forplayerid, "Admin") > 0) {
				if(vehicleid != -1) {
					format(msg, sizeof(msg), "{%s}(VEHICLE): Database ID:[%i] ID:[%i] Model:[%s] Fuel:[%s{%s}] Value:[Donor Vehicle] ColorOne:[%i] ColorTwo:[%i] Locked:[%i] Impounded:[%s]", color, cache_get_field_content_int(i, "ID"), vehicleid, VehicleName[vmodel - 400], FuelName(GasType(vmodel)), color, cache_get_field_content_int(i, "ColorOne"), cache_get_field_content_int(i, "ColorTwo"), cache_get_field_content_int(i, "Locked"), impounded);
				} else format(msg, sizeof(msg), "{%s}(VEHICLE): Database ID:[%i] ID:[Not Spawned] Model:[%s] Fuel:[%s{%s}] Value:[Donor Vehicle] ColorOne:[%i] ColorTwo:[%i] Locked:[%i] Impounded:[%s]", color, cache_get_field_content_int(i, "ID"), VehicleName[vmodel - 400], FuelName(GasType(vmodel)), color, cache_get_field_content_int(i, "ColorOne"), cache_get_field_content_int(i, "ColorTwo"), cache_get_field_content_int(i, "Locked"), impounded);
			} else format(msg, sizeof(msg), "{%s}(VEHICLE): Model:[%s] Fuel:[%s{%s}] Value:[Donor Vehicle] ColorOne:[%i] ColorTwo:[%i] Locked:[%i] Impounded:[%s]", color, VehicleName[vmodel - 400], FuelName(GasType(vmodel)), color, cache_get_field_content_int(i, "ColorOne"), cache_get_field_content_int(i, "ColorTwo"), cache_get_field_content_int(i, "Locked"), impounded);		
		}
		
		SendClientMessageExCol(forplayerid, -1, msg, color);
	}
	
	/* Line 8 (Administrative) */
	if(GetPVarInt(forplayerid, "Admin") != 0) {
        format(msg, sizeof(msg),"{FF3333}Admin:[%d] HouseKey:[%d] BizzKey:[%d] Int:[%d] World:[%d] Kills:[%d] Deaths:[%d]", GetPVarInt(playerid, "Admin"), GetPVarInt(playerid, "HouseKey"), GetPVarInt(playerid, "BizzKey"), GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), GetPVarInt(playerid,"Kills"), GetPVarInt(playerid, "Deaths"));
		SendClientMessage(forplayerid, -1, msg);
	}
	
	/* Line 9 */
    format(msg, sizeof(msg), "{%s}_____________________________________________________", color);
    SendClientMessage(forplayerid, -1, msg);
	return true;
}
//============================================//
public CreateLoot(itemid1, itemid2, itemid3, itemid4, Float:X, Float:Y, Float:Z, worldid, intid)
{
	new found = 0, foundid = 0, str[128];
    for(new i = 0; i < MAX_LOOT; i++)
    {
        if(LootInfo[i][lUsed] == 0 && found == 0)
        {
            found++;
            foundid=i;
        }
    }
    if(found == 0) return true;
    LootInfo[foundid][lUsed]=1;
    format(str, 128, "| ITEM: %s |\npress '~k~~CONVERSATION_YES~' to pickup!", PrintIName(itemid1));
    LootInfo[foundid][lText]=CreateDynamic3DTextLabel(str, 0x33AA33FF, X, Y, Z-0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, worldid, intid, -1, 50.0);
    if(itemid1 > 21 && itemid1 < 35)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(PrintIid(itemid1), X, Y, Z - 1, 80.0, 0.0, 0.0, worldid);
    }
    if(itemid1 >= 100 && itemid1 <= 150)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(2037, X, Y, Z - 1, 0.0, 0.0, 0.0, worldid);
    }
    if(itemid1 == 403)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(1650, X, Y, Z - 1, 0.0, 0.0, 0.0, worldid);
    }
    if(itemid1 == 406)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(1210, X, Y, Z - 1, 0.0, 0.0, 0.0, worldid);
    }
    if(itemid1 >= 500 && itemid1 <= 550)
    {
		LootInfo[foundid][lObject] = CreateDynamicObject(1279, X, Y, Z - 1, 0.0, 0.0, 0.0, worldid);
    }
    LootInfo[foundid][lTime]=60;
    LootInfo[foundid][lItem][0]=itemid1;
    LootInfo[foundid][lItem][1]=itemid2;
    LootInfo[foundid][lItem][2]=itemid3;
	LootInfo[foundid][lItem][3]=itemid4;
    LootInfo[foundid][lX]=X;
    LootInfo[foundid][lY]=Y;
    LootInfo[foundid][lZ]=Z;
	return true;
}
//============================================//
public IsAroundShell(playerid)
{
    for(new i2 = 0; i2 < MAX_OBJECTS; i2++)
    {
        if(Shells[i2][sUsed] == 1)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5.0, Shells[i2][sX], Shells[i2][sY], Shells[i2][sZ]))
		    {
		        return true;
		    }
        }
    }
	return false;
}
//============================================//
public CreateShell(Float:X, Float:Y, Float:Z, worldid, ammotype, intid, serialid)
{
	new found = 0, foundid = 0, found2 = 0, str[128];
    for(new i = 0; i < MAX_OBJECTS; i++)
    {
        if(Shells[i][sUsed] == 0 && found == 0)
        {
            found++;
            foundid=i;
			break;
        }
    }
    for(new i2 = 0; i2 < MAX_OBJECTS; i2++)
    {
        if(Shells[i2][sUsed] == 1 && Shells[i2][sX] == X && Shells[i2][sY] == Y && Shells[i2][sZ] == Z)
        {
            found2++;
			break;
        }
    }
    if(found == 0) return true;
	if(found2 != 0) return true;
    Shells[foundid][sUsed]=1;
    format(str, 128, "SHELL CASING\n%s\npress '~k~~CONVERSATION_YES~' to discard.", PrintIName(ammotype));
    Shells[foundid][sText]=CreateDynamic3DTextLabel(str, 0xFF0000FF, X, Y, Z-0.8, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, worldid, intid, -1, 50.0);
    Shells[foundid][sX]=X, Shells[foundid][sY]=Y, Shells[foundid][sZ]=Z;
    Shells[foundid][sTime]=10;
	Shells[foundid][sCurTime]=GetCount();
	Shells[foundid][sSerial] = serialid;
	return true;
}
//============================================//
public CreateBullet(Float:X, Float:Y, Float:Z, worldid)
{
	new found = 0, foundid = 0, found2 = 0;
    for(new i = 0; i < MAX_OBJECTS; i++)
    {
        if(Bullet[i][bUsed] == 0 && found == 0)
        {
            found++;
            foundid=i;
			break;
        }
    }
    for(new i2 = 0; i2 < MAX_OBJECTS; i2++)
    {
        if(Bullet[i2][bUsed] == 1 && Bullet[i2][bX] == X && Bullet[i2][bY] == Y && Bullet[i2][bZ] == Z)
        {
            found2++;
			break;
        }
    }
    if(found == 0) return true;
	if(found2 != 0) return true;
    Bullet[foundid][bUsed]=1;
    Bullet[foundid][bObject]=CreateDynamicObject(3106, X, Y, Z, 0.0, 0.0, 0.0, worldid);
    Bullet[foundid][bX]=X, Bullet[foundid][bY]=Y, Bullet[foundid][bZ]=Z;
	return true;
}
//============================================//
stock CreateLableText(playerid,lable[],text[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    if(GetPVarInt(playerid, "PlayTime") < 5) return 1;
    new string[128];
    if(GetPVarInt(playerid, "LableDraw") > 0)
    {
        TextDrawSetString(Text:LableDraw[playerid],lable);
        format(string, sizeof(string),"~n~~n~%s~n~~n~",text);
        return TextDrawSetString(Text:UsedDraw[playerid],string);
    }
	PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
    UsedDraw[playerid] = TextDrawCreate(440.0,173.0," ");
    TextDrawUseBox(UsedDraw[playerid],1);
    TextDrawBoxColor(UsedDraw[playerid],0x00000066);
    TextDrawTextSize(UsedDraw[playerid],636.0,308.0);
    TextDrawAlignment(UsedDraw[playerid],0);
    TextDrawBackgroundColor(UsedDraw[playerid],0x000000ff);
    TextDrawFont(UsedDraw[playerid],2);
    TextDrawLetterSize(UsedDraw[playerid],0.300000,1.0);
    TextDrawColor(UsedDraw[playerid],0xffffffff);
    TextDrawSetOutline(UsedDraw[playerid],1);
    TextDrawSetProportional(UsedDraw[playerid],1);
    TextDrawSetShadow(UsedDraw[playerid],1);
    TextDrawShowForPlayer(playerid,UsedDraw[playerid]);
    format(string, sizeof(string),"~n~~n~%s~n~~n~",text);
    TextDrawSetString(Text:UsedDraw[playerid],string);
    LableDraw[playerid] = TextDrawCreate(456.0,160.0," ");
	TextDrawAlignment(LableDraw[playerid],0);
	TextDrawBackgroundColor(LableDraw[playerid],0x000000ff);
	TextDrawFont(LableDraw[playerid],0);
	TextDrawLetterSize(LableDraw[playerid],1.0,1.900000);
	TextDrawColor(LableDraw[playerid],0xffffffff);
	TextDrawSetOutline(LableDraw[playerid],1);
	TextDrawSetProportional(LableDraw[playerid],1);
	TextDrawSetShadow(LableDraw[playerid],1);
    TextDrawSetString(Text:LableDraw[playerid],lable);
    TextDrawHideForPlayer(playerid,LableDraw[playerid]);
    TextDrawShowForPlayer(playerid,LableDraw[playerid]);
    return SetPVarInt(playerid, "LableDraw", 4);
}
//============================================//
stock GivePlayerWeaponEx(playerid, weaponid, amount)
{
	if(weaponid >= 41 && weaponid <= 46)
	{
	    PlayerInfo[playerid][pPlayerWeapon]=weaponid;
		PlayerInfo[playerid][pPlayerAmmo]=9999;
		GivePlayerWeapon(playerid, weaponid, 9999);
        return 1;
	}
    PlayerInfo[playerid][pPlayerWeapon]=weaponid, PlayerInfo[playerid][pPlayerAmmo]=amount;
    if(weaponid == 23 && amount == 9999) return GivePlayerWeapon(playerid, weaponid, amount);
	if(amount >= 1)
	{
		if(weaponid >= 22 && weaponid <= 34)
		{
		    new am = 0;
		    switch(weaponid)
		    {
		        case 22 .. 24: am=7;
		        case 25 .. 27: am=6;
		        case 28 .. 32: am=30;
		        case 33, 34: am=10;
		    }
		    if(amount > am)
		    {
		        switch(PlayerInfo[playerid][pAmmoType])
		    	{
		    	    case 101: am=14;
		    		case 107: am=14;
		    		case 116: am=60;
		    		case 126: am=80;
		    		case 127: am=60;
		    	}
			    amount = am;
			}
		    PlayerInfo[playerid][pPlayerAmmo]=amount;
		}
	    GivePlayerWeapon(playerid, weaponid, amount);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(playerid, 0);
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && weaponid == 24) SetPlayerArmedWeapon(playerid, 0);
	}
	SetTimerEx("LoadHolsters", 2000, false, "i", playerid);
	return true;
}
//============================================//
stock GivePlayerMoneyEx(playerid, money)
{
	SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	if(GetPVarInt(playerid, "Cash") < 0) SetPVarInt(playerid, "Cash", 0);
	SetSlidedMoneyBar(playerid);
	OnPlayerDataSave(playerid);
	return true;
}
//============================================//
stock ResetPlayerMoneyEx(playerid)
{
	DeletePVar(playerid,"Cash");
	return SetSlidedMoneyBar(playerid);
}
//============================================//
stock GetPlayerMoneyEx(playerid)
{
	return GetPVarInt(playerid, "Cash");
}
//============================================//
stock SetSlidedMoneyBar(playerid)
{
	new string[128], result[10], amount;
	if(GetPlayerMoney(playerid) > 0) ResetPlayerMoney(playerid);
	amount = GetPlayerMoneyEx(playerid);
	switch(GetPVarInt(playerid,"HudCol"))
	{
		case 0: result="~g~~h~";
		case 1: result="~r~~h~";
		case 2: result="~w~~h~";
		case 3: result="~y~~h~";
		case 4: result="~p~~h~";
		case 5: result="~b~~h~";
	}
	if(amount >= 0 && amount <= 9) format(string, sizeof(string),"%s$0000000%d", result, amount);
	if(amount >= 10 && amount <= 99) format(string, sizeof(string),"%s$000000%d", result, amount);
	if(amount >= 100 && amount <= 999) format(string, sizeof(string),"%s$00000%d", result, amount);
	if(amount >= 1000 && amount <= 9999) format(string, sizeof(string),"%s$0000%d", result, amount);
	if(amount >= 10000 && amount <= 99999) format(string, sizeof(string),"%s$000%d", result, amount);
	if(amount >= 100000 && amount <= 999999) format(string, sizeof(string),"%s$00%d", result, amount);
	if(amount >= 1000000 && amount <= 9999999) format(string, sizeof(string),"%s$0%d", result, amount);
    return TextDrawSetString(Text:MoneyDraw[playerid], string);
}
//============================================//
stock PreloadAnimLib(playerid, animlib[]) return ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0,1);
//============================================//
stock PlayerToCar(playerid,type,Float:distance) {
    new Float:x, Float:y, Float:z, Float:closedist, id = -1;
    foreach(new c : Vehicle) {
        if(IsVehicleStreamedIn(c, playerid)) {
			GetVehiclePos(c,x,y,z);
			new Float:dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
			if(!closedist) {
				closedist = dist;
				id = c;
			} else {
				if(dist < closedist) {
					closedist = dist;
					id = c;
				}
			}
		}
    }
	if(id != -1) {
		GetVehiclePos(id,x,y,z);
		if(IsPlayerInRangeOfPoint(playerid,distance,x,y,z)) {
			switch(type) {
				case 1: return true;
				case 2: return id;
			}
		}
	}
	if(type == 1) return false;
    return INVALID_VEHICLE_ID;
}
//============================================//
stock NearestAccessCar(playerid,type,Float:distance) {
    new Float:x, Float:y, Float:z, Float:closedist, id;
    foreach(new c : Vehicle) {
        if(IsVehicleStreamedIn(c, playerid)) {
			if(PlayerOwnsVehicle(playerid, c) || HasCarKey(playerid, VehicleInfo[c][vID])) {
				GetVehiclePos(c,x,y,z);
				new Float:dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
				if(!closedist) {
					closedist = dist;
					id = c;
				} else {
					if(dist < closedist) {
						closedist = dist;
						id = c;
					}
				}
			}
		}
    }
	GetVehiclePos(id,x,y,z);
	if(IsPlayerInRangeOfPoint(playerid,distance,x,y,z)) {
		switch(type) {
			case 1: return true;
			case 2: return id;
		}
	}
    if(type == 1) return false;
    return INVALID_VEHICLE_ID;
}
//============================================//
stock CountSpawnedCars(playerid) {
    new c = 0;
    foreach(new v : Vehicle) {
		if(PlayerOwnsVehicle(playerid, v)) {
			c++;
		}
    }
	return c;
}
//============================================//
stock GetSpawnedVehicle(playerid, number) {
	new count = -1, id = -1;
	foreach(new i : Vehicle) {
		if(!isnull(VehicleInfo[i][vOwner]) && strcmp(VehicleInfo[i][vOwner], PlayerInfo[playerid][pUsername], false) == 0) {
			if(number > count) {
				id = i;
				count++;
			} else { break; }
		}
	}
	return id;
}
//===========================================//
stock PlayerToPlayer(playerid,targetid,Float:distance) {
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid,x,y,z);
    if(IsPlayerConnected(targetid)&&IsPlayerInRangeOfPoint(targetid,distance,x,y,z)&&IsPlayerStreamedIn(targetid, playerid)) return true;
    return false;
}
//============================================//
stock GiveNameSpace(str[])
{
    new strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]=='_')	str[strl]=' ';
    }
    return 0;
}
//============================================//
stock GiveNameSpaceEx(name[])
{
	new result[MAX_PLAYER_NAME];
	format(result, sizeof(result), "%s", name);

	for(new i = 0; i < strlen(result); i++)
	{
		if(result[i] == '_')
		{
			result[i]= ' ';
		}
	}
    return result;
}
//============================================//
stock RemoveNameSpace(str[])
{
    new strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]==' ')	str[strl]='_';
    }
    return 0;
}
//============================================//
stock PlayerName(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
    return name;
}
//============================================//
stock PlayerNameEx(playerid)
{
    new name[MAX_PLAYER_NAME];
	switch(GetPVarInt(playerid, "MaskUse"))
	{
		case 0:
		{
			GetPlayerName(playerid, name, sizeof(name));
			return name;
		}
		case 1:
    	{
    	    format(name,sizeof(name),"Stranger_%d",GetPVarInt(playerid, "MaskID"));
    	    return name;
    	}
    }
    return name;
}
//============================================//
stock ClearChatbox(playerid, lines)
{
    for(new i=0; i<lines; i++)
	{
	    SendClientMessage(playerid,COLOR_GREY, " ");
	}
	return true;
}
//============================================//
stock FixHour(hour)
{
	if (hour < 0) hour = hour+24;
	else if (hour > 23) hour = hour-24;
	return hour;
}
//============================================//
stock GetCount() { return GetTickCount(); }
//============================================//
IsUpper(ch)
{
    if(ch>64&&ch<91) return 1;
    return 0;
}
//============================================//
TooManyCaps(name[])
{
    new Float:caps,num,sz;
    sz=strlen(name[0]);
    while(sz--) {
    if(IsUpper(name[sz])) num++;
    }
    caps=floatdiv(num,float(strlen(name[0])-1));
    caps=floatmul(caps,float(100));
    if(caps>40) return 1;
    return 0;
}
//============================================//
CapsOnEnd(name[])
{
    new sz;
    sz=strlen(name[0]);
    if(IsUpper(name[sz-1])) return 1;
    if(IsUpper(name[FirstSeperationLoc(name[0])-1])) return 1;
    return 0;
}
//============================================//
ConsecutiveCaps(name[])
{
    new sz,lastcaps;
    sz=strlen(name[0]);
    while(sz--) {
    if(IsUpper(name[sz])) {
    if(lastcaps==1) {
    return 1;
    }
    lastcaps=1;
    } else lastcaps=0;
    }
    return 0;
}
//============================================//
TooShortOnEnd(name[])
{
    new pnt;
    pnt=FirstSeperationLoc(name[0]);
    name[pnt]=0;
    if((strlen(name[0])<3)||strlen(name[pnt+1])<3) {
    name[pnt]='_';
	return 1;
	 }
    name[pnt]='_';
    return 0;
}
//============================================//
NumOccurences(str[],ch)
{
    new num=0,strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]==ch) num++;
    }
    return num;
}
//============================================//
IsInvalid(x)
{
    if(x==95) return 0;
    if(x>64&&x<91) return 0;
    if(x>96&&x<123) return 0;
    return 1;
}
//============================================//
FirstSeperationLoc(str[])
{
    new strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]=='_') return strl;
    }
    return 0;
}
//============================================//
InvalidCaps(str[])
{
    if(!IsUpper(str[0])||!IsUpper(str[FirstSeperationLoc(str[0])+1])) return 1;
    return 0;
}
//============================================//
NameIsRP(name[])
{
    new len;
    len=strlen(name[0]);
    if(InvalidCaps(name[0]) || (NumOccurences(name[0],'_') != 1 && NumOccurences(name[0],'_') != 2)) return 0;
    while(len--)
	{
    	if(IsInvalid(name[len])) return 0;
    }
    if(TooManyCaps(name[0])) return 0;
    if(ConsecutiveCaps(name[0])) return 0;
    if(CapsOnEnd(name[0])) return 0;
    if(TooShortOnEnd(name[0])) return 0;
    return 1;
}
//============================================//
stock SetObjectFacePoint(objectid, Float: X, Float: Y)
{
    static
        Float: pX, Float: oX,
        Float: pY, Float: oY,
        Float: oZ
    ;
    GetDynamicObjectRot(objectid, oX, oY, oZ);
    GetDynamicObjectPos(objectid, pX, pY, oZ);

    oZ = ( floatadd(atan2(floatsub(Y, pY), floatsub(X, pX)), 270.0) );

    SetDynamicObjectRot(objectid, oX, oY, oZ);
    return true;
}
//============================================//
stock IsNotAEngineCar(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh >= 509 && pveh <= 510 || pveh == 571 || pveh == 462 || pveh == 481
	|| pveh == 430 || pveh == 446 || pveh == 452 || pveh == 453 || pveh == 454
	|| pveh == 472 || pveh == 473 || pveh == 484 || pveh == 493 || pveh == 595
	|| pveh == 417 || pveh == 425 || pveh == 430 || pveh == 446 || pveh == 452
	|| pveh == 453 || pveh == 454 || pveh == 460 || pveh == 469 || pveh == 472
	|| pveh == 473 || pveh == 476 || pveh == 484 || pveh == 487 || pveh == 488
	|| pveh == 493 || pveh == 497 || pveh == 511 || pveh == 512 || pveh == 513
	|| pveh == 519 || pveh == 520 || pveh == 512 || pveh == 548 || pveh == 481
	|| pveh == 553 || pveh == 577 || pveh == 592 || pveh == 593 || pveh == 595)
    {
        return true;
    }
	return false;
}
//============================================//
stock IsNotAEngineCarEx(pveh)
{
    if(pveh >= 509 && pveh <= 510 || pveh == 571 || pveh == 462 || pveh == 481
	|| pveh == 430 || pveh == 446 || pveh == 452 || pveh == 453 || pveh == 454
	|| pveh == 472 || pveh == 473 || pveh == 484 || pveh == 493 || pveh == 595
	|| pveh == 417 || pveh == 425 || pveh == 430 || pveh == 446 || pveh == 452
	|| pveh == 453 || pveh == 454 || pveh == 460 || pveh == 469 || pveh == 472
	|| pveh == 473 || pveh == 476 || pveh == 484 || pveh == 487 || pveh == 488
	|| pveh == 493 || pveh == 497 || pveh == 511 || pveh == 512 || pveh == 513
	|| pveh == 519 || pveh == 520 || pveh == 512 || pveh == 548 || pveh == 481
	|| pveh == 553 || pveh == 577 || pveh == 592 || pveh == 593 || pveh == 595)
    {
        return true;
    }
	return false;
}
//============================================//
stock IsBike(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 462 || pveh == 448 || pveh == 581 || pveh == 522 || pveh == 461 || pveh == 521
	|| pveh == 463 || pveh == 586 || pveh == 468 || pveh == 471)
    {
        return true;
    }
	return false;
}
//============================================//
stock CarEngine(idcar,type)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
	switch(type)
	{
		case 0: SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		case 1: SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	}
	return 1;
}
//============================================//
stock IsAWindowCar(playerid)
{
    new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
    if(pveh >= 400 && pveh <= 423 || pveh >= 425 && pveh <= 429 || pveh >= 431 && pveh <= 434 || pveh >= 436 && pveh <= 438
	|| pveh >= 440 && pveh <= 445 || pveh == 451 || pveh >= 455 && pveh <= 456 || pveh >= 458 && pveh <= 459
	|| pveh >= 466 && pveh <= 467 || pveh >= 469 && pveh <= 470 || pveh >= 474 && pveh <= 475 || pveh >= 477 && pveh <= 479
	|| pveh >= 482 && pveh <= 483 || pveh >= 487 && pveh <= 492 || pveh >= 494 && pveh <= 508 || pveh >= 514 && pveh <= 520
	|| pveh >= 524 && pveh <= 529 || pveh >= 534 && pveh <= 538 || pveh >= 540 && pveh <= 566 || pveh >= 576 && pveh <= 580
	|| pveh == 585 || pveh >= 587 && pveh <= 589 || pveh >= 596 && pveh <= 605)
    {
        return true;
    }
	return false;
}
//============================================//
stock GetPlayerZone(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	for(new i=0;i<sizeof(Zones);i++)
	{
		if(x > Zones[i][zone_minx] && y > Zones[i][zone_miny] && z > Zones[i][zone_minz] && x < Zones[i][zone_maxx] && y < Zones[i][zone_maxy] && z < Zones[i][zone_maxz])
		return i;
	}
	return false;
}
//============================================//
stock GetZone(Float:x,Float:y,Float:z)
{
	new string[128];
	for(new i=0;i<sizeof(Zones);i++)
	{
		if(x > Zones[i][zone_minx] && y > Zones[i][zone_miny] && z > Zones[i][zone_minz] && x < Zones[i][zone_maxx] && y < Zones[i][zone_maxy] && z < Zones[i][zone_maxz])
		{
		    format(string,sizeof(string),"%s",Zones[i][zone_name]);
		    return string;
		}
	}
	return string;
}
//============================================//
stock GetPlayerArea(playerid)
{
	new str[128];
	format(str,sizeof(str),"%s",Zones[GetPlayerZone(playerid)][zone_name]);
	return str;
}
//============================================//
stock PrintTime(amount, time)
{
	new minute = 0, result[50];
	if(amount >= 60)
	{
		new dump = amount, found = 0;
	    for(new i=0;i<time;i++)
	    {
			if(dump >= 60)
			{
			    found++;
			    dump-=60;
			}
	    }
	    amount-=60*found;
	    minute+=found;
	}
	if(amount <= 9) format(result, sizeof(result),"%d:0%d", minute,amount);
	else format(result, sizeof(result),"%d:%d", minute,amount);
	return result;
}
//============================================//
stock PrintTestResult(playerid, status, reason[])
{
	new string[128], cartxt[50], reward = 0, name[MAX_PLAYER_NAME];
    ClearChatbox(playerid, 20);
    SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Los Santos Department Of Motor Vehicles");
    SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
    new maxspeed = floatround(GetPVarFloat(playerid, "TestSpeed")), Float:health;
    GetVehicleHealth(GetPlayerVehicleID(playerid),health);
    new varhp = floatround(health);
    switch(varhp)
    {
        case 800 .. 1000: cartxt = "Fine";
		case 600 .. 799:
		{
		    cartxt = "Normal";
		    reward+=5;
		}
		case 400 .. 599:
		{
		    cartxt = "Moderate";
		    reward+=10;
		}
		case 50 .. 399: cartxt = "Damaged";
    }
    if(maxspeed >= 70) reward+=1;
    else if(maxspeed >= 75) reward+=2;
    else if(maxspeed >= 80) reward+=5;
    else if(maxspeed >= 85) reward+=10;
	switch(GetPVarInt(playerid, "TestTime"))
	{
		case 130 .. 139: reward+=5;
	    case 140 .. 209: reward+=10;
		case 210 .. 300: reward+=20;
	}
    format(string, sizeof(string),"Elapsed time: %s - Max Speed: %d KPH - Vehicle Status: %s.", PrintTime(GetPVarInt(playerid, "TestTime"),20), maxspeed, cartxt);
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    switch(status)
    {
		case 1:
		{
	        switch(reward)
	        {
				case 0 .. 10:
				{
				    format(string, sizeof(string),"Status: Passed (Golden Ribbon) - Reason: %s.", reason);
				}
				case 11 .. 20: format(string, sizeof(string),"Status: Passed (Silver Ribbon) - Reason: %s.", reason);
				case 21 .. 100: format(string, sizeof(string),"Status: Passed (Bronze Ribbon) - Reason: %s.", reason);
	        }
		}
		case 2:
		{
		    format(string, sizeof(string),"Status: Failed - Reason: %s.", reason);
		    reward+=20;
		}
    }
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    new overall = 100 - reward;
    format(string, sizeof(string),"Overall Percentage: %d.", overall);
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    format(name, sizeof(name), "%s", PlayerName(playerid)), GiveNameSpace(name);
    format(string, sizeof(string),"Signature: %s.", name);
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    SendClientMessage(playerid,COLOR_LIGHTBLUE,"---------------------------------------------------------------");
    DeletePVar(playerid,"TestTime"), DeletePVar(playerid,"TestSpeed"), DeletePVar(playerid,"DriveTest");
    return true;
}
//============================================//
stock GetPlayerSpeed(playerid, bool:kmh) {
	new Float:Vx, Float:Vy, Float:Vz;
	if(IsPlayerInAnyVehicle(playerid)) {
		GetVehicleVelocity(GetPlayerVehicleID(playerid), Vx, Vy, Vz);
	} else {
		GetPlayerVelocity(playerid, Vx, Vy, Vz);
	}
    new Float:rtn;
    rtn = floatsqroot(floatpower(Vx*100,2) + floatpower(Vy*100,2));
    rtn = floatsqroot(floatpower(rtn,2) + floatpower(Vz*100,2));
    if(kmh) {
    	return floatround(rtn * 1.61);
    } else {
    	return floatround(rtn);
    }
}
//============================================//
stock LoadMaps()
{
    new arrCoords[2][128], strFromFile2[128], output;
	new File: file = fopen("RPData/mapping/list.ini", io_read);
	if (file)
	{
        while (output < 500)
        {
            fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			if(strlen(arrCoords[0]) >= 4) { LoadMapFile(arrCoords[0], strval(arrCoords[1])); }
            output++;
		}
	}
	fclose(file);
	return true;
}
//============================================//
stock LoadMapFile(filename[], worldid)
{
    new arrCoords[10][128], strFromFile2[255], str[128], output;
    format(str, 128, "RPData/mapping/%s.ini", filename);
	new File: file = fopen(str, io_read), obj;
	if (file)
	{
		new found = 0;
        while (output < 5000)
        {
            fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			if(strval(arrCoords[0]) >= 1)
			{
			    obj = CreateDynamicObject(strval(arrCoords[0]), floatstr(arrCoords[1]), floatstr(arrCoords[2]), floatstr(arrCoords[3]), floatstr(arrCoords[4]), floatstr(arrCoords[5]), floatstr(arrCoords[6]), worldid);
			    if(strval(arrCoords[7]) >= 1000 && strval(arrCoords[7]) <= 10000)
			    {
			        SetDynamicObjectMaterial(obj, 0, strval(arrCoords[7]), arrCoords[8], arrCoords[9]);
			        format(str, 128, "mapfile added: obj:%d - %d - %s - %s.", obj, strval(arrCoords[7]), arrCoords[8], arrCoords[9]);
			        printf(str);
			    }
				//if(worldid == 0) CreateDynamicObject(strval(arrCoords[0]), floatstr(arrCoords[1]), floatstr(arrCoords[2]), floatstr(arrCoords[3]), floatstr(arrCoords[4]), floatstr(arrCoords[5]), floatstr(arrCoords[6]), -1);
				found++;
            }
            output++;
		}
		format(str, 128, "Loaded Mapfile: %s.ini - %d Objects - WorldID: %d.", filename, found, worldid);
		printf(str);
	}
	fclose(file);
	return true;
}
//============================================//
stock LoadInts()
{
	new query[124];
    for(new i=1; i<MAX_INTS; i++)
	{
		mysql_format(handlesql, query, sizeof(query), "SELECT * FROM interiors WHERE ID=%d", i);
		mysql_function_query(handlesql, query, true, "LoadIntSQL", "d", i);
	}
	return true;
}
//============================================//
stock ReloadIntID(id)
{
	if(IsValidDynamic3DTextLabel(IntInfo[id][iText])) {
		DestroyDynamic3DTextLabel(IntInfo[id][iText]);
	}
	if(IsValidDynamicPickup(IntInfo[id][iIcon])) {
		DestroyDynamicPickup(IntInfo[id][iIcon]);
	}
	if(IsValidDynamicPickup(IntInfo[id][iEIcon])) {
		DestroyDynamicPickup(IntInfo[id][iEIcon]);
	}
	if(IntInfo[id][iMapIcon] > 0 && IsValidDynamicMapIcon(IntInfo[id][iMIcon])) {
		DestroyDynamicMapIcon(IntInfo[id][iMIcon]);
	}
	new query[124];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM interiors WHERE ID=%d", id);
	mysql_function_query(handlesql, query, true, "LoadIntSQL", "d", id);
	return true;
}
//============================================//
stock LoadIntID(id)
{
	new query[124];
	mysql_format(handlesql, query, sizeof(query), "SELECT * FROM interiors WHERE ID=%d", id);
	mysql_tquery(handlesql, query, "LoadIntSQL", "i", id);
	return true;
}
//============================================//
public LoadIntSQL(id)
{
	new fields, rows;
	cache_get_data(rows, fields);
	if(rows) {
		new fetch[128];
		IntInfo[id][iUsed]=1;
		IntInfo[id][iType] = cache_get_field_content_int(0, "Type");
		IntInfo[id][iWorld] = cache_get_field_content_int(0, "World");
		IntInfo[id][iInt] = cache_get_field_content_int(0, "Int");
		IntInfo[id][ieX] = cache_get_field_content_float(0, "eX");
		IntInfo[id][ieY] = cache_get_field_content_float(0, "eY");
		IntInfo[id][ieZ] = cache_get_field_content_float(0, "eZ");
		IntInfo[id][ixX] = cache_get_field_content_float(0, "xX");
		IntInfo[id][ixY] = cache_get_field_content_float(0, "xY");
		IntInfo[id][ixZ] = cache_get_field_content_float(0, "xZ");
		IntInfo[id][iMapIcon] = cache_get_field_content_int(0, "MapIcon");
		IntInfo[id][iFreeze] = cache_get_field_content_int(0, "Freeze");
		cache_get_field_content(0, "Name", fetch);
		strmid(IntInfo[id][iName], fetch, 0, strlen(fetch), 255);
		//==========//
		format(fetch, 128, "| %s (%d) |", IntInfo[id][iName], id);
		IntInfo[id][iText]=CreateDynamic3DTextLabel(fetch, 0xFFFFFFFF, IntInfo[id][ieX], IntInfo[id][ieY], IntInfo[id][ieZ]+0.50, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 50.0);
	    IntInfo[id][iIcon]=CreateDynamicPickup(1318, 1, IntInfo[id][ieX], IntInfo[id][ieY], IntInfo[id][ieZ]);
		IntInfo[id][iEIcon]=CreateDynamicPickup(1318, 1, IntInfo[id][ixX], IntInfo[id][ixY], IntInfo[id][ixZ], IntInfo[id][iWorld], IntInfo[id][iInt]);
	    if(IntInfo[id][iMapIcon] > 0) IntInfo[id][iMIcon]=CreateDynamicMapIcon(IntInfo[id][ieX], IntInfo[id][ieY], IntInfo[id][ieZ], IntInfo[id][iMapIcon], COLOR_YELLOW);
		//==========//
		format(fetch, 128, "Loaded INTfile: %d.", id);
		printf(fetch);
		Iter_Add(IntIterator, id);
	}
	return true;
}
//============================================//
stock LoadFactions() {
    for(new i=1; i<MAX_FACTIONS; i++) {
		LoadFactionID(i);
	}
	return true;
}
//============================================//
stock LoadFactionID(id) {
	new query[278];
	format(query, sizeof(query), "SELECT * FROM factions WHERE ID=%d", id);
    mysql_function_query(handlesql, query,true, "LoadFactionSQL", "i", id);
	return true;
}
//============================================//
stock SaveFaction(id) {
	new query[278], str2[128];
	mysql_real_escape_string(FactionInfo[id][fName], str2);
	format(query, sizeof(query), "UPDATE factions SET Name='%s' WHERE ID=%d",str2, id);
    mysql_tquery(handlesql, query);
	new safeRank[128];
	for(new i=1; i < 25; i++) {
		format(str2, 128, "Rank%d", i);
	    if(strlen(FactionRank[id][i]) >= 2) {
			mysql_real_escape_string(FactionRank[id][i], safeRank);
          	format(query, sizeof(query), "UPDATE factions SET %s='%s' WHERE ID=%d",str2,safeRank, id);
    		mysql_tquery(handlesql, query);
	    }
	}
	format(query, sizeof(query), "UPDATE factions SET Motd='%s', Rights=%d  WHERE ID=%d",FactionInfo[id][fMOTD], FactionInfo[id][fRights],id);
    mysql_tquery(handlesql, query);
	for(new i=0; i < 3; i++) {
		format(str2, 128, "Fact%d", i);
		format(query, sizeof(query), "UPDATE factions SET %s='%f' WHERE ID=%d",str2,FactionInfo[id][fFact][i], id);
		mysql_tquery(handlesql, query);
	}
	//==========//
	FactionCP[id]=CreateDynamicCP(FactionInfo[id][fFact][0], FactionInfo[id][fFact][1], FactionInfo[id][fFact][2], 1.5, 0, -1, -1, 10.0);
	//==========//
	format(str2, 128, "Saved FACTION: %d in MYSQL.", id);
	printf(str2);
	return true;
}
//============================================//
stock SaveFactionShipment(id) { //Saves the factions WepCount/DrugCount values.
	new query[84];
	mysql_format(handlesql, query, sizeof(query), "UPDATE factions SET WepCount=%d,DrugCount=%d WHERE ID=%d", FactionInfo[id][fWepCount], FactionInfo[id][fDrugCount], id);
	mysql_tquery(handlesql, query);
}
//============================================//
stock LoadBizzes()
{
	new query[255];
	for(new i=1; i< MAX_BUSINESSES; i++)
	{
		format(query, sizeof(query), "SELECT * FROM business WHERE ID=%d", i);
		mysql_function_query(handlesql, query, true, "LoadBizSQL", "d", i);
	}
	return 1;
}
//============================================//
forward LoadBizSQL(id);
public LoadBizSQL(id)
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
		BizInfo[id][ID] = cache_get_field_content_int(0, "ID");
		new fetch[255];
		cache_get_field_content(0, "Xo", fetch);
		BizInfo[id][Xo] = floatstr(fetch);
		cache_get_field_content(0, "Yo", fetch);
		BizInfo[id][Yo] = floatstr(fetch);
		cache_get_field_content(0, "Zo", fetch);
		BizInfo[id][Zo] = floatstr(fetch);
		cache_get_field_content(0, "Xi", fetch);
		BizInfo[id][Xi] = floatstr(fetch);
		cache_get_field_content(0, "Yi", fetch);
		BizInfo[id][Yi] = floatstr(fetch);
		cache_get_field_content(0, "Zi", fetch);
		BizInfo[id][Zi] = floatstr(fetch);	
		BizInfo[id][bbdXo] = cache_get_field_content_float(0, "bdXo");
		BizInfo[id][bbdYo] = cache_get_field_content_float(0, "bdYo");
		BizInfo[id][bbdZo] = cache_get_field_content_float(0, "bdZo");
		BizInfo[id][bbdXi] = cache_get_field_content_float(0, "bdXi");
		BizInfo[id][bbdYi] = cache_get_field_content_float(0, "bdYi");
		BizInfo[id][bbdZi] = cache_get_field_content_float(0, "bdZi");
		BizInfo[id][IntIn] = cache_get_field_content_int(0, "IntIn");
		BizInfo[id][IntOut] = cache_get_field_content_int(0, "IntOut");
		cache_get_field_content(0, "Owned", fetch);
		BizInfo[id][Owned] = strval(fetch);
		cache_get_field_content(0, "Owner", fetch);
		format(BizInfo[id][Owner], 25, fetch);
		cache_get_field_content(0, "Slogan", fetch);
		format(BizInfo[id][Slogan], 128, fetch);
		cache_get_field_content(0, "Name", fetch);
		format(BizInfo[id][Name], 128, fetch);
		BizInfo[id][Value] = cache_get_field_content_int(0, "Value");
		BizInfo[id][bLocked] = cache_get_field_content_int(0, "Locked");
		BizInfo[id][Products] = cache_get_field_content_int(0, "Products");
		BizInfo[id][Bank] = cache_get_field_content_int(0, "Bank");
		BizInfo[id][bReq] = cache_get_field_content_int(0, "bReq");
		BizInfo[id][bProd] = cache_get_field_content_int(0, "bProd");
		cache_get_field_content(0, "FurnR", fetch);
  		format(BizInfo[id][FurnR], 128, fetch);
  		cache_get_field_content(0, "CP1", fetch);
		BizInfo[id][CP][0] = floatstr(fetch);
		cache_get_field_content(0, "CP2", fetch);
		BizInfo[id][CP][1] = floatstr(fetch);
		cache_get_field_content(0, "CP3", fetch);
		BizInfo[id][CP][2] = floatstr(fetch);
		BizInfo[id][cT] = cache_get_field_content_int(0, "cT");
		
		BizInfo[id][Combo] = cache_get_field_content_int(0, "Combo");
		BizInfo[id][sLocked] = cache_get_field_content_int(0, "sLocked");
		
  		new fetstr[50];
		for(new i = 0; i < MAX_HOUSE_SLOTS; i++)
		{
			format(fetstr, 50, "InvID%d", i);
			BizInfo[id][InvID][i] = cache_get_field_content_int(0, fetstr);
			if(BizInfo[id][InvID][i] > 0)
			{
				format(fetstr, 50, "InvQ%d", i);
				BizInfo[id][InvQ][i] = cache_get_field_content_int(0, fetstr);
				format(fetstr, 50, "InvE%d", i);
				BizInfo[id][InvE][i] = cache_get_field_content_int(0, fetstr);
				format(fetstr, 50, "InvS%d", i);
				BizInfo[id][InvS][i] = cache_get_field_content_int(0, fetstr);
			}
		}
		
		BizInfo[id][Icon]=CreateDynamicPickup(1272, 1, BizInfo[id][Xo], BizInfo[id][Yo], BizInfo[id][Zo]);
		new msg[70];
		format(msg, sizeof(msg), "[%s]",BizInfo[id][Name]);
		BizInfo[id][Text] = Create3DTextLabel(msg, 0x008080FF, BizInfo[id][Xo], BizInfo[id][Yo], BizInfo[id][Zo] + 0.5, 0, 0);
		strmid(BizInfo[id][bRadio], "None", 0, strlen("None"), 255);
		if(BizInfo[id][Owned] > 0)
		{
			new query[248];
			format(query, sizeof(query), "SELECT * FROM bizzfurn WHERE BID=%d", BizInfo[id][ID]);
			mysql_function_query(handlesql, query, true, "LoadBizzFurn", "i", id);
		}
		BizInfo[id][bExit] = CreateDynamicPickup(1318, 1, BizInfo[id][Xi], BizInfo[id][Yi], BizInfo[id][Zi], id, BizInfo[id][IntIn]);
	
		if(BizInfo[id][bbdXo] != 0 || BizInfo[id][bbdYo] != 0 || BizInfo[id][bbdZo] != 0) {
			BizInfo[id][bbdoIcon] = CreateDynamicPickup(1318, 1, BizInfo[id][bbdXo], BizInfo[id][bbdYo], BizInfo[id][bbdZo], 0, BizInfo[id][IntOut]);
		}

		if(BizInfo[id][bbdXi] != 0 || BizInfo[id][bbdYi] != 0 || BizInfo[id][bbdZi] != 0) {
			BizInfo[id][bbdiIcon] = CreateDynamicPickup(1318, 1, BizInfo[id][bbdXi], BizInfo[id][bbdYi], BizInfo[id][bbdZi], id, BizInfo[id][IntIn]);
		}		
		Iter_Add(BizIterator, id);
	}
	return 1;
}

//============================================//

stock SaveBizes()
{
	new query[700];
	for(new i=1; i< MAX_BUSINESSES; i++)
	{
		new eSlogan[128],eName[128];
		mysql_real_escape_string(BizInfo[i][Slogan], eSlogan);
		mysql_real_escape_string(BizInfo[i][Name], eName);
		format(query, sizeof(query), "UPDATE `business` SET bReq=%d, bProd=%d, Xo=%f,`Yo`=%f,`Zo`=%f,`Xi`=%f,`Yi`=%f,`Zi`=%f,`IntOut`=%d,`IntIn`=%d,`Owned`=%d,`Owner`='%s',`Value`=%d, Locked=%d, Products=%d, EnterPrice=%d, Name='%s', Slogan='%s', Bank=%d, Combo=%d, sLocked=%d WHERE ID=%d",
		BizInfo[i][bReq], BizInfo[i][bProd],
		BizInfo[i][Xo],BizInfo[i][Yo],BizInfo[i][Zo],
		BizInfo[i][Xi],BizInfo[i][Yi],BizInfo[i][Zi],
		BizInfo[i][IntOut],BizInfo[i][IntIn],
		BizInfo[i][Owned],BizInfo[i][Owner],
		BizInfo[i][Value],BizInfo[i][Locked],
		BizInfo[i][Products],BizInfo[i][EnterPrice],
		eName,eSlogan,
		BizInfo[i][Bank],BizInfo[i][Combo],
		BizInfo[i][sLocked],BizInfo[i][ID]);
		mysql_tquery(handlesql, query);

		mysql_format(handlesql, query, sizeof(query), "UPDATE `business` SET `CP1`=%f,`CP2`=%f,`CP3`=%f,`cT`=%d,`FurnR`='%s' WHERE ID=%d",
		BizInfo[i][CP][0],BizInfo[i][CP][1],BizInfo[i][CP][2],
		BizInfo[i][cT],BizInfo[i][FurnR],BizInfo[i][ID]);
		mysql_tquery(handlesql, query);		
		
		for(new h = 0; h < MAX_HOUSE_SLOTS; h++)
		{
			mysql_format(handlesql, query, sizeof(query), "UPDATE `business` SET `InvID%d`=%d,`InvQ%d`=%d,`InvE%d`=%d,`InvS%d`=%d WHERE ID=%d",
			h, BizInfo[i][InvID][h], h, BizInfo[i][InvQ][h], h, BizInfo[i][InvE][h], h, BizInfo[i][InvS][h], BizInfo[i][ID]);
			mysql_tquery(handlesql, query);
		}
	}
	return 1;
}

stock SaveBiz(i)
{
	new eSlogan[128],eName[128];
	mysql_real_escape_string(BizInfo[i][Slogan], eSlogan);
	mysql_real_escape_string(BizInfo[i][Name], eName);
	new query[700];
	format(query, sizeof(query), "UPDATE `business` SET bReq=%d, bProd=%d, Xo=%f,`Yo`=%f,`Zo`=%f,`Xi`=%f,`Yi`=%f,`Zi`=%f,`IntOut`=%d,`IntIn`=%d,`Owned`=%d,`Owner`='%s',`Value`=%d, Locked=%d, Products=%d, EnterPrice=%d, Name='%s', Slogan='%s', Bank=%d, Combo=%d, sLocked=%d WHERE ID=%d",
  	BizInfo[i][bReq], BizInfo[i][bProd],
	BizInfo[i][Xo],BizInfo[i][Yo],BizInfo[i][Zo],
	BizInfo[i][Xi],BizInfo[i][Yi],BizInfo[i][Zi],
	BizInfo[i][IntOut],BizInfo[i][IntIn],
	BizInfo[i][Owned],BizInfo[i][Owner],
	BizInfo[i][Value],BizInfo[i][Locked],
	BizInfo[i][Products],BizInfo[i][EnterPrice],
	eName,eSlogan,
	BizInfo[i][Bank],BizInfo[i][Combo],
	BizInfo[i][sLocked],BizInfo[i][ID]);
	mysql_tquery(handlesql, query);
	
    format(query, sizeof(query), "UPDATE `business` SET `CP1`=%f,`CP2`=%f,`CP3`=%f,`cT`=%d,`FurnR`='%s' WHERE ID=%d",
    BizInfo[i][CP][0],BizInfo[i][CP][1],BizInfo[i][CP][2],
    BizInfo[i][cT],BizInfo[i][FurnR],BizInfo[i][ID]);
	mysql_tquery(handlesql, query);
	
	for(new h = 0; h < MAX_HOUSE_SLOTS; h++)
	{
		mysql_format(handlesql, query, sizeof(query), "UPDATE `business` SET `InvID%d`=%d,`InvQ%d`=%d,`InvE%d`=%d,`InvS%d`=%d WHERE ID=%d",
		h, BizInfo[i][InvID][h], h, BizInfo[i][InvQ][h], h, BizInfo[i][InvE][h], h, BizInfo[i][InvS][h], BizInfo[i][ID]);
		mysql_tquery(handlesql, query);
	}
	return 1;
}

stock SaveBizzBackdoor(i)
{
	new query[184];
	mysql_format(handlesql, query, sizeof(query), "UPDATE `business` SET `bdXo`=%f,`bdYo`=%f,`bdZo`=%f,`bdXi`=%f,`bdYi`=%f,`bdZi`=%f WHERE ID=%d",
	BizInfo[i][bbdXo], BizInfo[i][bbdYo], BizInfo[i][bbdZo], BizInfo[i][bbdXi], BizInfo[i][bbdYi], BizInfo[i][bbdZi], BizInfo[i][ID]);
	mysql_tquery(handlesql, query);
	return 1;
}
//============================================//
stock LoadHouses() {
	new query[255];
	for(new i=1; i< MAX_HOUSES; i++) {
		mysql_format(handlesql, query, sizeof(query), "SELECT * FROM houses WHERE ID=%d", i);
		mysql_function_query(handlesql, query, true, "LoadHouseSQL", "d", i);
	}
	return 1;
}
//============================================//
stock LoadHouseID(id) {
	new query[255];
	format(query, sizeof(query), "SELECT * FROM houses WHERE ID=%d", id);
	mysql_function_query(handlesql, query, true, "LoadHouseSQL", "d", id);
	return 1;
}
//============================================//
stock SaveHouses() {
	new query[700];
	for(new i=1; i< MAX_HOUSES; i++)
	{
		format(query, sizeof(query), "UPDATE `houses` SET `Xo`=%f,`Yo`=%f,`Zo`=%f,`Xi`=%f,`Yi`=%f,`Zi`=%f,`IntOut`=%d,`IntIn`=%d,`VwOut`=%d,`Owned`=%d,`Owner`='%s',`Value`=%d,`BuyValue`=%d, `Class`=%d, `FurnR`='%s', `Bank`=%d, `Combo`=%d, `sLocked`=%d, `Materials`=%d WHERE ID=%d",
		HouseInfo[i][hXo],HouseInfo[i][hYo],HouseInfo[i][hZo],HouseInfo[i][hXi],HouseInfo[i][hYi],HouseInfo[i][hZi],HouseInfo[i][hIntOut],HouseInfo[i][hIntIn],HouseInfo[i][hVwOut],HouseInfo[i][hOwned],HouseInfo[i][hOwner],HouseInfo[i][hValue],HouseInfo[i][hBuyValue],HouseInfo[i][hClass], HouseInfo[i][hFurnR], HouseInfo[i][hBank], HouseInfo[i][hCombo], HouseInfo[i][sLocked], HouseInfo[i][hMats], HouseInfo[i][hID]);
		mysql_tquery(handlesql, query);

		mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `Garage`=%i, `hgXo`=%f, `hgYo`=%f, `hgZo`=%f, `hgAo`=%f, `gInterior`=%d, `hgXi`=%f, `hgYi`=%f, `hgZi`=%f, `hgAi`=%f WHERE `ID`=%d",
		HouseInfo[i][Garage],
		HouseInfo[i][hgXo],
		HouseInfo[i][hgYo],
		HouseInfo[i][hgZo],
		HouseInfo[i][hgAo],
		HouseInfo[i][gInterior],
		HouseInfo[i][hgXi],
		HouseInfo[i][hgYi],
		HouseInfo[i][hgZi],
		HouseInfo[i][hgAi], HouseInfo[i][hID]);
		mysql_tquery(handlesql, query);

		for(new h = 0; h < MAX_HOUSE_SLOTS; h++)
		{
			mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `InvID%d`=%d,`InvQ%d`=%d,`InvE%d`=%d,`InvS%d`=%d WHERE ID=%d",
			h, HouseInfo[i][hInvID][h], h, HouseInfo[i][hInvQ][h], h, HouseInfo[i][hInvE][h], h, HouseInfo[i][hInvS][h], HouseInfo[i][hID]);
			mysql_tquery(handlesql, query);
		}
	}
	return 1;
}

stock SaveHouse(i)
{
	new query[700];
	format(query, sizeof(query), "UPDATE `houses` SET `Xo`=%f,`Yo`=%f,`Zo`=%f,`Xi`=%f,`Yi`=%f,`Zi`=%f,`IntOut`=%d,`IntIn`=%d,`VwOut`=%d,`Owned`=%d,`Owner`='%s',`Value`=%d,`BuyValue`=%d, `Class`=%d, `FurnR`='%s', `Bank`=%d, `Combo`=%d, `sLocked`=%d, `Materials`=%d WHERE ID=%d",
	HouseInfo[i][hXo],HouseInfo[i][hYo],HouseInfo[i][hZo],HouseInfo[i][hXi],HouseInfo[i][hYi],HouseInfo[i][hZi],HouseInfo[i][hIntOut],HouseInfo[i][hIntIn],HouseInfo[i][hVwOut],HouseInfo[i][hOwned],HouseInfo[i][hOwner],HouseInfo[i][hValue],HouseInfo[i][hBuyValue],HouseInfo[i][hClass], HouseInfo[i][hFurnR], HouseInfo[i][hBank], HouseInfo[i][hCombo], HouseInfo[i][sLocked], HouseInfo[i][hMats], HouseInfo[i][hID]);
	mysql_tquery(handlesql, query);

	mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `Garage`=%i, `hgXo`=%f, `hgYo`=%f, `hgZo`=%f, `hgAo`=%f, `gInterior`=%d, `hgXi`=%f, `hgYi`=%f, `hgZi`=%f, `hgAi`=%f WHERE `ID`=%d",
	HouseInfo[i][Garage],
	HouseInfo[i][hgXo],
	HouseInfo[i][hgYo],
	HouseInfo[i][hgZo],
	HouseInfo[i][hgAo],
	HouseInfo[i][gInterior],
	HouseInfo[i][hgXi],
	HouseInfo[i][hgYi],
	HouseInfo[i][hgZi],
	HouseInfo[i][hgAi], HouseInfo[i][hID]);
	mysql_tquery(handlesql, query);
	
	for(new h = 0; h < MAX_HOUSE_SLOTS; h++)
	{
		mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `InvID%d`=%d,`InvQ%d`=%d,`InvE%d`=%d,`InvS%d`=%d WHERE ID=%d",
		h, HouseInfo[i][hInvID][h], h, HouseInfo[i][hInvQ][h], h, HouseInfo[i][hInvE][h], h, HouseInfo[i][hInvE][h], HouseInfo[i][hID]);
		mysql_tquery(handlesql, query);
	}
	return 1;
}

stock SaveHouseBackdoor(i)
{
	new query[184];
	mysql_format(handlesql, query, sizeof(query), "UPDATE `houses` SET `bdXo`=%f,`bdYo`=%f,`bdZo`=%f,`bdXi`=%f,`bdYi`=%f,`bdZi`=%f WHERE ID=%d",
	HouseInfo[i][hbdXo], HouseInfo[i][hbdYo], HouseInfo[i][hbdZo], HouseInfo[i][hbdXi], HouseInfo[i][hbdYi], HouseInfo[i][hbdZi], HouseInfo[i][hID]);
	mysql_tquery(handlesql, query);
	return 1;
}

//============================================//
forward LoadHouseSQL(id);
public LoadHouseSQL(id)
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
		HouseInfo[id][hID] = cache_get_field_content_int(0, "ID");
		new fetch[255];
		cache_get_field_content(0, "Xo", fetch);
		HouseInfo[id][hXo] = floatstr(fetch);
		cache_get_field_content(0, "Yo", fetch);
		HouseInfo[id][hYo] = floatstr(fetch);
		cache_get_field_content(0, "Zo", fetch);
		HouseInfo[id][hZo] = floatstr(fetch);
		cache_get_field_content(0, "Xi", fetch);
		HouseInfo[id][hXi] = floatstr(fetch);
		cache_get_field_content(0, "Yi", fetch);
		HouseInfo[id][hYi] = floatstr(fetch);
		cache_get_field_content(0, "Zi", fetch);
		HouseInfo[id][hZi] = floatstr(fetch);
		cache_get_field_content(0, "IntOut", fetch);
		HouseInfo[id][hIntOut] = strval(fetch);
		cache_get_field_content(0, "IntIn", fetch);
		HouseInfo[id][hIntIn] = strval(fetch);
		cache_get_field_content(0, "VwOut", fetch);
		HouseInfo[id][hVwOut] = strval(fetch);
		cache_get_field_content(0, "Owned", fetch);
		HouseInfo[id][hOwned] = strval(fetch);
		cache_get_field_content(0, "Owner", fetch);
  		format(HouseInfo[id][hOwner], 128, fetch);
		cache_get_field_content(0, "Value", fetch);
		HouseInfo[id][hValue] = strval(fetch);
		cache_get_field_content(0, "BuyValue", fetch);
		HouseInfo[id][hBuyValue] = strval(fetch);
		cache_get_field_content(0, "InvID1", fetch);
		cache_get_field_content(0, "Locked", fetch);
		HouseInfo[id][hLocked] = strval(fetch);
		cache_get_field_content(0, "Radio", fetch);
		HouseInfo[id][hRadio] = strval(fetch);
		cache_get_field_content(0, "TV", fetch);
		HouseInfo[id][hTV] = strval(fetch);
		cache_get_field_content(0, "Class", fetch);
		HouseInfo[id][hClass] = strval(fetch);
		
		cache_get_field_content(0, "FurnR", fetch);
  		format(HouseInfo[id][hFurnR], 25, fetch);
		
		cache_get_field_content(0, "Bank", fetch);
		HouseInfo[id][hBank] = strval(fetch);
		cache_get_field_content(0, "Combo", fetch);
		HouseInfo[id][hCombo] = strval(fetch);		
		cache_get_field_content(0, "sLocked", fetch);
		HouseInfo[id][sLocked] = strval(fetch);		
		
		HouseInfo[id][hMats] = cache_get_field_content_int(0, "Materials");
		
		HouseInfo[id][Garage] = cache_get_field_content_int(0, "Garage");
		HouseInfo[id][hgXo] = cache_get_field_content_float(0, "hgXo");
		HouseInfo[id][hgYo] = cache_get_field_content_float(0, "hgYo");
		HouseInfo[id][hgZo] = cache_get_field_content_float(0, "hgZo");
		HouseInfo[id][hgAo] = cache_get_field_content_float(0, "hgAo");
		HouseInfo[id][gInterior] = cache_get_field_content_int(0, "gInterior");
		HouseInfo[id][hgXi] = cache_get_field_content_float(0, "hgXi");
		HouseInfo[id][hgYi] = cache_get_field_content_float(0, "hgYi");
		HouseInfo[id][hgZi] = cache_get_field_content_float(0, "hgZi");
		HouseInfo[id][hgAi] = cache_get_field_content_float(0, "hgAi");

		HouseInfo[id][hbdXo] = cache_get_field_content_float(0, "bdXo");
		HouseInfo[id][hbdYo] = cache_get_field_content_float(0, "bdYo");
		HouseInfo[id][hbdZo] = cache_get_field_content_float(0, "bdZo");
		HouseInfo[id][hbdXi] = cache_get_field_content_float(0, "bdXi");
		HouseInfo[id][hbdYi] = cache_get_field_content_float(0, "bdYi");
		HouseInfo[id][hbdZi] = cache_get_field_content_float(0, "bdZi");
		
		new fetstr[50];
		for(new i = 0; i < MAX_HOUSE_SLOTS; i++)
		{
			format(fetstr, 50, "InvID%d", i);
			cache_get_field_content(0, fetstr, fetch);
			HouseInfo[id][hInvID][i] = strval(fetch);
			format(fetstr, 50, "InvQ%d", i);
			cache_get_field_content(0, fetstr, fetch);
			HouseInfo[id][hInvQ][i] = strval(fetch);
			format(fetstr, 50, "InvE%d", i);
			cache_get_field_content(0, fetstr, fetch);
			HouseInfo[id][hInvE][i] = strval(fetch);
			format(fetstr, 50, "InvS%d", i);
			cache_get_field_content(0, fetstr, fetch);
			HouseInfo[id][hInvS][i] = strval(fetch);
		}
		
		CreateDynamicMapIcon(HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo], 31, COLOR_YELLOW, HouseInfo[id][hVwOut], 0, -1, 5.0);
  		//HouseInfo[id][hIcon]=CreateDynamicPickup(1273, 1, HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo],HouseInfo[id][hVwOut]);
  		HouseInfo[id][hIcon] = CreateDynamicCP(HouseInfo[id][hXo], HouseInfo[id][hYo], HouseInfo[id][hZo], 1.5, HouseInfo[id][hVwOut], -1, -1, 10.0);
  		HouseInfo[id][hExit] = CreateDynamicCP(HouseInfo[id][hXi], HouseInfo[id][hYi], HouseInfo[id][hZi], 1.5, id, HouseInfo[id][hIntIn], -1, 10.0);
		printf("House %d loaded from MySQL", id);
		//==========//
		if(HouseInfo[id][hOwned] > 0)
		{
		    new query[64];
		    format(query, sizeof(query), "SELECT * FROM housefurn WHERE HID=%d", HouseInfo[id][hID]);
			mysql_function_query(handlesql, query, true, "LoadFurn", "i", id);
			
			if(HouseInfo[id][Garage] != 0) {
				HouseInfo[id][gIcon] = CreateDynamicCP(HouseInfo[id][hgXo], HouseInfo[id][hgYo], HouseInfo[id][hgZo], 3.0, HouseInfo[id][hVwOut], -1, -1, 10.0);	    
				HouseInfo[id][gExit] = CreateDynamicPickup(1318, 1, HouseInfo[id][hgXi], HouseInfo[id][hgYi], HouseInfo[id][hgZi], id, HouseInfo[id][hIntIn]);
			}
			
			if(HouseInfo[id][hbdXo] != 0 || HouseInfo[id][hbdYo] != 0 || HouseInfo[id][hbdZo] != 0) {
				HouseInfo[id][hbdoIcon] = CreateDynamicCP(HouseInfo[id][hbdXo], HouseInfo[id][hbdYo], HouseInfo[id][hbdZo], 1.5, HouseInfo[id][hVwOut], -1, -1, 10.0);
			}

			if(HouseInfo[id][hbdXi] != 0 || HouseInfo[id][hbdYi] != 0 || HouseInfo[id][hbdZi] != 0) {
				HouseInfo[id][hbdiIcon] = CreateDynamicCP(HouseInfo[id][hbdXi], HouseInfo[id][hbdYi], HouseInfo[id][hbdZi], 1.5, id, -1, -1, 10.0);
			}			
		}

		Iter_Add(HouseIterator, id);
    }
	return 1;
}

//============================================//
public RegLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	hour = FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "logs/RegisterLog_%s_%d.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock split(const strsrc[], strdest[][], delimiter = '|')
{
	new i, li, aNum, len, srclen = strlen(strsrc);
	while(i <= srclen)
	{
		if (strsrc[i] == delimiter || i == srclen)
		{
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i + 1;
			aNum++;
		}
		i++;
	}
	return 1;
}
//============================================//
public LoadChecks(playerid)
{
	if(GetPVarInt(playerid, "BizzEnter") != 0)
	{
		new b = GetPVarInt(playerid, "BizzEnter");
	    if(IsPlayerInRangeOfPoint(playerid, 100.0, BizInfo[b][CP][0], BizInfo[b][CP][1], BizInfo[b][CP][2]))
        {
            SetPlayerCheckpoint(playerid, BizInfo[b][CP][0],BizInfo[b][CP][1],BizInfo[b][CP][2],1.0);
            return 1;
        }
	}
    for(new i = 0; i < sizeof(CheckpointAreas); i++)
	{
        if(IsPlayerInRangeOfPoint(playerid,20.0,CheckpointAreas[i][cX],CheckpointAreas[i][cY],CheckpointAreas[i][cZ]))
        {
            SetPlayerCheckpoint(playerid, CheckpointAreas[i][cXe],CheckpointAreas[i][cYe],CheckpointAreas[i][cZe],1.0);
        }
    }
    return 1;
}
//============================================//
public TogglePlayerControllableEx(playerid,option)
{
    Streamer_Update(playerid);
    if(GetPlayerInterior(playerid) != 0) LoadChecks(playerid);
	TogglePlayerControllable(playerid, option);
	return true;
}
//============================================//
stock CheckSex(playerid)
{
    new stext[5];
	switch (GetPVarInt(playerid, "Sex"))
	{
        case 1: stext = "his";
	    case 2: stext = "her";
	}
    return stext;
}
//============================================//
stock GetCharge(playerid, type)
{
	switch(type)
	{
	    case 1: return GetPVarInt(playerid, "Cash");
	    case 2: return GetPVarInt(playerid, "Bank");
	}
	return true;
}
//============================================//
stock GiveCharge(playerid, money, type)
{
	switch(type)
	{
	    case 1:
	    {
	        SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	        if(GetPVarInt(playerid, "Cash") < 0) SetPVarInt(playerid, "Cash", 0);
	        SetSlidedMoneyBar(playerid);
	    }
	    case 2:
	    {
	        SetPVarInt(playerid, "Bank", GetPVarInt(playerid, "Bank")+money);
	        if(GetPVarInt(playerid, "Bank") < 0) SetPVarInt(playerid, "Bank", 0);
	    }
	}
	return true;
}
//============================================//
public PurchaseItem(playerid, type, listitem, charge)
{
	new string[128];
    DeletePVar(playerid, "PDBT");
	switch(type)
	{
	    case 1:
	    {
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    //if(CheckInvItem(playerid, StoreItems[listitem][0])) return SendClientMessage(playerid, COLOR_WHITE, "You already have this item!");
		    if(StoreItems[listitem][0] >= 300 && StoreItems[listitem][0] <= 302)
		    {
		        if(GetPVarInt(playerid, "Age") <= 17) return SendClientMessage(playerid, COLOR_WHITE, "You are underaged to purchase this item!");
		    }
		    if(GetCharge(playerid, charge) >= StoreItems[listitem][1] || GetPVarInt(playerid, "MonthDon") > 0)
		    {
				if(StoreItems[listitem][0] == 1003 && GetPVarInt(playerid,"ConnectTime") < 24) return SendClientMessage(playerid, COLOR_WHITE, "You must have at least 24 hours played to purchase a boombox!");
		        if(StoreItems[listitem][0] != 407 && StoreItems[listitem][0] != 1008) GiveInvItem(playerid, StoreItems[listitem][0], PrintIQ(StoreItems[listitem][0]), 0); //Not for lottery tickets or gas cans.
				new gc = charge;
				if(GetPVarInt(playerid, "MonthDon") > 0) {
					new id = StoreItems[listitem][0];
				    if(id == 404 || id == 405 || id == 408) {
						scm(playerid, COLOR_LIGHTRED, "Subscription Notice: This item will not be free to avoid pawnshop abuse.");
				    } else gc = 0;
				}
				if(gc > 0) { GiveCharge(playerid, -StoreItems[listitem][1], charge); }
		        format(string, 128, "%s purchased for $%d!", PrintIName(StoreItems[listitem][0]), StoreItems[listitem][1]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-$%d", StoreItems[listitem][1]);
		        GameTextForPlayer(playerid, string, 5000, 1);
		        BizzProduct(GetPVarInt(playerid, "BizzEnter"));
		        if(GetPVarInt(playerid, "MonthDon") == 0) BizzTill(GetPVarInt(playerid, "BizzEnter"), StoreItems[listitem][1]/2);
	            if(StoreItems[listitem][0] == 407) { //Lottery tickets.
	                ShowPlayerDialog(playerid, 418, DIALOG_STYLE_INPUT, "Lottery ticket", "What number would you like your ticket to be? \nInsert any number between 1-500", "Buy","");
				} else if(StoreItems[listitem][0] == 1008) {
					GiveInvItem(playerid, 1008, 0, -1);
					scm(playerid, COLOR_BLUE, "[TIP] {FFFFFF}You can fill gas cans by using them near fuel pumps.");
				}
	        }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		}
		case 2:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    //if(CheckInvItem(playerid, BurgerItems[listitem][0])) return SendClientMessage(playerid, COLOR_WHITE, "You already have this item!");
		    if(GetCharge(playerid, charge) >= BurgerItems[listitem][1] || GetPVarInt(playerid, "MonthDon") > 0)
		    {
		        GiveInvItem(playerid, BurgerItems[listitem][0], PrintIQ(BurgerItems[listitem][0]), 0);
		        if(GetPVarInt(playerid, "MonthDon") == 0)GiveCharge(playerid, -BurgerItems[listitem][1], charge);
		        format(string, 128, "%s purchased for $%d!", PrintIName(BurgerItems[listitem][0]), BurgerItems[listitem][1]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-$%d", BurgerItems[listitem][1]);
		        if(GetPVarInt(playerid, "MonthDon") == 0)
		        {
		      		foreach(new h : BizIterator)
					{
					    if(BizInfo[h][ID] != 0)
					    {
					        if(IsPlayerInRangeOfPoint(playerid, 25.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == h)
					        {
					            if(BizInfo[h][Owned] != 0)
					            {
	 								BizInfo[h][Bank] = BizInfo[h][Bank] + (BurgerItems[listitem][1] / 3);
					            }
							}
						}
		            }
	            }
		        GameTextForPlayer(playerid, string, 5000, 1);
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		}
		case 3:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    //if(CheckInvItem(playerid, PizzaItems[listitem][0])) return SendClientMessage(playerid, COLOR_WHITE, "You already have this item!");
		    if(GetCharge(playerid, charge) >= PizzaItems[listitem][1] || GetPVarInt(playerid, "MonthDon") > 0)
		    {
		        GiveInvItem(playerid, PizzaItems[listitem][0], PrintIQ(PizzaItems[listitem][0]), 0);
		        if(GetPVarInt(playerid, "MonthDon") == 0)GiveCharge(playerid, -PizzaItems[listitem][1], charge);
		        format(string, 128, "%s purchased for $%d!", PrintIName(PizzaItems[listitem][0]), PizzaItems[listitem][1]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-$%d", PizzaItems[listitem][1]);
		        GameTextForPlayer(playerid, string, 5000, 1);
		        if(GetPVarInt(playerid, "MonthDon") == 0)
		        {
		      		foreach(new h : BizIterator)
					{
					    if(BizInfo[h][ID] != 0)
					    {
					        if(IsPlayerInRangeOfPoint(playerid, 25.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == h)
					        {
					            if(BizInfo[h][Owned] != 0)
					            {
	 								BizInfo[h][Bank] = BizInfo[h][Bank] + (PizzaItems[listitem][1] / 3);
					            }
							}
						}
		            }
	            }
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		}
		case 4:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    //if(CheckInvItem(playerid, CluckItems[listitem][0])) return SendClientMessage(playerid, COLOR_WHITE, "You already have this item!");
		    if(GetCharge(playerid, charge) >= CluckItems[listitem][1] || GetPVarInt(playerid, "MonthDon") > 0)
		    {
		        GiveInvItem(playerid, CluckItems[listitem][0], PrintIQ(CluckItems[listitem][0]), 0);
		        if(GetPVarInt(playerid, "MonthDon") == 0)GiveCharge(playerid, -CluckItems[listitem][1], charge);
		        format(string, 128, "%s purchased for $%d!", PrintIName(CluckItems[listitem][0]), CluckItems[listitem][1]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-$%d", CluckItems[listitem][1]);
		        GameTextForPlayer(playerid, string, 5000, 1);
		        if(GetPVarInt(playerid, "MonthDon") == 0)
		        {
		      		foreach(new h : BizIterator)
					{
					    if(BizInfo[h][ID] != 0)
					    {
					        if(IsPlayerInRangeOfPoint(playerid, 25.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == h)
					        {
					            if(BizInfo[h][Owned] != 0)
					            {
	 								BizInfo[h][Bank] = BizInfo[h][Bank] + (CluckItems[listitem][1] / 3);
					            }
							}
						}
		            }
	            }
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		}
		case 5:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(GetPVarInt(playerid, "ConnectTime") <= 7) return SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient hours played!");
		    switch(AmmuItems[listitem][0])
		    {
		        case 1 .. 50:
		        {
		            //if(CheckInvItem(playerid, AmmuItems[listitem][0])) return SendClientMessage(playerid, COLOR_WHITE, "You already have this item!");
		            new weaponlimit = 3;
		            if(GetPVarInt(playerid, "LicGuns") >= weaponlimit+1)
	                {
	                    if(GetPVarInt(playerid, "LicTime") == 0) SetPVarInt(playerid, "LicTime", 2);
						format(string, sizeof(string), "You currently bought over (%d) weapons you must wait (%d) paydays!", weaponlimit-1, GetPVarInt(playerid, "LicTime"));
						SendClientMessage(playerid, COLOR_WHITE, string);
						return 1;
					}
					SetPVarInt(playerid, "LicGuns", GetPVarInt(playerid, "LicGuns")+1);
		        }
		    }
		    if(IsPrimary(AmmuItems[listitem][0]) && PrimaryWeapon(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You already have a primary weapon!");
		    if(IsSecond(AmmuItems[listitem][0]) && SecondWeapon(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You already have a secondary weapon!");
		    if(GetCharge(playerid, charge) >= AmmuItems[listitem][1])
		    {
				if(GetPVarInt(playerid, "MonthDon") == 1) GiveCharge(playerid, -AmmuItems[listitem][1] / 3, charge);
			 	else GiveCharge(playerid, -AmmuItems[listitem][1], charge);
				GiveInvItem(playerid, AmmuItems[listitem][0], PrintIQ(AmmuItems[listitem][0]), 0, PlayerInfo[playerid][pWepSerial]);
		        format(string, 128, "%s purchased for $%d!", PrintIName(AmmuItems[listitem][0]), AmmuItems[listitem][1]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-$%d", AmmuItems[listitem][1]);
		        GameTextForPlayer(playerid, string, 5000, 1);
		        if(GetPVarInt(playerid, "MonthDon") == 0)
		        {
		      		foreach(new h : BizIterator)
					{
					    if(BizInfo[h][ID] != 0)
					    {
					        if(IsPlayerInRangeOfPoint(playerid, 25.0, BizInfo[h][Xi], BizInfo[h][Yi], BizInfo[h][Zi]) && GetPlayerVirtualWorld(playerid) == h)
					        {
					            if(BizInfo[h][Owned] != 0)
					            {
	 								BizInfo[h][Bank] = BizInfo[h][Bank] + (AmmuItems[listitem][1] / 4);
					            }
							}
						}
		            }
	            }
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		}
		case 6:
		{
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    //if(CheckInvItem(playerid, BarItems[listitem][0])) return SendClientMessage(playerid, COLOR_WHITE, "You already have this item!");
		    if(BarItems[listitem][0] >= 300 && BarItems[listitem][0] <= 302)
		    {
		        if(GetPVarInt(playerid, "Age") <= 17) return SendClientMessage(playerid, COLOR_WHITE, "You are underaged to purchase this item!");
		    }
		    if(GetCharge(playerid, charge) >= BarItems[listitem][1])
		    {
		        GiveInvItem(playerid, BarItems[listitem][0], PrintIQ(BarItems[listitem][0]), 0);
		        GiveCharge(playerid, -BarItems[listitem][1], charge);
		        format(string, 128, "%s purchased for $%d!", PrintIName(BarItems[listitem][0]), BarItems[listitem][1]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-$%d", BarItems[listitem][1]);
		        GameTextForPlayer(playerid, string, 5000, 1);
		        BizzProduct(GetPVarInt(playerid, "BizzEnter"));
		        BizzTill(GetPVarInt(playerid, "BizzEnter"), BarItems[listitem][1]/2);
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		}
		case 7:
		{
		    if(GetPVarInt(playerid, "ConnectTime") <= 7) return SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient hours played!");
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    //if(CheckInvItem(playerid, SexItems[listitem][0])) return SendClientMessage(playerid, COLOR_WHITE, "You already have this item!");
		    if(GetCharge(playerid, charge) >= SexItems[listitem][1])
		    {
		        GiveInvItem(playerid, SexItems[listitem][0], 1, 0);
		        GiveCharge(playerid, -SexItems[listitem][1], charge);
		        format(string, 128, "%s purchased for $%d!", PrintIName(SexItems[listitem][0]), SexItems[listitem][1]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-$%d", SexItems[listitem][1]);
		        GameTextForPlayer(playerid, string, 5000, 1);
		        BizzProduct(GetPVarInt(playerid, "BizzEnter"));
		        BizzTill(GetPVarInt(playerid, "BizzEnter"), SexItems[listitem][1]/2);
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		}
		case 8:
		{
		    if(GetPVarInt(playerid, "ConnectTime") <= 7) return SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient hours played!");
		    if(GetPVarInt(playerid, "Age") <= 17) return SendClientMessage(playerid, COLOR_WHITE, "You are underaged to purchase this item!");
		    if(!CheckInv(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Your inventory is currently full!");
		    if(WarItems[listitem][0] != 406 && CheckInvItem(playerid, WarItems[listitem][0])) return SendClientMessage(playerid, COLOR_WHITE, "You already have this item!");
		    if(GetCharge(playerid, charge) >= WarItems[listitem][1])
		    {
		        if(WarItems[listitem][0] == 43) GiveInvItem(playerid, WarItems[listitem][0], 50, 0);
		        else GiveInvItem(playerid, WarItems[listitem][0], 1, 0);
		        GiveCharge(playerid, -WarItems[listitem][1], charge);
		        format(string, 128, "%s purchased for $%d!", PrintIName(WarItems[listitem][0]), WarItems[listitem][1]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string),"~r~-$%d", WarItems[listitem][1]);
		        GameTextForPlayer(playerid, string, 5000, 1);
		        BizzProduct(GetPVarInt(playerid, "BizzEnter"));
		        BizzTill(GetPVarInt(playerid, "BizzEnter"), WarItems[listitem][1]/2);
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
		}
	}
	return true;
}
//============================================//
stock SendBankDialog(playerid, type)
{
	new string[255];
	switch(type)
	{
	    case 1: format(string, sizeof(string),"Enter the amount of money you would like to deposit into your bank account.\n{FF0000}Able to deposit up to $%d.", GetPlayerMoneyEx(playerid)), ShowPlayerDialog(playerid,12,DIALOG_STYLE_INPUT,"Bank Deposit",string,"Deposit", "Go Back");
	    case 2: format(string, sizeof(string),"Enter the amount of money you would like to withdraw from your bank account.\n{FF0000}Able to withdraw up to $%d.", GetPVarInt(playerid, "Bank")), ShowPlayerDialog(playerid,13,DIALOG_STYLE_INPUT,"Bank Withdraw",string,"Withdraw", "Go Back");
	    case 3: format(string, sizeof(string),"Enter the amount of money you would like to withdraw from your bank account.\n{FF0000}Able to withdraw up to $%d.", GetPVarInt(playerid, "Bank")), ShowPlayerDialog(playerid,14,DIALOG_STYLE_INPUT,"ATM Withdraw",string,"Withdraw", "Close");
	}
	return true;
}
//============================================//
stock IsAtGasStation(playerid)
{
    for(new h = 0; h < sizeof(GasStations); h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,7.0,GasStations[h][0], GasStations[h][1], GasStations[h][2])) return true;
	}
	return false;
}
//============================================//
stock OwnableVehicle(key)
{
    if(VehicleInfo[key][vID] != 0) {
		return true;
	}
	
	return false;
}
//============================================//
stock OwnableVehicleEx(key)
{
    if(VehicleInfo[key][vID] != 0) {
    	return true;
	}

	return false;
}
//============================================//
stock LoadOwnableMods(vehicle, idz)
{
	switch(idz)
	{
		case 1 .. 8:
		{
			if(VehicleInfo[vehicle][vMod][idz] >= 1000 && VehicleInfo[vehicle][vMod][idz] <= 1193)
			{
	    		if(VehicleInfo[vehicle][vMod][idz] != 1008 || VehicleInfo[vehicle][vMod][idz] != 1009 || VehicleInfo[vehicle][vMod][idz] != 1010)
        		{
            		VMC_AddVehicleComponent(vehicle, VehicleInfo[vehicle][vMod][idz], 501);
        		}
        	}
		}
	}
	return 1;
}
//============================================//
stock AddVehMod(id, compid)
{
    for(new i = 1; i < 10; i++)
    {
		if(VehicleInfo[id][vMod][i] == 0)
		{
			VehicleInfo[id][vMod][i]=compid;
			break;
		}
    }
	return true;
}
//============================================//
stock SendFreqMessage(playerid,freq,color,string[])
{
	new Float:X, Float:Y, Float:Z, found = 0;
	GetPlayerPos(playerid,X,Y,Z);
    foreach(new i : Player)
    {
		if(CheckInvItem(i, 402) && GetPVarInt(i, "WalkieFreq") == freq)
		{
		    if(i != playerid && IsPlayerInRangeOfPoint(i,500.0,X,Y,Z))
		    {
		        SendClientMessage(i,color,string);
		        found++;
		    }
		}
    }
    if(found == 0) SendClientMessage(playerid, COLOR_LIGHTBLUE, "*STATIC NOISE* (No-one heard your message) *STATIC NOISE*");
    else SendClientMessage(playerid,color,string);
    return true;
}
//============================================//
stock ProxRadio(Float:radi, playerid, string[], color)
{
    new Float:posx, Float:posy, Float:posz;
	GetPlayerPos(playerid, posx, posy, posz);
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "PlayerLogged") == 1)
        {
		    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		    {
		        if(IsPlayerInRangeOfPoint(i,radi,posx, posy, posz) && IsPlayerStreamedIn(i, playerid))
		        {
					if(i != playerid)
					{
		                SendClientMessage(i, color, string);
		            }
		        }
		    }
        }
    }
    return 1;
}
//============================================//
stock IsPlayerInWater(playerid)
{
    new anim = GetPlayerAnimationIndex(playerid);
    if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return true;
	return false;
}
//============================================//
stock TogglePlayerSpectatingEx(playerid,toggle)
{
    SetPVarInt(playerid, "PlayerSpectate", toggle);
	return TogglePlayerSpectating(playerid, toggle);
}
//============================================//
stock GetAdminCount(type)
{
	new count = 0;
	switch(type)
	{
		case 1:
		{
	    	foreach(new i : Player)
        	{
            	if(GetPVarInt(i, "Admin") >= 1)
            	{
					if(GetPVarInt(i, "Admin") <= 10)
					{
			    		if(GetPVarInt(i, "AFKTime") <= 120)
			    		{
                    		count++;
                		}
                	}
            	}
        	}
        }
        case 2:
        {
            foreach(new i : Player)
        	{
            	if(GetPVarInt(i, "Admin") >= 1)
            	{
					if(GetPVarInt(i, "Admin") <= 10)
					{
                        count++;
                	}
            	}
        	}
        }
    }
	return count;
}
//============================================//
stock SendAdminMessage(color,string[])
{
    foreach(new i : Player)
    {
		if(GetPVarInt(i, "Admin") > 0)
		{
		    SendClientMessage(i,color,string);
		}
    }
    return 1;
}
//============================================//
stock SendLeadMessage(color,string[])
{
    foreach(new i : Player)
    {
		if(GetPVarInt(i, "Admin") >= 10)
		{
		    SendClientMessage(i,color,string);
		}
    }
    return 1;
}
//============================================//
stock SendRegMessage(color,string[])
{
    foreach(new i : Player)
    {
		if(GetPVarInt(i, "Reg") > 0)
		{
		    SendClientMessage(i,color,string);
		}
    }
    return 1;
}
//============================================//
stock SendHelperMessage(color,string[])
{
    foreach(new i : Player)
    {
		if(GetPVarInt(i, "Helper") > 0)
		{
		    SendClientMessage(i,color,string);
		}
    }
    return 1;
}
//============================================//
stock SendDeveloperMessage(color,string[])
{
    foreach(new i : Player)
    {
		if(PlayerInfo[i][pIsDev] > 0)
		{
		    SendClientMessage(i,color,string);
		}
    }
    return 1;
}

//============================================//
stock SendStaffMessage(color,string[])
{
    foreach(new i : Player)
    {
		if(GetPVarInt(i, "Admin") > 0 || GetPVarInt(i, "Helper") > 0 || GetPVarInt(i, "Reg") > 0)
		{
			if(GetPVarInt(i, "TogHa") == 0)
			{
		        SendClientMessage(i,color,string);
		    }
		}
    }
    return 1;
}
//============================================//
stock ReturnSpeedHack(playerid, Float:speed)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        new veh = GetVehicleModel(GetPlayerVehicleID(playerid));
		switch(veh)
		{
			case 402: // Buffalo
			{
			    if(speed >= 300.0) return true;
			}
			case 411, 415, 429: // Infernus & Cheetah & Banshee
			{
			    if(speed >= 330.0) return true;
			}
			case 430, 446: // Boat Speed
		    {
			    if(speed >= 750.0) return true;
			}
		    case 451: // Turismo
		    {
			    if(speed >= 340.0) return true;
			}
			case 452 ,453, 454: // Boat Speed
		    {
			    if(speed >= 750.0) return true;
			}
			case 460: // Airplane
			{
			    if(speed >= 1000.0) return true;
			}
			case 472, 473: // Boat Speed
		    {
			    if(speed >= 750.0) return true;
			}
			case 476: // Airplane
			{
			    if(speed >= 1000.0) return true;
			}
			case 484, 493: // Boat Speed
		    {
			    if(speed >= 750.0) return true;
			}
			case 494, 502: // Hotrings
			{
			    if(speed >= 350.0) return true;
			}
			case 506: // Super GT
			{
			    if(speed >= 300.0) return true;
			}
			case 511, 512, 513, 519, 520: // Airplane
			{
			    if(speed >= 1000.0) return true;
			}
			case 522: // NRG 500
			{
			    if(speed >= 300.0) return true;
			}
			case 541: // Bullet
			{
			    if(speed >= 310.0) return true;
			}
			case 553: // Airplane
			{
			    if(speed >= 1000.0) return true;
			}
			case 559: // Jester
			{
			    if(speed >= 310.0) return true;
			}
			case 577, 592, 593: // Airplane
			{
			    if(speed >= 1000.0) return true;
			}
			case 602: // Aplha
			{
			    if(speed >= 310.0) return true;
			}
			default:
			{
			    if(speed >= 275.0) return true;
			}
		}
    }
    else
    {
        if(speed >= 220.0) return true;
    }
    return false;
}
//============================================//
stock IsRunnies(weaponID)
{
	switch(weaponID)
	{
		case 22,26,28,32: return true;
	}
	return false;
}
//============================================//
stock DisabledWeapon(time,weaponID)
{
	if(time < 8)
	{
	    switch(weaponID)
	    {
		    case 4, 8 .. 9, 16, 18 .. 40, 44 .. 45: return true;
	    }
	}
	else
	{
	    switch(weaponID)
	    {
		    case 8 .. 9: return true;
		    case 35 .. 40, 44 .. 45: return true;
	    }
	}
	return false;
}
//============================================//
stock LearnFightstyle(playerid,cost,type,name[])
{
	if(GetPlayerMoneyEx(playerid) >= cost)
	{
		new string[128];
		PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		GivePlayerMoneyEx(playerid,-cost);
		format(string, sizeof(string),"~r~-$%d",cost);
		GameTextForPlayer(playerid, string, 5000, 1);
		format(string, sizeof(string),"You've learned %s for $%d!",name,cost);
		SendClientMessage(playerid, COLOR_WHITE, string);
		SetPlayerFightingStyle(playerid,type);
		switch(type)
		{
		    case FIGHT_STYLE_NORMAL: return SetPVarInt(playerid, "FightStyle", 0);
		    case FIGHT_STYLE_BOXING: return SetPVarInt(playerid, "FightStyle", 1);
		    case FIGHT_STYLE_KUNGFU: return SetPVarInt(playerid, "FightStyle", 2);
		    case FIGHT_STYLE_KNEEHEAD: return SetPVarInt(playerid, "FightStyle", 3);
		    case FIGHT_STYLE_GRABKICK: return SetPVarInt(playerid, "FightStyle", 4);
		    case FIGHT_STYLE_ELBOW: return SetPVarInt(playerid, "FightStyle", 5);
		}
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
	return 1;
}
//============================================//
stock IsHelmetCar(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 462 || pveh == 448 || pveh == 581 || pveh == 522 || pveh == 461
	|| pveh == 521 || pveh == 523 || pveh == 463 || pveh == 586 || pveh == 468
	|| pveh == 471 || pveh == 481 || pveh == 510 || pveh == 509)
    {
        return true;
    }
	return false;
}
//============================================//
stock IsHelicopter(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 417|| pveh == 425 || pveh == 447 || pveh == 469 || pveh == 487
	|| pveh == 488 || pveh == 497 || pveh == 548 || pveh == 563) {
        return true;
    }
	return false;
}
//============================================//
stock CarLights(idcar)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
	switch(VehicleInfo[idcar][vLights])
	{
		case 0:
		{
			SetVehicleParamsEx(idcar,engine,true,alarm,doors,bonnet,boot,objective);
			VehicleInfo[idcar][vLights]=1;
		}
		case 1:
		{
			SetVehicleParamsEx(idcar,engine,false,alarm,doors,bonnet,boot,objective);
			VehicleInfo[idcar][vLights]=0;
		}
	}
	return 1;
}
//============================================//
stock SendFactionMessage(factionid,color,string[])
{
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "Member") == factionid && GetPVarInt(i, "TogF") == 0)
        {
            SendClientMessage(i,color,string);
        }
    }
    return 1;
}
//============================================//
stock SendATFMessage(color,string[])
{
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "Member") == 8 && GetPVarInt(i, "TogF") == 0 && IsACop(i))
        {
            SendClientMessage(i,color,string);
        }
    }
    return 1;
}
//============================================//
stock MaxRank(id)
{
	new amount = 0;
	for(new i=1; i < 25; i++)
	{
		if(strlen(FactionRank[id][i]) >= 2)
		{
			amount++;
		}
	}
	return amount;
}
//============================================//
static CheckSpeed(playerid)
{
    new Keys,ud,lr;
    GetPlayerKeys(playerid,Keys,ud,lr);

    if(ud == KEY_UP && lr != KEY_LEFT && lr != KEY_RIGHT)
    {
        new Float:Velocity[3];
        GetPlayerVelocity(playerid, Velocity[0], Velocity[1], Velocity[2]);
        Velocity[0] = floatsqroot( (Velocity[0]*Velocity[0])+(Velocity[1]*Velocity[1])+(Velocity[2]*Velocity[2]));
        if(Velocity[0] >= 0.11 && Velocity[0] <= 0.13) return 1;
    }
    return 0;
}
//============================================//
stock PayLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "RPData/logs/pay.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock WepLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "RPData/logs/weapon.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock StatLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "RPData/logs/stat.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock MoneyLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "RPData/logs/money.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock ImpoundLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "RPData/logs/impound.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock BanLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "RPData/logs/bans.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock ItemLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "RPData/logs/itemspawn.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock SafeLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "RPData/logs/safes.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock NameLog(string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s\n",day, mtext, hour, minuite, second, string);
	format(readfile, sizeof(readfile), "RPData/logs/nc.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock CMDLog(name[],string[])
{
    new mtext[20],year, month,day,hour,minuite,second,entry[128],readfile[128];
	getdate(year, month, day);
	switch(month)
	{
		case 1: mtext = "January";
		case 2: mtext = "February";
		case 3: mtext = "March";
		case 4: mtext = "April";
		case 5: mtext = "May";
		case 6: mtext = "June";
		case 7: mtext = "July";
		case 8: mtext = "August";
		case 9: mtext = "September";
		case 10: mtext = "October";
		case 11: mtext = "November";
	    case 12: mtext = "December";
	}
	gettime(hour,minuite,second);
	FixHour(hour);
	format(entry, sizeof(entry), "[%d %s %d:%d:%d] %s: %s\n",day, mtext, hour, minuite, second, name, string);
	format(readfile, sizeof(readfile), "RPData/logs/command/CommandLog_%s_%d.log", mtext,day);
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//============================================//
stock AdminName(playerid)
{
	new name[MAX_PLAYER_NAME];
    if(strcmp(oocname[playerid], "None", true) == 0 || strlen(oocname[playerid]) < 3) {
		format(name, sizeof(name), "%s", PlayerName(playerid));
    }
    else format(name, sizeof(name), "%s", oocname[playerid]);
	return name;
}
//============================================//
forward CloseTrunk(vehicleid);
public CloseTrunk(vehicleid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,false,objective);
	return 1;
}
//============================================//
stock GetVehicleType(vehicleid)
{
	new m = GetVehicleModel(vehicleid);
	if(m == 592|| m == 577|| m == 511|| m == 512|| m == 593|| m == 520|| m == 553|| m == 476|| m == 519|| m == 460|| m == 513) return Model_Plane;
	else if(m == 548|| m == 425|| m == 417|| m == 487|| m == 488|| m == 497|| m == 563|| m == 447|| m == 469) return Model_Heli;
	else if(m == 472|| m == 473|| m == 493|| m == 595|| m == 484|| m == 430|| m == 453|| m == 452|| m == 446|| m == 454) return Model_Boat;
	else if(m == 509|| m == 481|| m == 510) return Model_Bicycle;
	else if(m == 462|| m == 448|| m == 581|| m == 522|| m == 461|| m == 521|| m == 523|| m == 463|| m == 586|| m == 468|| m == 471) return Model_Bike;
	else if(m == 406|| m == 435|| m == 411|| m == 449|| m == 450|| m == 464|| m == 465|| m == 501|| m == 537|| m == 538|| m == 539|| m == 564|| m == 569|| m == 570|| m == 584|| m == 590|| m == 591|| m == 594|| m == 606|| m == 607|| m == 608|| m == 610|| m == 611) return Model_Unique;
	else return Model_Car;
}
//============================================//
stock IsVehicleSUV(vehicleid)
{
	new m = GetVehicleModel(vehicleid);
	if(m == 579||m == 400||m == 500||m == 470||m == 489||m == 505||m == 495||m == 499||m == 422||m == 482||m == 414||m == 413||m == 543||m == 478||m == 554||m == 600) return true;
	else return false;
}
//============================================//
stock CreateEMSVehicle(playerid,modelid,color1,color2)
{
    new carid;
    carid = AddStaticVehicleEx(modelid,1139.5979,-1324.8148,13.4798,1.3631,color1,color2,-1);
    SetVehicleNumberPlate(carid,"LSFD");
    Iter_Add(Vehicle, carid);
    CopInfo[carid][Created]=1;
    VehicleInfo[carid][vType] = VEHICLE_LSFD;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;

	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,255);
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
	switch(modelid)
	{
		case 497, 563:
		{
		    SetVehiclePosEx(carid, 1159.7671,-1374.0272,26.7559);
		    SetVehicleZAngle(carid, 0.9677);
		}
	}
    return SendClientMessage(playerid,COLOR_LIGHTBLUE,"Vehicle Created remember to /despawngovcar.");
}
//============================================//
stock CreateRLSVehicle(playerid)
{
    new carid;
    carid = AddStaticVehicleEx(459,853.9370,-1380.9442,13.4033,179.8037,0,0,-1);
    SetVehicleNumberPlate(carid,"RLS");
    Iter_Add(Vehicle, carid);
    CopInfo[carid][Created]=1;
    VehicleInfo[carid][vType] = VEHICLE_RLS;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;

	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,255);
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
    return SendClientMessage(playerid,COLOR_LIGHTBLUE,"Vehicle Created remember to /despawngovcar.");
}
//============================================//
stock CreateNewsVehicle(playerid)
{
    new carid;
    carid = AddStaticVehicleEx(582,1814.2765,-1277.3834,13.7223,5.1730,125,125,-1);
    SetVehicleNumberPlate(carid,"NEWS");
    Iter_Add(Vehicle, carid);
    CopInfo[carid][Created]=1;
    VehicleInfo[carid][vType] = VEHICLE_SAN;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;

	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,255);
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
    return SendClientMessage(playerid,COLOR_LIGHTBLUE,"Vehicle Created remember to /despawngovcar.");
}
//============================================//
stock CreateTowTruck(playerid)
{
    new carid = AddStaticVehicleEx(525,1624.1553,-1895.4930,13.4255,267.3672,125,125,-1);
    SetVehicleNumberPlate(carid, "RR");
    Iter_Add(Vehicle, carid);
    CopInfo[carid][Created]=1;
    VehicleInfo[carid][vType] = VEHICLE_RAPID;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;

	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid, "CarType");
	SetVehicleVirtualWorld(carid, 255);
	SetVehicleVirtualWorld(carid, 0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
    return SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vehicle Created remember to /despawntowtruck.");
}
//============================================//
stock CreateGovVehicle(playerid,modelid,color1,color2)
{
    new carid;
    carid = AddStaticVehicleEx(modelid,1463.0500,-1840.4990,13.4200,91.3614,color1,color2,-1);
	if(GetPVarInt(playerid, "Member") == 8 && IsACop(playerid)) {
		new rand = 1000 + random(99999999);
		new plate[VEHICLE_PLATE_MAX_LENGTH];
		format(plate, VEHICLE_PLATE_MAX_LENGTH, "%i", rand);
		SetVehicleNumberPlate(carid,plate);
	} else SetVehicleNumberPlate(carid,"GOVERN");
    Iter_Add(Vehicle, carid);
    CopInfo[carid][Created]=1;
    VehicleInfo[carid][vType] = VEHICLE_GOV;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;

	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,255);
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
    return SendClientMessage(playerid,COLOR_LIGHTBLUE,"Vehicle Created remember to /despawngovcar.");
}
//============================================//
stock CreateLSPDVehicle(playerid,modelid,color1,color2,plate[])
{
    new carid;
    carid = AddStaticVehicleEx(modelid,1569.3889,-1701.2551,5.8906,181.5051,color1,color2,-1,1);
    SetVehicleNumberPlate(carid,plate);
    Iter_Add(Vehicle, carid);
    CopInfo[carid][Created]=1;
    VehicleInfo[carid][vType] = VEHICLE_LSPD;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;

	strmid(CopInfo[carid][Owner], PlayerInfo[playerid][pUsername], 0, strlen(PlayerInfo[playerid][pUsername]), 255);
	DeletePVar(playerid,"CarType");
	SetVehicleVirtualWorld(carid,255);
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
	switch(modelid)
	{
	    case 427: SetVehicleHealth(carid, 9999.0);
	    case 430:
	    {
	        SetVehiclePosEx(carid, 2719.8423, -2303.6052, -0.4827);
		    SetVehicleZAngle(carid, 90.8563);
	    }
	    case 490: SetVehicleHealth(carid, 1250.0);
		case 497:
		{
		    SetVehiclePosEx(carid, 1564.9601,-1654.4288,28.5723);
		    SetVehicleZAngle(carid, 90.8563);
		}
	}
    return SendClientMessage(playerid,COLOR_LIGHTBLUE,"Vehicle Created remember to /despawncopcar.");
}
//============================================//
stock CreateTheftVehicle(Float:x, Float:y, Float:z, Float:r)
{
    new carid = AddStaticVehicleEx(403,x,y,z,r,205,205,-1);
    SetVehicleNumberPlate(carid,"THEFT");
    Iter_Add(Vehicle, carid);
    VehicleInfo[carid][vType] = VEHICLE_THEFT;
    VehicleInfo[carid][Panel] = 0.0;
	VehicleInfo[carid][Doors] = 0.0;
	VehicleInfo[carid][vFuel] = 100;
	VehicleInfo[carid][vID] = 0;

	SetVehicleVirtualWorld(carid,255);
	SetVehicleVirtualWorld(carid,0);
	VehicleInfo[carid][vFuel]=100;
	VehicleInfo[carid][vWindows]=0;
	VehicleInfo[carid][vEngine]=0;
	VehicleInfo[carid][vLock] = 0;
	SetVehicleHealth(carid, 1250.0);
    return carid;
}
//============================================//
stock DonateCars(id)
{

	//if(id == 522 && GetPVarInt(playerid, "ConnectTime") >= 1000) return true;
	if(id == 400 || id == 401 || id == 402 || id == 403
	|| id == 404 || id == 405 || id == 409 || id == 410
	|| id == 411 || id == 412 || id == 415 || id == 418
	|| id == 419 || id == 421 || id == 422 || id == 424
	|| id == 426 || id == 429 || id == 434 || id == 436
	|| id == 439 || id == 442 || id == 445 || id == 446
	|| id == 451 || id == 452 || id == 453 || id == 454
	|| id == 458 || id == 461 || id == 462 || id == 463
	|| id == 467 || id == 468 || id == 470 || id == 471
	|| id == 473 || id == 474 || id == 475 || id == 477
	|| id == 479 || id == 480 || id == 481 || id == 482
	|| id == 483 || id == 489 || id == 492 || id == 493
	|| id == 494 || id == 495 || id == 496 || id == 498 || id == 500
	|| id == 504 || id == 506 || id == 507 || id == 508 || id == 509
	|| id == 510 || id == 514 || id == 517 || id == 518
	|| id == 521 || id == 525 || id == 533 || id == 534
	|| id == 535 || id == 536 || id == 540 || id == 541
	|| id == 543 || id == 545 || id == 550 || id == 551
	|| id == 554 || id == 555 || id == 558 || id == 559
	|| id == 560 || id == 561 || id == 562 || id == 565
	|| id == 566 || id == 567 || id == 571 || id == 572
	|| id == 575 || id == 576 || id == 579 || id == 580
	|| id == 581 || id == 586 || id == 587 || id == 589
	|| id == 600 || id == 602 || id == 603)
	{
	    return true;
	}
	return false;
}
//============================================//
forward ClosePDGarage(id);
public ClosePDGarage(id)
{
	switch(id)
	{
	    case 1:
	    {
	        MoveDynamicObject(PDdoor, 1587.95, -1638.22, 14.93, 10.0);
	        PDdoorO = 0;
	        PlaySoundInArea(1153, 1587.95, -1638.22, 14.93, 20.0);
	    }
	    case 2:
	    {
	        SetDynamicObjectRot(PDdoor2, 358.0, 90.0, 90.0);
		    PDdoor2O = 0;
	    }
	}
	return 1;
}
//============================================//
stock PlaySoundInArea(soundid,Float:x,Float:y,Float:z,Float:radi)
{
    foreach(new i : Player)
	{
        if(GetPVarInt(i, "PlayerLogged") == 1)
	    {
	        if(IsPlayerInRangeOfPoint(i,radi,x,y,z))
	        {
                PlayerPlaySound(i, soundid, x, y, z);
	        }
	    }
	}
	return 1;
}
//============================================//
stock PlaySoundPlyRadius(playerid, soundid, Float:radi)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    PlayerPlaySound(playerid, soundid, 0.0, 0.0, 0.0);
    foreach(new i : Player)
	{
        if(GetPVarInt(i, "PlayerLogged") == 1)
	    {
	        if(IsPlayerInRangeOfPoint(i,radi,x,y,z))
	        {
				if(i != playerid)
				{
                    PlayerPlaySound(i, soundid, x, y, z);
                }
	        }
	    }
	}
	return 1;
}
//============================================//
public OnPaintSpray(playerid)
{
	new carid = GetPlayerVehicleID(playerid);
    PlayerPlaySound(playerid,1134, 0.0, 0.0, 0.0);
	SetVehiclePosEx(GetPlayerVehicleID(playerid),PaintSprays[GetPVarInt(playerid, "PaintID")][0],PaintSprays[GetPVarInt(playerid, "PaintID")][1],PaintSprays[GetPVarInt(playerid, "PaintID")][2]);
	SetVehicleZAngle(GetPlayerVehicleID(playerid),PaintSprays[GetPVarInt(playerid, "PaintID")][7]);
	foreach(new i : Player)
	{
	    if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == carid)
	    {
	        SetPlayerVirtualWorld(i,0);
	    }
	}
	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
	TogglePlayerControllableEx(playerid,true);
	SetPVarInt(playerid, "PaintID", 0);
	SendClientMessage(playerid,COLOR_WHITE,"Vehicle repaired.");
	RepairVehicle(GetPlayerVehicleID(playerid));
	DeletePVar(playerid,"ColorUse");
	return 1;
}
//============================================//
public OnRconLoginAttempt(ip[], password[], success)
{
    if(!success)
    {
        new pip[16];
        for(new i=0, j=GetPlayerPoolSize(); i<j; i++)
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true))
            {
                if(GetPVarInt(i, "Admin") <= 9)
                {
                    if(GetPVarInt(i, "BeingBanned") != 0) return true;
					new string[128];
                    format(string, sizeof(string), "AdmCmd: %s was banned by Anticheat Reason:[Invalid RCON Login].", PlayerName(i));
		            SendClientMessageToAll(COLOR_LIGHTRED, string);
                    BanPlayer(i,"INVALID-RCON-LOGIN", "Anticheat");
                }
            }
        }
    }
    return 1;
}
//============================================//
public OnVehicleMod(playerid, vehicleid, componentid)
{
	new string[128], modok = islegalcarmod(GetVehicleModel(vehicleid), componentid);
	if (!modok)
	{
	    RemoveVehicleComponent(vehicleid, componentid);
        if(GetPVarInt(playerid,"Admin") != 0) return true;
        if(GetPVarInt(playerid, "BeingBanned") != 0) return true;
        format(string, sizeof(string), "AdmCmd: %s was banned by Anticheat Reason:[Vehicle Mod Hacks].", PlayerName(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, string);
        BanPlayer(playerid,"Vehicle Mod Hacks", "Anticheat");
        RemoveVehicleComponent(vehicleid, componentid);
        return 0;
    }
    if(IsNotAEngineCar(vehicleid) || IsHelmetCar(vehicleid) || VehicleInfo[vehicleid][vType] != VEHICLE_PERSONAL)
    {
		if(GetPVarInt(playerid,"Admin") != 0) return true;
		if(GetPVarInt(playerid, "BeingBanned") != 0) return true;
		RemoveVehicleComponent(vehicleid, componentid);
		format(string, sizeof(string), "AdmCmd: %s was banned by Anticheat Reason:[Vehicle Mod Hacks].", PlayerName(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, string);
	    BanPlayer(playerid,"Vehicle Mod Hacks", "Anticheat");
        RemoveVehicleComponent(vehicleid, componentid);
	}
    CallRemoteFunction("VMC_OnVehicleMod","iii", playerid, vehicleid, componentid);
    return true;
}
//============================================//
stock iswheelmodel(modelid)
{
    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
    for (new I = 0; I != sizeof (wheelmodels); ++I)
	{
        if (modelid == wheelmodels[I])
        {
            return true;
        }
    }
    return false;
}
//============================================//
stock IllegalCarNitroIde(carmodel)
{
    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
    for (new I = 0; I != sizeof (illegalvehs); ++I)
	{
        if (carmodel == illegalvehs[I])
        {
		    return true;
		}
    }
    return false;
}
//============================================//
stock illegal_nos_vehicle(PlayerID)
{
    new carid = GetPlayerVehicleID(PlayerID), playercarmodel = GetVehicleModel(carid);
    return IllegalCarNitroIde(playercarmodel);
}
//============================================//
stock islegalcarmod(vehicleide, componentid)
{
    new modok = false;
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010)))
	{
        new nosblocker = IllegalCarNitroIde(vehicleide);
        if (!nosblocker) modok = true;
    }
	else
	{
        for (new I = 0; I != sizeof (legalmods); ++I)
		{
            if (legalmods[I][0] == vehicleide)
			{
                for(new J = 1; J < 22; J++)
				{
                    if (legalmods[I][J] == componentid)
                    {
					    modok = true;
					}
                }
            }
        }
    }
    return modok;
}
//============================================//
public VMC_OnVehicleMod(playerid, vehicleid, componentid)
{
	if(VMC_mod[1][playerid]) VMC_mod[1][playerid] = false;
	else
	{
		new bool:b = false;
		if(!VMC_mod[0][playerid]) b = true;
		else
		{
			if(lastcomp[playerid] == -1) lastcomp[playerid] = GetTickCount();
			else
			{
				new x = (GetTickCount() - lastcomp[playerid]);
				if(x <= 500)
				{
					if(x <= 100) b = true;
					else
					{
						warns[playerid]++;
						if(warns[playerid] >= 5) b = true;
					}
				}
				else if(warns[playerid] > 0) warns[playerid]--;
			}
		}
		if(b)
		{
		    if(GetPVarInt(playerid,"Admin") != 0) return true;
		    if(GetPVarInt(playerid, "BeingBanned") != 0) return true;
		    RemoveVehicleComponent(vehicleid, componentid);
		    new string[128];
		    format(string, sizeof(string), "AdmCmd: %s was banned by Anticheat Reason:[Vehicle Mod Hacks].", PlayerName(playerid));
		    SendClientMessageToAll(COLOR_LIGHTRED, string);
			BanPlayer(playerid,"Vehicle Mod Hacks", "Anticheat");
			RemoveVehicleComponent(vehicleid,componentid);
			return true;
		}
	}
	return false;
}
//============================================//
stock VMC_AddVehicleComponent(vehicleid, componentid, playerid = -1)
{
	if(playerid == 501) return AddVehicleComponent(vehicleid,componentid);
	if(playerid == -1) for(new i = 0, j = GetPlayerPoolSize(); i < j && playerid == -1; i++) if(IsPlayerConnected(i) && IsPlayerInVehicle(i,vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER) playerid = i;
	if(playerid != -1) VMC_mod[1][playerid] = true;
	return AddVehicleComponent(vehicleid,componentid);
}
//============================================//
stock ResetScriptWiseWeapon(playerid)
{
	PlayerInfo[playerid][pPlayerWeapon]=0, PlayerInfo[playerid][pPlayerAmmo]=0, PlayerInfo[playerid][pAmmoType]=0, PlayerInfo[playerid][pSerial]=0;
	RemovePlayerAttachedObject(playerid, 9);
	SetPVarInt(playerid, "JustChosen", 0);
	CallRemoteFunction("LoadHolsters","i",playerid);
    return 1;
}
//============================================//
public PrintSpeedo(playerid, Float:speed)
{
	new ftext[128], stext[128], sspeed = floatround(speed);
	switch(sspeed)
	{
	    case 100 .. 5000: format(stext, 50, "  ~w~%d", sspeed);
	    case 10 .. 99: format(stext, 50, "   ~w~%d", sspeed);
	    case 0 .. 9: format(stext, 50, "    ~w~%d", sspeed);
	}
	TextDrawSetString(Text:VehicleIDraw[0][playerid], stext);
	switch(VehicleInfo[GetPlayerVehicleID(playerid)][vFuel])
	{
	    case 100 .. 200: ftext="~w~IIIIIIIIII";
	    case 90 .. 99: ftext="~w~IIIIIIIII~r~I";
	    case 80 .. 89: ftext="~w~IIIIIIII~r~II";
	    case 70 .. 79: ftext="~w~IIIIIII~r~III";
	    case 60 .. 69: ftext="~w~IIIIII~r~IIII";
	    case 50 .. 59: ftext="~w~IIIII~r~IIIII";
	    case 40 .. 49: ftext="~w~III~r~IIIIIII";
	    case 30 .. 39: ftext="~w~II~r~IIIIIIII";
	    case 10 .. 29: ftext="~w~I~r~IIIIIIIII";
	    case 0 .. 9: ftext="~r~IIIIIIIIII";
	}
	TextDrawSetString(Text:VehicleIDraw[1][playerid], ftext);
	return true;
}
//============================================//
stock CellphoneState(playerid,toggle)
{
	switch(toggle)
	{
	    case 1:
	    {
	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	        if(GetPVarInt(playerid, "CellCol") == 0) SetPlayerAttachedObject(playerid, 7, 18868, 6, 0.089411, 0.020775, -0.016320, 279.668365, 359.140991, 169.287139, 1.0, 1.0, 1.0);
	        else SetPlayerAttachedObject(playerid, 7, GetPVarInt(playerid, "CellCol"), 6, 0.089411, 0.020775, -0.016320, 279.668365, 359.140991, 169.287139, 1.0, 1.0, 1.0);
	    }
	    case 2:
	    {
	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
            RemovePlayerAttachedObject(playerid, 7);
	    }
	}
	return true;
}
//============================================//
stock SendJobMessage(factionid,color,string[])
{
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "Job") == factionid && GetPVarInt(i, "OnRoute") != 0)
        {
            SendClientMessage(i,color,string);
        }
    }
    return 1;
}
//============================================//
stock SendJobMessageEx(factionid,color,string[])
{
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "Job") == factionid)
        {
            SendClientMessage(i,color,string);
        }
    }
    return 1;
}
//============================================//
stock SendPhoneMessage(playerid) return PlayAudioStreamForPlayerEx(playerid, "http://translate.google.com/translate_tts?tl=0&q=The number you dialed is currently un-available"), SendClientMessage(playerid, COLOR_LIGHTRED, "*BEEP* The number you dialed is currently un-available *BEEP*");
//============================================//
stock ResetPlayerWeaponsEx(playerid)
{
    SetPVarInt(playerid, "GUNHCKWARN", 0);
	ResetPlayerWeapons(playerid);
    ResetScriptWiseWeapon(playerid);
    if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
    CallRemoteFunction("LoadHolsters","i",playerid);
	return true;
}
//============================================//
stock SetPlayerArmourEx(playerid, Float:armour)
{
	SkipArmourHack(playerid);
	PlayerInfo[playerid][pArmour] = armour;
	SetPlayerArmour(playerid, armour);
	return true;
}

stock SkipArmourHack(playerid) {
	PlayerInfo[playerid][pAHSkip] = 1;
	SetTimerEx("SkipArmourHackT", 1000, false, "i", playerid);
	return true;
}

forward SkipArmourHackT(playerid);
public SkipArmourHackT(playerid) {
	PlayerInfo[playerid][pAHSkip] = 0;
	return 1;
}
//============================================//
forward SmsNumber(playerid, pnumber[]);
public SmsNumber(playerid, pnumber[])
{
	new string[255], giveplayer[25], sendername[25];
    if(!strlen(pnumber))
    {
        ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
		return 1;
    }
    if(strlen(pnumber) >= 125)
    {
	    SendClientMessage(playerid, COLOR_WHITE, "Number is too long (125 Chars max).");
	    ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
	    return 1;
	}
	new found = 0;
    foreach(new i : Player)
	{
		if(GetPVarInt(i, "PlayerLogged") == 1 && i != playerid)
		{
			found++;
		    format(string, 128, "%d", GetPVarInt(i, "PhoneNum"));
			if(strcmp(string, PlayerInfo[playerid][pCellname], true) == 0)
			{
			    if (!CheckInvItem(i , 405))return SendClientMessage(playerid, COLOR_GREY, "Player doesn't have a cellphone."), ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
			    if (GetPVarInt(i, "TogPhone") == 1) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
				if (GetPVarInt(i, "Cuffed") > 0) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
				if (GetPVarInt(i, "Dead") > 0) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
				if(GetPVarInt(i, "Jailed") > 0) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
				if(IsPlayerInWater(i)) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
    			if(GetPVarInt(i, "PlayerSpectate") != 0) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
		        SendClientMessage(playerid, COLOR_WHITE, "Text message delivered.");
    		    format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(i));
    		    GiveNameSpace(giveplayer);
    		    format(sendername, sizeof(sendername), "%d", GetPVarInt(playerid, "PhoneNum"));
    		    new number[50];
				format(number, sizeof(number), "%d", GetPVarInt(playerid, "PhoneNum"));
   		        if(GetPVarInt(playerid, "HidePhone") == 1) sendername = "Unknown";
   		        new contactname[40], contactnumber[40], cname[50], foundi = 0;
               	for(new d = 1; d < 11; d++) {
					format(contactname, sizeof(contactname), "ContactName%d", d);
					format(contactnumber, sizeof(contactnumber), "ContactNumber%d", d);
					GetPVarString(i, contactname, cname, 50);
					if(strlen(cname) < 2) format(cname, sizeof(cname), "N/A");
					if(GetPVarInt(i, contactnumber) == GetPVarInt(playerid, "PhoneNum")) {
						foundi++;
						break;
					}
				}
    	        if(foundi == 0) format(string, sizeof(string), "TXT: %s, Sender: '%s'.", pnumber, sendername);
    	        else format(string, sizeof(string), "TXT: %s, Sender: '%s'.", pnumber, cname);
		        SendClientMessage(i, COLOR_YELLOW, string);
		        SendClientMessage(playerid, COLOR_YELLOW, string);
    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    	        PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
    	        format(string, sizeof(string), "*** %s's phone beeps.", giveplayer);
		        ProxDetector(30.0, i, string, COLOR_PURPLE);
    	        CellphoneState(playerid,2);
    	        DeletePVar(playerid, "CellMenu");
    	        foreach(new i2 : Player)
    	        {
        	        if(GetPVarInt(i2, "Mobile") == playerid)
        	        {
            	        SetPVarInt(i2, "RingTone", 0);
            	        SetPVarInt(i2, "RingPhone", 0);
           	            SetPVarInt(i2, "Mobile", INVALID_MAXPL); // Disable the phone call.
						cancelPayphone(i2);
            	        if(GetPVarInt(i2, "CellMenu") == 0)
            	        {
						    CellphoneState(i2,2);
						}
        	        }
    	        }
			    return true;
			}
		}
	}
	if(found == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "Could not find anyone with that number.");
		ShowPlayerDialog(playerid,40,DIALOG_STYLE_INPUT,"Texting","Enter the number you would like to text.","Enter", "Go Back");
	}
	return 1;
}
//============================================//
forward CallNumber(playerid, pnumber[]);
public CallNumber(playerid, pnumber[])
{
	new payphone=0;
	if(GetPVarInt(playerid, "usingPayphone") >= 0) payphone=1;
	new sendername[25], string[516];
	format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
    GiveNameSpace(sendername);
    if(!strlen(pnumber))
    {
        ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
		return 1;
    }
    if(strlen(pnumber) >= 15)
    {
	    SendClientMessage(playerid, COLOR_WHITE, "Number is too long (15 Chars max).");
	    ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
	    return 1;
	}
	new found = 0;
	if(strcmp(pnumber, "911", true) == 0)
	{
	    if(GetPVarInt(playerid, "CmdDelay") > GetCount()) {
			cancelPayphone(playerid);
			return SendClientMessage(playerid,COLOR_GREY,"You must wait atleast a minute before calling this service again.");
		}
	    SetPVarInt(playerid, "Mobile", 911);
	    SendClientMessage(playerid,COLOR_BLUE,"DISPATCH: Which service do you require Police or LSFD?");
	    SetPVarInt(playerid, "CmdDelay", GetCount()+60000);
	    return true;
	}
	if(strcmp(pnumber, "411", true) == 0)
	{
	    if(GetPVarInt(playerid, "CmdDelay") > GetCount()) {
			cancelPayphone(playerid);
			return SendClientMessage(playerid,COLOR_GREY,"You must wait atleast a minute before calling this service again.");
		}
	    SendClientMessage(playerid,COLOR_WHITE,"You informed any Taxi Drivers online with your location.");
	    TaxiCall = playerid;
	    format(string, sizeof(string), "%s is requesting a taxi (/accept taxi), Location:[%s].", sendername, CheckSex(playerid), GetPlayerArea(playerid));
	    SendJobMessage(5,COLOR_WHITE,string);
	    SetPVarInt(playerid, "CmdDelay", GetCount()+60000);
	    DeletePVar(playerid, "CellMenu");
		cancelPayphone(playerid);
    	foreach(new i2 : Player)
    	{
            if(GetPVarInt(i2, "Mobile") == playerid)
        	{
                SetPVarInt(i2, "RingTone", 0);
            	SetPVarInt(i2, "RingPhone", 0);
           	    SetPVarInt(i2, "Mobile", INVALID_MAXPL); // Disable the phone call.
				cancelPayphone(i2);
            	if(GetPVarInt(i2, "CellMenu") == 0)
            	{
				    CellphoneState(i2,2);
				}
            }
    	}
	    return true;
	}
	if(strcmp(pnumber, "311", true) == 0)
	{
	    if(GetPVarInt(playerid, "CmdDelay") > GetCount()) {
			cancelPayphone(playerid);
			return SendClientMessage(playerid,COLOR_GREY,"You must wait atleast a minute before calling this service again.");
		}
	    SendClientMessage(playerid,COLOR_WHITE,"You informed any Mechanics online with your location.");
	    MechCall = playerid;
	    format(string, sizeof(string), "%s is requesting a mechanic (/accept mech), Location:[%s].", sendername,CheckSex(playerid), GetPlayerArea(playerid));
	    SendJobMessage(1,COLOR_WHITE,string);
	    SetPVarInt(playerid, "CmdDelay", GetCount()+60000);
	    DeletePVar(playerid, "CellMenu");
		cancelPayphone(playerid);
    	foreach(new i2 : Player)
    	{
            if(GetPVarInt(i2, "Mobile") == playerid)
        	{
                SetPVarInt(i2, "RingTone", 0);
            	SetPVarInt(i2, "RingPhone", 0);
           	    SetPVarInt(i2, "Mobile", INVALID_MAXPL); // Disable the phone call.
				cancelPayphone(i2);
            	if(GetPVarInt(i2, "CellMenu") == 0)
            	{
				    CellphoneState(i2,2);
				}
            }
    	}
	    return true;
	}
	foreach(new i : Player)
	{
		if(GetPVarInt(i, "PlayerLogged") == 1 && i != playerid)
		{
			format(string, 128, "%d", GetPVarInt(i, "PhoneNum"));
			if(strcmp(string, pnumber, true) == 0)
			{
    			if (!CheckInvItem(i , 405))return SendClientMessage(playerid, COLOR_GREY, "Player doesn't have a cellphone."), ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
    			if (i == playerid) {
					cancelPayphone(playerid);
					return SendClientMessage(playerid, COLOR_GREY, "Can't call yourself."), ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				}
				if (GetPVarInt(i, "Mobile") != INVALID_MAXPL)
				{
	    			format(string, sizeof(string), "Missed call: %d.", PrintPhoneNum(playerid, payphone));
	    			SendClientMessage(i, COLOR_LIGHTBLUE, string);
	    			format(string, sizeof(string), "http://translate.google.com/translate_tts?tl=0&q=Missed call %d", PrintPhoneNum(playerid, payphone));
	    			PlayAudioStreamForPlayerEx(i, string);
	    			SendPhoneMessage(playerid);
	    			ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
	    			return true;
				}
				if (GetPVarInt(i, "TogPhone") == 1) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				if (GetPVarInt(i, "Cuffed") > 0) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				if (GetPVarInt(i, "Dead") > 0) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				if(GetPVarInt(i, "Jailed") > 0) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				if(IsPlayerInWater(i)) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
    			if(GetPVarInt(i, "PlayerSpectate") != 0) return SendPhoneMessage(playerid), ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
				found = 1;
				format(string, sizeof(string),"Calling %d.", GetPVarInt(i, "PhoneNum"));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPVarInt(playerid, "Mobile", i);
				SetPVarInt(i, "RingTone", 1);
				format(sendername, sizeof(sendername), "%d", PrintPhoneNum(playerid, payphone));
				if(GetPVarInt(playerid, "HidePhone") == 1) sendername = "Unknown";
				new contactname[40], contactnumber[40], cname[50], foundi = 0;
				if(payphone == 0) {
					for(new d = 1; d < 11; d++)
					{
						format(contactname, sizeof(contactname), "ContactName%d", d);
						format(contactnumber, sizeof(contactnumber), "ContactNumber%d", d);
						GetPVarString(i, contactname, cname, 50);
						if(strlen(cname) < 2) format(cname, sizeof(cname), "N/A");
						if(GetPVarInt(i, contactnumber) == GetPVarInt(playerid, "PhoneNum"))
						{
							foundi++;
							break;
						}
					}
				}
				if(foundi == 0) format(string, sizeof(string), "Your mobile is ringing (/cellphone) - Caller: '%s'.", PrintPhoneNum(playerid, payphone));
				else format(string, sizeof(string), "Your mobile is ringing (/cellphone) - Caller: '%s'.", cname);
				SendClientMessage(i, COLOR_YELLOW, string);
				SetPVarInt(playerid, "RingPhone", 1);
				DeletePVar(playerid, "CellMenu");
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
			}
		}
	}
	if(found == 0) SendClientMessage(playerid, COLOR_GREY, "Could not find anyone with that number."), ShowPlayerDialog(playerid,39,DIALOG_STYLE_INPUT,"Calling","Enter the number you would like to call.","Call", "Go Back");
	return 1;
}
//============================================//
stock PlayRadioURL(vehicleid, url[], rls=0) 
{
	format(VehicleInfo[vehicleid][vRadio], VEHICLE_RADIO_URL_MAX_LENGTH, "%s", url);
	VehicleInfo[vehicleid][vOnRLS] = rls;
	foreach(new i : Player) {
		if(GetPlayerVehicleID(i) == vehicleid || PlayerInfo[i][pInVehicle] == vehicleid) {
			PlayAudioStreamForPlayerEx(i, url);
		}
	}
	return true;
}
//============================================//
stock PlayBizzRadio(id, url[], rls=0) 
{
	format(BizInfo[id][bRadio], 129, "%s", url);
	BizInfo[id][bOnRLS] = rls;
	foreach(new i : Player) {
	    if(GetPVarInt(i, "BizzEnter") == id) {
		    PlayAudioStreamForPlayerEx(i, url);
	    }
	}
	return true;
}
//============================================//
stock PlayHouseRadio(id, url[], rls=0)
{
	format(HouseInfo[id][hRadioU], 129, "%s", url);
	HouseInfo[id][hOnRLS] = rls;
	foreach(new i : Player) {
	    if(GetPVarInt(i, "HouseEnter") == id) {
		    PlayAudioStreamForPlayerEx(i, url);
	    }
	}
	return true;
}
//============================================//
stock SetPlayerToFacePlayer(playerid, targetid)
{
    new Float:pX,Float:pY,Float:pZ, Float:X,Float:Y,Float:Z, Float:ang;
    if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;
    GetPlayerPos(targetid, X, Y, Z);
    GetPlayerPos(playerid, pX, pY, pZ);
    if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
    else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
    else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
    if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
    else ang = (floatabs(ang) - 180.0);
    return SetPlayerFacingAngle(playerid, ang);
}
//============================================//
stock PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
    SetPVarInt(playerid, "EnterVehicle" , GetCount()+10000); // Avoid anti-cheat punishments.
	return PutPlayerInVehicle(playerid, vehicleid, seatid);
}
//============================================//
stock UnAFK(playerid)
{
    DeletePVar(playerid, "Pos_X_1");
    DeletePVar(playerid, "Pos_Y_1");
    DeletePVar(playerid, "Pos_Z_1");
    DeletePVar(playerid, "Pos_X_2");
    DeletePVar(playerid, "Pos_Y_2");
    DeletePVar(playerid, "Pos_Z_2");
    DeletePVar(playerid, "AFK-TIME");
	return true;
}
//============================================//
stock IsPlayerFalling(playerid)
{
    new animlib[32],tmp[32], Float:speed = GetPlayerSpeed(playerid, false);
    GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, sizeof(animlib), tmp, sizeof(tmp));
    if(!strcmp(tmp, "FALL_FALL") && GetPVarInt(playerid, "Control") == 0 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !IsPlayerInAnyVehicle(playerid) && speed >= 7.0) return true;
    return false;
}
//============================================//
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(!response) return SCM(playerid, -1, "Menu cancelled.");
    if(extraid == 1) //Clothing items
    {
        SetPVarInt(playerid, "ToyModelC", modelid);
		ShowPlayerDialog(playerid, 294, DIALOG_STYLE_LIST, "Select bone", "Spine\nHead\nLeft Upper Arm\nRight Upper Arm\nLeft Hand\nRight Hand\nLeft Thigh\nRight Thigh\nLeft foot\nRight Foot\nRight Calf\nLeft Calf\nLeftForearm\nRight Forearm\nLeft Shoulder\nRight Shoulder\nNeck\nJaw", "Select","Cancel");
    }
    else if(extraid == 2) //FURNITURE
    {
        new listitem=0, found = 0;
        for(new xe;xe<sizeof(FurnObjs);xe++)
        {
            if(modelid == FurnObjs[xe])
            {
				listitem=xe;
				found++;
				break;
		    }
        }
        if(found == 0) return true;
        new objectid=FurnObjs[listitem], Float:X, Float:Y, Float:Z, obj = 0, string[128];
		GetPlayerPos(playerid, X, Y, Z);
		obj = CreatePlayerObject(playerid, objectid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", 1);
		SetPVarInt(playerid, "Mute", 1);
		PlayerInfo[playerid][pFurnID]=objectid;
		EditPlayerObject(playerid, obj);
		format(string, sizeof(string),"%d selected, use the SPRINT key to navigate.", objectid);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(extraid == 3)
    {
		SetPVarInt(playerid, "CurEditMdl", modelid);
        new key = FurnRight(playerid, 1);
	   	new count = 0;
	    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
	    {
			if(h == (MAX_HOUSE_OBJ-1)) {
				new form[128];
				for(new i = 0; i < count; i++) {
					format(form, sizeof(form), "%s\n%d", form, i);
				}
				ShowPlayerDialog(playerid, 529, DIALOG_STYLE_LIST, "Select an object - Ordered by spawn-date.", form, "Select", "Exit"); 
				break;
			}
	        if(HouseInfo[key][hObject][h] != 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
			    {
                	if(HouseInfo[key][hoID][h] == modelid)
                	{
						count++;
		        	}
			    }
	        }
	    }
    }
    else if(extraid == 4)
    {
    	if(!response) return 1;
		new i = GetLSPDSkin(modelid);
		if(i == -1) return 1;
	    new text[128];
	    format(text, sizeof(text), "LSPD: You took skin '%s'", LSPDskin[i][Name]);
	    if(GetPVarInt(playerid, "Rank") < LSPDskin[i][Rank]) return error(playerid, "You are not allowed to wear this skin.");
    	SetPlayerSkinEx(playerid, LSPDskin[i][SkinID]);
    	SCM(playerid, -1, text);
    }
    else if(extraid == 5)
    {
        if(GetPVarInt(playerid, "Cash") < 100) return SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds ($100 needed)");
        GivePlayerMoneyEx(playerid, -100);
        SetPlayerSkinEx(playerid, modelid);
		SendClientMessage(playerid, COLOR_YELLOW, "You have paid $100 to change your skin.");
    }
    else if(extraid == 6)
    {
        if(!response) return 1;
		new text[128];
		new i = GetGovSkin(modelid);
		if(i == -1) return 1;
		format(text, sizeof(text), "Government: You took skin '%s'", Govskin[i][Name]);
	    SetPlayerSkinEx(playerid, Govskin[i][SkinID]);
	    SCM(playerid, -1, text);
    }
    else if(extraid == 7)
    {
        if(!response) return 1;
		new text[128];
		new i = GetLSFDSkin(modelid);
		if(i == -1) return 1;
		format(text, sizeof(text), "LSFD: You took skin '%s'", LSFDskin[i][Name]);
	    SetPlayerSkinEx(playerid, LSFDskin[i][SkinID]);
	    SCM(playerid, -1, text);
    }
    else if(extraid == 8)
    {
        new listitem = -1;
        for(new xe;xe<sizeof(FurnObjs);xe++) {
            if(modelid == FurnObjs[xe]) {
				listitem=xe;
				break;
		    }
        }
        if(listitem == -1) return true;
        new objectid=FurnObjs[listitem], Float:X, Float:Y, Float:Z, obj = 0, string[128];
		GetPlayerPos(playerid, X, Y, Z);
		obj = CreatePlayerObject(playerid, objectid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", 3);
		SetPVarInt(playerid, "Mute", 1);
		PlayerInfo[playerid][pFurnID]=objectid;
		EditPlayerObject(playerid, obj);
		format(string, sizeof(string),"%d selected, use the SPRINT key to navigate.", objectid);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(extraid == 9)
    {
		SetPVarInt(playerid, "CurEditMdl", modelid);
        new key = FurnRight(playerid, 2);
	   	new count = 0;
	    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
	    {
			if(h == (MAX_HOUSE_OBJ-1)) {
				new form[128];
				for(new i = 0; i < count; i++) {
					format(form, sizeof(form), "%s\n%d", form, i);
				}
				ShowPlayerDialog(playerid, 530, DIALOG_STYLE_LIST, "Select an object - Ordered by spawn-date.", form, "Select", "Exit"); 
				break;
			}
	        if(BizInfo[key][bObject][h] != 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
			    {
                	if(BizInfo[key][boID][h] == modelid)
                	{
						count++;
		        	}
			    }
	        }
	    }
    }
    else if(extraid == 10)
    {
        new objectid=modelid, Float:X, Float:Y, Float:Z, obj = 0, string[128];
		GetPlayerPos(playerid, X, Y, Z);
		obj = CreatePlayerObject(playerid, objectid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "RBID", objectid);
		SetPVarInt(playerid, "EditorMode", 5);
		SetPVarInt(playerid, "Mute", 1);
		EditPlayerObject(playerid, obj);
		format(string, sizeof(string),"%d selected, use the SPRINT key to navigate.", objectid);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(extraid == 11)
    {
		SetPVarInt(playerid, "CurEditMdl", modelid);
	   	new count = 0;
	    for(new h = 0; h < MAX_MAP_OBJ; h++)
	    {
			if(h == (MAX_MAP_OBJ-1)) {
				new form[128];
				for(new i = 0; i < count; i++) {
					format(form, sizeof(form), "%s\n%d", form, i);
				}
				ShowPlayerDialog(playerid, 531, DIALOG_STYLE_LIST, "Select an object - Ordered by spawn-date.", form, "Select", "Exit"); 
				break;
			}		
	        if(MapInfo[h][mObject] != 0)
			{
				if(MapInfo[h][mID] == modelid)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.5, MapInfo[h][mX], MapInfo[h][mY], MapInfo[h][mZ]))
					{
						count++;
					}
				}
	        }
	    }
    }
    else if(extraid == 12)
    {
		SetPVarInt(playerid, "CurEditMdl", modelid);
	   	new count = 0;
	    for(new h = 0; h < MAX_MAP_OBJ; h++)
	    {
			if(h == (MAX_MAP_OBJ-1)) {
				new form[128];
				for(new i = 0; i < count; i++) {
					format(form, sizeof(form), "%s\n%d", form, i);
				}
				ShowPlayerDialog(playerid, 528, DIALOG_STYLE_LIST, "Select an object - Ordered by spawn-date.", form, "Select", "Exit"); 
				break;
			}		
	        if(MapInfo[h][mObject] != 0)
			{
				if(MapInfo[h][mID] == modelid)
				{
					count++;
				}
	        }
	    }
    }
    else if(extraid == 13) //MAP OBJECTS
    {
		new found = 0;
		for(new i = 0; i < MAX_OBJECT_ARRAY; i++) {
			if(ObjectList[i][oID] == modelid) {
				found++;
				break;
			}
		}
		if(found == 0) return error(playerid, "The model you've selected cannot be found in the object list.");
        new Float:X, Float:Y, Float:Z, string[128];
		GetPlayerPos(playerid, X, Y, Z);
		new obj = CreatePlayerObject(playerid, modelid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 200.0);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", 6);
		PlayerInfo[playerid][pFurnID]=modelid;
		Streamer_Update(playerid);
		format(string, sizeof(string),"%d selected, use the SPRINT key to navigate.", modelid);
		SendClientMessage(playerid, COLOR_WHITE, string);
		EditPlayerObject(playerid, obj);
    }
    else if(extraid == 14)
    {
		SetPVarInt(playerid, "CurEditMdl", modelid);
	   	new count = 0;
	    for(new h = 0; h < MAX_MAP_OBJ; h++)
	    {
			if(h == (MAX_MAP_OBJ-1)) {
				new form[128];
				for(new i = 0; i < count; i++) {
					format(form, sizeof(form), "%s\n%d", form, i);
				}
				ShowPlayerDialog(playerid, 532, DIALOG_STYLE_LIST, "Select an object - Ordered by spawn-date.", form, "Select", "Exit"); 
				break;
			}		
	        if(MapInfo[h][mObject] != 0)
			{
				if(MapInfo[h][mID] == modelid)
				{
					if(strmatch(MapInfo[h][mOwner],PlayerName(playerid)))
					{
						count++;
					}
				}
	        }
	    }
    }
    else if(extraid == 15)
    {
		SetPVarInt(playerid, "CurEditMdl", modelid);
        new key = FurnRight(playerid, 1);
	   	new count = 0;
	    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
	    {
			if(h == (MAX_HOUSE_OBJ-1)) {
				new form[128];
				for(new i = 0; i < count; i++) {
					format(form, sizeof(form), "%s\n%d", form, i);
				}
				ShowPlayerDialog(playerid, 537, DIALOG_STYLE_LIST, "Select an object - Ordered by spawn-date.", form, "Select", "Exit"); 
				break;
			}
	        if(HouseInfo[key][hObject][h] != 0)
			{
				if(HouseInfo[key][hoID][h] == modelid)
				{
					count++;
				}
	        }
	    }
    }
    else if(extraid == 16)
    {
		SetPVarInt(playerid, "CurEditMdl", modelid);
        new key = FurnRight(playerid, 2);
	   	new count = 0;
	    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
	    {
			if(h == (MAX_HOUSE_OBJ-1)) {
				new form[128];
				for(new i = 0; i < count; i++) {
					format(form, sizeof(form), "%s\n%d", form, i);
				}
				ShowPlayerDialog(playerid, 538, DIALOG_STYLE_LIST, "Select an object - Ordered by spawn-date.", form, "Select", "Exit"); 
				break;
			}
	        if(BizInfo[key][bObject][h] != 0)
			{
				if(BizInfo[key][boID][h] == modelid)
				{
					count++;
				}
	        }
	    }
    }
	else if(extraid == 17)
	{
		if(!IsValidObjID(modelid)) return error(playerid, "Invalid object-ID.");
		new Float:fPos[3];
		GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
		tCreateGateObjID[playerid] = CreatePlayerObject(playerid, modelid, fPos[0]+0.3, fPos[1], fPos[2], -1, -1, -1);

		tCreateGateStep[playerid] = 1;
		tCreateGateObjModel[playerid] = modelid;

		//Streamer_Update(playerid);
		EditPlayerObject(playerid, tCreateGateObjID[playerid]);
		SendClientMessage(playerid, -1, "[Gate System] Set where the gate should close.");
	}
    else if(extraid == 18) // /el edit
    {
    	new Float:x, Float:y, Float:z, Float:a;
    	GetPlayerPos(playerid, x, y, z);
    	GetVehicleZAngle(GetPlayerVehicleID(playerid), a);

    	new obj = CreatePlayerObject(playerid, modelid, x, y, z, 0.0, 0.0, a, 100.0);
    	SetPVarInt(playerid, "SirenModel", modelid);
	    SetPVarInt(playerid, "FurnObject", obj);
	    SetPVarInt(playerid, "EditorMode", 10);
	    SetPVarInt(playerid, "Mute", 1);
	    EditPlayerObject(playerid, obj);

	    CarEngine(GetPlayerVehicleID(playerid), 0);
	    SendClientMessage(playerid, COLOR_WHITE, "Navigate the object and press the save icon when done. (use 'W' to move the camera)");
    }
	else if(extraid == MODEL_SELECTION_VEHFURN_CREATE)
	{
		if(IsNeonObject(modelid)) {
			if(GetPVarInt(playerid, "MonthDon") == 0) { return SendClientMessage(playerid, COLOR_WHITE, "Only subscribers can use neon under-glow."); }	
			if(outdoor_neon_furn == 0) { return SendClientMessage(playerid, COLOR_WHITE, "Outdoor neon under-glow was temporarily disabled by an administrator."); }
			new count = 0, vehicleid = GetPVarInt(playerid, "FurnVehicleID");
			for(new slot = 0; slot < MAX_VEHICLE_OBJ; slot++) {
				if(VehicleInfo[vehicleid][voID][slot] != 0 && VehicleInfo[vehicleid][voIndoor][slot] == 0 && IsNeonObject(VehicleInfo[vehicleid][voID][slot])) {
					count++;
				}
			}
			if(count >= MAX_VEHICLE_UNDERGLOW) { return SendClientMessage(playerid, COLOR_WHITE, "You can't place any more neon under-glow outside your vehicle."); }
        }			
        new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		new obj = CreatePlayerObject(playerid, modelid, X+1.0, Y+1.0, Z, 0.0, 0.0, 0.0, 100.0);
		SetPVarInt(playerid, "FurnObject", obj);
		SetPVarInt(playerid, "EditorMode", EDITOR_MODE_VEHICLEFURN_CREATE);
		PlayerInfo[playerid][pFurnID] = modelid;
		EditPlayerObject(playerid, obj);
		new string[128];
		format(string, sizeof(string),"%d selected, use the SPRINT key to navigate.", modelid);
		SendClientMessage(playerid, COLOR_WHITE, string);	
    }	
	else if(extraid == MODEL_SELECTION_VEHFURN_EDIT)
	{
		SetPVarInt(playerid, "CurEditMdl", modelid);
	   	new count = 0, vehicleid = GetPVarInt(playerid, "FurnVehicleID");
		for(new slot = 0; slot < MAX_VEHICLE_OBJ; slot++) {
			if(slot == (MAX_VEHICLE_OBJ-1)) {
				new form[128];
				for(new i = 0; i < count; i++) {
					format(form, sizeof(form), "%s\n%d", form, i);
				}
				ShowPlayerDialog(playerid, DIALOG_VEHFURN_EDIT, DIALOG_STYLE_LIST, "Select an object - Ordered by spawn-date.", form, "Select", "Exit"); 
				break;
			}
			if(VehicleInfo[vehicleid][voID][slot] == modelid) {
				if(PlayerInfo[playerid][pInVehicle] != -1) {
					if(VehicleInfo[vehicleid][voIndoor][slot] == 1) {
						count++;
					}
				} else {
					if(outdoor_vehicle_furn == 0) { break; }
					if(VehicleInfo[vehicleid][voIndoor][slot] == 0) {
						count++;
					}
				}
			}
		}
	}
    return 1;
}
//============================================//
stock GetLSPDSkin(objectid)
{
	new found = -1;
	for(new i = 0; i < 10; i++)
	{
	    if(i != 10)
	    {
	        if(LSPDskin[i][SkinID] == objectid) found = i;
	    }
	}
	return found;
}
//============================================//
stock GetGovSkin(objectid)
{
	new found = -1;
	for(new i = 0; i < 9; i++)
	{
	    if(i != 10)
	    {
	        if(Govskin[i][SkinID] == objectid) found = i;
	    }
	}
	return found;
}
//============================================//
stock GetLSFDSkin(objectid)
{
	new found = -1;
	for(new i = 0; i < 8; i++)
	{
	    if(i != 8)
	    {
	        if(LSFDskin[i][SkinID] == objectid) found = i;
	    }
	}
	return found;
}
//============================================//
forward RetrieveMask(mask, playerid);
public RetrieveMask(mask, playerid)
{
    new fields, rows, string[128];
    cache_get_data(rows, fields);
    if(rows)
    {
		new fetch[128];
    	cache_get_field_content(0, "Name", fetch);
    	format(string, sizeof(string), "Mask ID %d = (%s)", mask, fetch);
    	SCM(playerid, -1, string);
	}
	else
	{
	    SCM(playerid, -1, "This mask ID is not in use.");
	}
	return 1;
}
//============================================//
stock LoadAdText(text[])
{
	new AdT2[8][255];
    for(new i = 0; i < 7; i++)
    {
		if(Ad[i] == 0)
		{
		    Ad[i]=1;
		    format(AdT[i], 128,"%s", text);
		    return 1;
		}
    }
    for(new i = 0; i < 7; i++) format(AdT2[i], 128,"%s", AdT[i]);
    for(new i = 1; i < 7; i++)
    {

		if(Ad[i] == 1)
		{
			format(AdT[i], 128,"%s", AdT2[i-1]);
		}
    }
    Ad[0]=1;
    format(AdT[0], 128,"%s", text);
	return 1;
}
//============================================//
stock IsValidFurniture(objectid) {
	for(new x;x<sizeof(FurnObjs);x++) {
        if(objectid == FurnObjs[x]) {
			return 1;
		}
    }
	return 0;
}
//============================================//
stock IsValidObjID(objectid) {
	for(new x;x<MAX_OBJECT_ARRAY;x++) {
        if(objectid == ObjectList[x][oID]) {
			return 1;
		}
    }
	return 0;
}
//============================================//
stock IsValidClothing(objectid)
{
	for(new x;x<sizeof(AttachmentObjects);x++)
    {
		if(objectid == AttachmentObjects[x][attachmodel])
		{
			return 1;
		}
    }
	return 0;
}
//============================================//
stock GetAttachmentName(objectid)
{
	new string[128];
	string="N/A";
	for(new x;x<sizeof(AttachmentObjects);x++)
    {
        if(objectid == AttachmentObjects[x][attachmodel])
        {
            format(string, sizeof(string), "%s", AttachmentObjects[x][attachname]);
		}
    }
	return string;
}
//============================================//
stock PlayAudioStreamForPlayerEx(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(GetPVarInt(playerid, "AudioT") == 0)
	{
	    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	    strmid(PlayerInfo[playerid][pAudioUrl], url, 0, strlen(url), 255);
	}
    return true;
}
//============================================//
stock StopAudioStreamForPlayerEx(playerid)
{
    strmid(PlayerInfo[playerid][pAudioUrl], "NULL", 0, strlen("NULL"), 255);
    StopAudioStreamForPlayer(playerid);
    return true;
}
//============================================//
stock PrintArea(playerid, type, num)
{
    new string[128];
    switch(type)
    {
        case 0: format(string, 128, "~w~%s", GetPlayerArea(playerid));
        case 1: string="Property";
        case 2: format(string, 128, "~w~%s", IntInfo[num][iName]);
        case 3: format(string, 128, "~w~%s", BizInfo[num][Name]);
        case 4: string="Interior";
    }
    return string;
}
//============================================//
stock PrintPlayerArea(playerid)
{
    new string[128];
    format(string, 128, "%s", GetPlayerArea(playerid));
    if(GetPVarInt(playerid, "HouseEnter") != 0) format(string, 128, "Property %d", GetPVarInt(playerid, "HouseEnter"));
    if(GetPVarInt(playerid, "IntEnter") != 0) format(string, 128, "%s", IntInfo[GetPVarInt(playerid, "IntEnter")][iName]);
    if(GetPVarInt(playerid, "BizzEnter") != 0) format(string, 128, "%s", BizInfo[GetPVarInt(playerid, "BizzEnter")][Name]);
    return string;
}
//============================================//
forward CheckSub();
public CheckSub()
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i <= rows; i++)
        {
			new fetch[255], dont, don, pid, query[255];
	    	cache_get_field_content(i, "MonthDonT", fetch);
			dont = strval(fetch);
	    	cache_get_field_content(i, "MonthDon", fetch);
			don = strval(fetch);
	    	cache_get_field_content(i, "ID", fetch);
			pid = strval(fetch);
	        if(don > 0)
	        {
				dont = dont - 1;
				if(dont == 0)
				{
				    don = 0;
				    printf("User ID (%d) has been offline set to subscription status (0)", pid);
				}
	        }
			format(query, sizeof(query), "UPDATE accounts SET MonthDon=%d, MonthDonT=%d WHERE ID=%d",
			don, dont, pid);
			mysql_tquery(handlesql, query);
        }
    }
	return 1;
}
//============================================//
forward nal(playerid);
public nal(playerid)
{
	SCM(playerid, COLOR_GREY, "{FFFFFF}[{6B6B6B}ERROR{FFFFFF}] You do not have permission for this command.");
	return 1;
}
//============================================//
forward error(playerid, message[]);
public error(playerid, message[])
{
	new stringz[255];
	format(stringz, sizeof(stringz), "{FFFFFF}[{6B6B6B}ERROR{FFFFFF}] %s", message);
	SendClientMessage(playerid, COLOR_GREY, stringz);
	return 1;
}
//============================================//
forward usage(playerid, message[]);
public usage(playerid, message[])
{
	new string[128];
	format(string, sizeof(string), "{FFFFFF}[{6B6B6B}USAGE{FFFFFF}] %s", message);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}
//============================================//
stock BanPlayer(playerid, reason[], admin[], temp = 0)
{
	ResetPlayerWeapons(playerid);
    if(IsPlayerNPC(playerid)) return true;
   	if(GetPVarInt(playerid, "BeingBanned") == 1) return true;
   	if(!IsPlayerConnected(playerid)) return 1;
    SetPVarInt(playerid, "BeingBanned", 1);
	new string[128],hour,minute,second,year,month,day;
	getdate(year, month, day);
	gettime(hour,minute,second);
    TogglePlayerSpectating(playerid,1);
	new date_current[32];
	format(date_current, sizeof(date_current), "%d/%02d/%02d - %02d:%02d:%02d", year, month, day, hour, minute, second);	
	SendClientMessage(playerid, COLOR_LIGHTRED, "______________________________________________________________________");
	format(string, sizeof(string),  			"You have been banned from Diverse Roleplay by (%s)", admin);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	format(string, sizeof(string),              "Reason: %s", reason);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	format(string, sizeof(string),              "Date & Time:  %s", date_current);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);
    SendClientMessage(playerid, COLOR_LIGHTRED, "To appeal this ban, head to www.diverseroleplay.org.");
 	SendClientMessage(playerid, COLOR_LIGHTRED, "______________________________________________________________________");
 	/*===================================================
    MYSQL QUERY
    ====================================================*/
 	new playersip[32], query[500];
 	GetPlayerIp(playerid, playersip, sizeof(playersip));
	new bUsername[32], BannedBy[32], bReason[128], bSerial[42];
	gpci(playerid, bSerial, sizeof(bSerial));
	mysql_real_escape_string(PlayerName(playerid), bUsername);
	mysql_real_escape_string(admin, BannedBy);
	mysql_real_escape_string(reason, bReason);
	mysql_real_escape_string(bSerial, bSerial);
	new date[32];
	if(temp != 0) { //Temp ban.
	 	if(day + temp > MonthDays[month - 1]) {
 			month++;
 			if(month > 12) {
 				year++;
 				month = 1;
 			}
 			day = (day + temp) - MonthDays[month - 1];
 		}
 		else {
 			day += temp;
 		}
		format(date, sizeof(date), "%d/%02d/%02d - %02d:%02d:%02d", year, month, day, hour, minute, second);
		mysql_format(handlesql, query, sizeof(query),"INSERT INTO bans (Date, bUsername, bReason, bIP, BannedBy, bSerial, BannedUntil) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s')", date_current, bUsername, bReason, playersip, BannedBy, bSerial, date);
		mysql_tquery(handlesql, query);
		mysql_format(handlesql, query, sizeof(query),"INSERT INTO logs_bans (Date, bUsername, bReason, bIP, BannedBy, bSerial, BannedUntil) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s')", date_current, bUsername, bReason, playersip, BannedBy, bSerial, date);
		mysql_tquery(handlesql, query);		
		format(query, sizeof(query), "You've been temporarily banned from the server until %s.", date);
		KickPlayer(playerid, query);
	} else {
		mysql_format(handlesql, query, sizeof(query),"INSERT INTO bans (Date, bUsername, bReason, bIP, BannedBy, bSerial, BannedUntil, Pass) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', 'Permanent', '%s')", date_current, bUsername, bReason, playersip, BannedBy, bSerial, PlayerInfo[playerid][pPass]);
		mysql_tquery(handlesql, query);
		mysql_format(handlesql, query, sizeof(query),"INSERT INTO logs_bans (Date, bUsername, bReason, bIP, BannedBy, bSerial, BannedUntil) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', 'Permanent')", date_current, bUsername, bReason, playersip, BannedBy, bSerial);
		mysql_tquery(handlesql, query);
		KickPlayer(playerid, "You have been permanently banned from the server.");
	}	
	return 1;
}
//============================================//
forward GetBanInfo(playerid);
public GetBanInfo(playerid)
{
	new fields, rows;
	cache_get_data(rows, fields);
	if(rows) {
		new id = cache_get_field_content_int(0, "ID"), date[64], year, month, day, hour, minute, second;
		cache_get_field_content(0, "BannedUntil", date);
		new bool:unban = false;
		if(!strmatch(date, "Permanent")) {
			new temp_date[32];
			strmid(temp_date, date, 0, 4);
			year = strval(temp_date);
			strmid(temp_date, date, 5, 7);
			month = strval(temp_date);
			strmid(temp_date, date, 8, 10);
			day = strval(temp_date);
			strmid(temp_date, date, 13, 15);
			hour = strval(temp_date);
			strmid(temp_date, date, 16, 18);
			minute = strval(temp_date);
			strmid(temp_date, date, 19, 21);
			second = strval(temp_date);

			new year2, month2, day2;
			new hour2, minute2, second2;
			getdate(year2, month2, day2);
			gettime(hour2, minute2, second2);

			if(year2 > year) {
				unban = true;
			}
			else if(year2 == year) {
				if(month2 > month) {
					unban = true;
				} else if(month2 == month) {
					if(day2 > day) {
						unban = true;
					} else if(day2 == day) {
						if(hour2 > hour) {
							unban = true;
						} else if(hour2 == hour) { 
							if(minute2 > minute) {
								unban = true;
							} else if(minute2 == minute) {
								if(second2 >= second) { unban = true; }
							}
						}
					}
				}
			}
		}
		if(unban == true) {
			new name[32];
			cache_get_field_content(0, "bUsername", name);
			
			new query[124];
			mysql_format(handlesql, query, sizeof(query), "DELETE FROM bans WHERE ID=%i", id);
			mysql_tquery(handlesql, query);

			format(query, sizeof(query), "AdmCmd: %s was unbanned by the server.", name);
			SendClientMessageToAllEx(COLOR_LIGHTRED, query);
		} else {		
			new buser[32], reason[64], adminname[64], bip[32], bserial[42];
			cache_get_field_content(0, "bUsername", buser);
			cache_get_field_content(0, "bReason", reason);
			cache_get_field_content(0, "BannedBy", adminname);
			cache_get_field_content(0, "bIP", bip);
			cache_get_field_content(0, "bSerial", bserial);
			new muser[32],ip[32],serialkey[42];
			GetPlayerIp(playerid, ip, sizeof(ip));
			mysql_real_escape_string(PlayerName(playerid), muser);
			gpci(playerid, serialkey, sizeof(serialkey));
			mysql_real_escape_string(serialkey, serialkey);
			if(strmatch(ip,bip) || strmatch(muser,buser)) {
				new string[180];
				SCM(playerid, COLOR_YELLOW, "______________________________________________________________________");
				SendClientMessage(playerid, COLOR_YELLOW, "[System] You are banned from Diverse Roleplay.");
				format(string, sizeof(string), "[System] Reason: %s", reason);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[System] Banned By: %s", adminname);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "[System] To appeal this ban, go to www.diverseroleplay.org");
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SCM(playerid, COLOR_YELLOW, "______________________________________________________________________");
				SetPVarInt(playerid, "Banned", 1);
				KickPlayer(playerid, "");
			} else if(strmatch(serialkey,bserial)) {
				if(strlen(bip) > 2 && !strmatch(bip, "No IP given")) {
					new cidr[35];
					format(cidr, sizeof(cidr), "%s/24", bip);
					if(cidr_match(ip, cidr)) {
						new string[180];
						SCM(playerid, COLOR_YELLOW, "______________________________________________________________________");
						SendClientMessage(playerid, COLOR_YELLOW, "[System] You are banned from Diverse Roleplay.");
						format(string, sizeof(string), "[System] Reason: %s", reason);
						SendClientMessage(playerid, COLOR_YELLOW, string);
						format(string, sizeof(string), "[System] Banned By: %s", adminname);
						SendClientMessage(playerid, COLOR_YELLOW, string);
						SendClientMessage(playerid, COLOR_YELLOW, "[System] Ban evasion detected.");
						format(string, sizeof(string), "[System] To appeal this ban, go to www.diverseroleplay.org");
						SendClientMessage(playerid, COLOR_YELLOW, string);
						SCM(playerid, COLOR_YELLOW, "______________________________________________________________________");
						SetPVarInt(playerid, "Banned", 1);
						KickPlayer(playerid, "");		
						return 1;
					}
				}
				new banpass[65];
				cache_get_field_content(0, "Pass", banpass);
				SetPVarString(playerid, "BanPass", banpass);
				PlayerInfo[playerid][pSerialBan] = 1;
			}
		}
	}
	return 1;
}
//============================================//
stock CheckIfBanned(playerid)
{
	new ip[32], name[32], serialkey[90], query[255];
	gpci(playerid, serialkey, sizeof(serialkey));
	GetPlayerIp(playerid, ip, sizeof(ip));
	GetPlayerName(playerid, name, sizeof(name));
	mysql_real_escape_string(name, name); //Replace 'name' with escaped name.
	new bSerial[42];
	gpci(playerid, bSerial, sizeof(bSerial));
	mysql_real_escape_string(bSerial, bSerial);
	mysql_format(handlesql, query, sizeof(query),"SELECT * FROM bans WHERE (bIP='%s' OR bUsername='%s' OR bSerial='%s')", ip, name, bSerial);
	mysql_tquery(handlesql, query, "GetBanInfo", "i", playerid);
	return 1;
}
//============================================//
forward CheckPhone(playerid, number);
public CheckPhone(playerid, number)
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows) return error(playerid, "This phone number is already taken.");
    
    new sendername[MAX_PLAYER_NAME], string[255];
    format(sendername, sizeof(sendername), "%s", PlayerName(playerid));
    GiveNameSpace(sendername);
	format(string, 256, "%s[%d] is requesting a phonenumber change, [%d], /acp.", sendername, playerid, number);
	SendAdminMessage(0xFF0000FF,string);
	SetPVarInt(playerid, "ReqNum", number);
	SCM(playerid, -1, "Your phone-change request has been submitted and is being reviewed by the administrators.");
	return 1;
}
//============================================//
stock BanPlayerO(name[], pip[], reason[], admin[], temp = 0)
{
	new hour,minute,second,year,month,day;
	getdate(year, month, day);
	gettime(hour,minute,second);
 	/*===================================================
    MYSQL QUERY
    ====================================================*/
 	new date_current[32], query[500];
	format(date_current, sizeof(date_current), "%d/%02d/%02d - %02d:%02d:%02d", year, month, day, hour, minute, second);	
	new bUsername[32], BannedBy[32], bReason[128];
	mysql_real_escape_string(name, bUsername);
	mysql_real_escape_string(admin, BannedBy);
	mysql_real_escape_string(reason, bReason);
	new date[32];
	if(temp != 0) { //Temp ban.
	 	if(day + temp > MonthDays[month - 1]) {
 			month++;
 			if(month > 12) {
 				year++;
 				month = 1;
 			}
 			day = (day + temp) - MonthDays[month - 1];
 		}
 		else {
 			day += temp;
 		}
		format(date, sizeof(date), "%d/%02d/%02d - %02d:%02d:%02d", year, month, day, hour, minute, second);
		format(query, sizeof(query),"INSERT INTO bans (Date, bUsername, bReason, bIP, BannedBy, bSerial, BannedUntil) VALUES ('%s', '%s', '%s', '%s', '%s', 'NONE', '%s')", date_current, bUsername, bReason, pip, BannedBy, date);
		mysql_tquery(handlesql, query);
		format(query, sizeof(query),"INSERT INTO logs_bans (Date, bUsername, bReason, bIP, BannedBy, bSerial, BannedUntil) VALUES ('%s', '%s', '%s', '%s', '%s', 'NONE', '%s')", date_current, bUsername, bReason, pip, BannedBy, date);
		mysql_tquery(handlesql, query);
	} else {
		format(query, sizeof(query),"INSERT INTO bans (Date, bUsername, bReason, bIP, BannedBy, bSerial, BannedUntil) VALUES ('%s', '%s', '%s', '%s', '%s', 'NONE', 'Permanent')", date_current, bUsername, bReason, pip, BannedBy);
		mysql_tquery(handlesql, query);
		format(query, sizeof(query),"INSERT INTO logs_bans (Date, bUsername, bReason, bIP, BannedBy, bSerial, BannedUntil) VALUES ('%s', '%s', '%s', '%s', '%s', 'NONE', 'Permanent')", date_current, bUsername, bReason, pip, BannedBy);
		mysql_tquery(handlesql, query);
	}
	return 1;
}
//============================================//
forward MDCPlayer(playerid);
public MDCPlayer(playerid)
{
	print("Calling MDCPlayer");
    new fields, rows, id, Float:x, Float:y, Float:z;
    cache_get_data(rows, fields);
    if(!rows) return ShowPlayerDialog(playerid, 282, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the name.\n{BD0000}(Person not found)", "Continue","Back");
    new fetch[50], diatxt[1024], temptxt[64],temptxt2[64], tmpid;
    
    cache_get_field_content(0, "PhoneNum", fetch);
    tmpid = strval(fetch);
    cache_get_field_content(0, "Name", fetch);
    format(diatxt, sizeof(diatxt), "{FF3333}BASIC INFORMATION\n\n");
    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s | {33FF66}Phone: {FFFFFF}%d\n",diatxt, fetch,tmpid);
	cache_get_field_content(0, "Sex", fetch);
	if(strval(fetch) == 1) format(temptxt, 20, "Male");
	if(strval(fetch) == 2) format(temptxt, 20, "Female");
    cache_get_field_content(0, "Age", fetch);
    tmpid = strval(fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Gender: {FFFFFF}%s | {33FF66}Age: {FFFFFF}%d\n", diatxt, temptxt, tmpid);
	cache_get_field_content(0, "DriveLic", fetch);
	if(strval(fetch) == 0) format(temptxt, 20, "Not passed");
	if(strval(fetch) == 1) format(temptxt, 20, "Passed");
	cache_get_field_content(0, "GunLic", fetch);
	if(strval(fetch) == 0) format(temptxt2, 20, "Not passed");
	if(strval(fetch) == 1) format(temptxt2, 20, "Passed");
    format(diatxt, sizeof(diatxt), "%s{33FF66}Drivers License: {FFFFFF}%s | {33FF66}Weapon License: {FFFFFF}%s\n", diatxt, temptxt, temptxt2);
    format(diatxt, sizeof(diatxt), "%s{FF3333}POSSESIONS INFORMATION\n\n",diatxt);
	new plate[50];
	for(new i = 0; i < cache_get_row_count(); i++) {
	    cache_get_field_content(i, "Plate", plate);
        format(diatxt, sizeof(diatxt), "%s{33FF66}Model: {FFFFFF}%s | {33FF66}Plate: {FFFFFF}%s {CCCCCC}(Click for more information)\n", diatxt, VehicleName[cache_get_field_content_int(i, "Model") - 400], plate);
        MDCinfo[playerid][i][mVID] = cache_get_field_content_int(i, "ID");
	}
	//House information
	cache_get_field_content(0, "HouseKey", fetch);
	id = strval(fetch);
	if(id != 0)
	{
		x = HouseInfo[id][hXo];
		y = HouseInfo[id][hYo];
		z = HouseInfo[id][hZo];
		format(diatxt, sizeof(diatxt), "%s{33FF66}Property Area: {FFFFFF}%s | {33FF66}Number: {FFFFFF}%d {CCCCCC}(Click for more information)\n", diatxt, GetZone(x, y, z), id);
	}
	if(id == 0) format(diatxt, sizeof(diatxt), "%s{33FF66}Business Area: {FFFFFF}None | {33FF66}Number: {FFFFFF}None\n", diatxt);
	//Business information
	cache_get_field_content(0, "BizzKey", fetch);
	id = strval(fetch);
	if(id != 0)
	{
		x = BizInfo[id][Xo];
		y = BizInfo[id][Yo];
		z = BizInfo[id][Zo];
		format(diatxt, sizeof(diatxt), "%s{33FF66}Area: {FFFFFF}%s | {33FF66}Name: {FFFFFF}%s\n", diatxt, GetZone(x, y, z), BizInfo[id][Name]);
	}
	if(id == 0) format(diatxt, sizeof(diatxt), "%s{33FF66}Area: {FFFFFF}None | {33FF66}Name: {FFFFFF}None\n", diatxt);
	//Criminal record
	format(diatxt, sizeof(diatxt), "%s{FF3333}CRIMINAL RECORD\n{CCCCCC}(Click for criminal record)\n{CCCCCC}(Click for outstanding tickets)",diatxt);
	ShowPlayerDialog(playerid, 283, DIALOG_STYLE_LIST, "Mobile data computer", diatxt, "Select", "Back");
	return 1;
}
//============================================//
forward MDCPlayer2(playerid);
public MDCPlayer2(playerid)
{
    new fields, rows, fetch[128], diatxt[1024];
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i < rows + 1; i++)
        {
	        cache_get_field_content(i, "crime", fetch);
	        if(strlen(fetch) > 0)
	        {
		        format(diatxt, sizeof(diatxt), "%s{33FF66}Charge: {FFFFFF}%s {CCCCCC}(Click for more information)\n",diatxt, fetch);
		        //Seting info for player to view on dialog.
		        cache_get_field_content(i, "time", fetch);
	            format(MDCinfo[playerid][i][mTime], 64, "%s", fetch);

	            cache_get_field_content(i, "player", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);

	            cache_get_field_content(i, "officer", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);
			}
		}
    }
    else
    {
        format(diatxt, sizeof(diatxt), "%s{FFFFFF}No criminal record\n", diatxt);
        format(MDCinfo[playerid][0][mTime], 64, "99:99:99");
	}
	ShowPlayerDialog(playerid, 284, DIALOG_STYLE_LIST, "Mobile data computer", diatxt, "Select", "Back");
	return 1;
}
//============================================//
forward MDCPlayer3(playerid);
public MDCPlayer3(playerid)
{
    new fields, rows, fetch[128], diatxt[512], tempid;
    cache_get_data(rows, fields);
    if(!rows) return error(playerid, "Invalid crime selected.");
    
	cache_get_field_content(0, "player", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s\n",diatxt, fetch);
	cache_get_field_content(0, "officer", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Officer in charge: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "crime", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Criminal charge: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "date", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Date: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "time", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Time: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "ID", fetch);
   	tempid = strval(fetch) + 900;
    format(diatxt, sizeof(diatxt), "%s{33FF66}Case ID: {FFFFFF}#%d\n",diatxt, tempid);
	ShowPlayerDialog(playerid, 285, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
    return 1;
}
//============================================//
forward MDCPlayer4(playerid);
public MDCPlayer4(playerid)
{
    new fields, rows, fetch[128], diatxt[512], temptxt[50];
    cache_get_data(rows, fields);
    if(!rows) return error(playerid, "Invalid vehicle selected.");
    
 	cache_get_field_content(0, "Model", fetch);
 	format(temptxt, 64, "%s", VehicleName[strval(fetch) - 400]);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Model: {FFFFFF}%s\n",diatxt, temptxt);
 	cache_get_field_content(0, "Owner", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Registered owner: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "Plate", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Plate: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "Value", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Value: {FFFFFF}$%d\n",diatxt, strval(fetch));
    ShowPlayerDialog(playerid, 286, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
    return 1;
}
//============================================//
stock SetPlayerSkinEx(playerid, skinid)
{
    new vehicle, seat = GetPlayerVehicleSeat(playerid);
    if(seat != -1)
    {
        vehicle = GetPlayerVehicleID(playerid);
        ClearAnimations(playerid);
        SetPlayerSkin(playerid, skinid);
        SetPVarInt(playerid, "Model", skinid);
        PutPlayerInVehicleEx(playerid, vehicle, seat);
    }
    else
	{
		SetPlayerSkin(playerid, skinid);
		SetPVarInt(playerid, "Model", skinid);
	}
	OnPlayerDataSave(playerid);
	return 1;
}
//============================================//
forward MDCPlayer5(playerid);
public MDCPlayer5(playerid)
{
    new fields, rows, fetch[128], diatxt[1024];
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i < rows + 1; i++)
        {
	        cache_get_field_content(i, "amount", fetch);
	        if(strlen(fetch) > 0 && strval(fetch) != 0)
	        {
		        format(diatxt, sizeof(diatxt), "%s{33FF66}Amount: {FFFFFF}$%d {CCCCCC}(Click for more information)\n",diatxt, strval(fetch));
		        //Seting info for player to view on dialog.
		        cache_get_field_content(i, "time", fetch);
	            format(MDCinfo[playerid][i][mTime], 64, "%s", fetch);

	            cache_get_field_content(i, "player", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);

	            cache_get_field_content(i, "officer", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);
			}
		}
    }
    else
    {
        format(diatxt, sizeof(diatxt), "%s{FFFFFF}No pending tickets\n", diatxt);
        format(MDCinfo[playerid][0][mTime], 64, "99:99:99");
	}
	ShowPlayerDialog(playerid, 291, DIALOG_STYLE_LIST, "Mobile data computer", diatxt, "Select", "Back");
	return 1;
}
//============================================//
forward MDCPlayer6(playerid);
public MDCPlayer6(playerid)
{
    new fields, rows, fetch[128], diatxt[512], tempid;
    cache_get_data(rows, fields);
    if(!rows) return error(playerid, "Invalid crime selected.");

	cache_get_field_content(0, "player", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s\n",diatxt, fetch);
	cache_get_field_content(0, "officer", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Officer in charge: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "reason", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Ticket charge: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "date", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Date: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "time", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Time: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "ID", fetch);
   	tempid = strval(fetch) + 100;
    format(diatxt, sizeof(diatxt), "%s{33FF66}Ticket ID: {FFFFFF}#%d\n",diatxt, tempid);
	ShowPlayerDialog(playerid, 292, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
    return 1;
}
 //============================================//
forward MDCVehicle(playerid);
public MDCVehicle(playerid)
{
    new fields, rows, fetch[128], diatxt[512], temptxt[50];
    cache_get_data(rows, fields);
    if(!rows) return ShowPlayerDialog(playerid, 287, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the vehicle plate.\n{BD0000}(Vehicle not found)", "Continue","Back");
    
 	cache_get_field_content(0, "Model", fetch);
 	format(temptxt, 64, "%s", VehicleName[strval(fetch) - 400]);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Model: {FFFFFF}%s\n",diatxt, temptxt);
 	cache_get_field_content(0, "Owner", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Registered owner: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "Plate", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Plate: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "Value", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Value: {FFFFFF}$%d\n",diatxt, strval(fetch));
    ShowPlayerDialog(playerid, 288, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
	return 1;
}
//============================================//
forward MDCCase(playerid);
public MDCCase(playerid)
{
    new fields, rows, fetch[128], diatxt[512], tempid;
    cache_get_data(rows, fields);
    if(!rows) return ShowPlayerDialog(playerid, 289, DIALOG_STYLE_INPUT, "Mobile data computer", "Insert the Case ID.\n{BD0000}(Case not found)", "Continue","Back");

	cache_get_field_content(0, "player", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s\n",diatxt, fetch);
	cache_get_field_content(0, "officer", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Officer in charge: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "crime", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Criminal charge: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "date", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Date: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "time", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Time: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "ID", fetch);
   	tempid = strval(fetch) + 900;
    format(diatxt, sizeof(diatxt), "%s{33FF66}Case ID: {FFFFFF}#%d\n",diatxt, tempid);
	ShowPlayerDialog(playerid, 290, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
    return 1;
}
//============================================//
public MedGate(type)
{
	switch(type)
	{
		case 1: MoveDynamicObject(medgate1,1145.59998, -1291, 16.2, 2.0), MoveDynamicObject(medgate2,1136.7998, -1291, 16.2, 2.0), PlaySoundInArea(1153,1145.59998, -1291, 16.2,20.0), gatedelay[medgate1]=2;
		case 2: MoveDynamicObject(medgate3,1150.80005, -1348.09998, 16.1, 2.0), MoveDynamicObject(medgate4,1142.0, -1348.09998, 16.1, 2.0), PlaySoundInArea(1153,1150.80005, -1348.09998, 16.1,20.0), gatedelay[medgate3]=2;
	}
	return true;
}
//============================================//
forward LoadTickets(playerid);
public LoadTickets(playerid)
{
    new fields, rows, fetch[128];
    cache_get_data(rows, fields);
	if(!rows) return 1;
	for(new i = 0; i < rows; i++)
	{
		cache_get_field_content(i, "ID", fetch);
        TicketInfo[playerid][i][tID] = strval(fetch);
		cache_get_field_content(i, "player", fetch);
		format(TicketInfo[playerid][i][tSuspect], 64, "%s", fetch);
		cache_get_field_content(i, "officer", fetch);
		format(TicketInfo[playerid][i][tOfficer], 64, "%s", fetch);
		cache_get_field_content(i, "time", fetch);
		format(TicketInfo[playerid][i][tTime], 64, "%s", fetch);
		cache_get_field_content(i, "date", fetch);
		format(TicketInfo[playerid][i][tDate], 64, "%s", fetch);
		cache_get_field_content(i, "reason", fetch);
		format(TicketInfo[playerid][i][tReason], 64, "%s", fetch);
		cache_get_field_content(i, "amount", fetch);
        TicketInfo[playerid][i][tAmount] = strval(fetch);
		cache_get_field_content(i, "paid", fetch);
        TicketInfo[playerid][i][tPaid] = strval(fetch);
	}
	return 1;
}
//============================================//
forward GetTicketsP(playerid);
public GetTicketsP(playerid)
{
    new fields, rows, fetch[128], diatxt[1024];
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i < rows + 1; i++)
        {
	        cache_get_field_content(i, "amount", fetch);
	        if(strlen(fetch) > 0 && strval(fetch) != 0)
	        {
		        format(diatxt, sizeof(diatxt), "%s{33FF66}Amount: {FFFFFF}$%d {CCCCCC}(Click for more information)\n",diatxt, strval(fetch));
		        //Seting info for player to view on dialog.
		        cache_get_field_content(i, "time", fetch);
	            format(MDCinfo[playerid][i][mTime], 64, "%s", fetch);

	            cache_get_field_content(i, "player", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);

	            cache_get_field_content(i, "officer", fetch);
	            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);
			}
		}
    }
    else
    {
        format(diatxt, sizeof(diatxt), "%s{FFFFFF}No pending tickets\n", diatxt);
        format(MDCinfo[playerid][0][mTime], 64, "99:99:99");
	}
	ShowPlayerDialog(playerid, 293, DIALOG_STYLE_LIST, "Tickets", diatxt, "Select", "Back");
	return 1;
}
//============================================//
forward GetTicketsP2(playerid);
public GetTicketsP2(playerid)
{
    new fields, rows, fetch[128], diatxt[512], tempid;
    cache_get_data(rows, fields);
    if(!rows) return error(playerid, "Invalid ticket selected.");

	cache_get_field_content(0, "player", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s\n",diatxt, fetch);
	cache_get_field_content(0, "officer", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Officer in charge: {FFFFFF}%s\n",diatxt, fetch);
 	cache_get_field_content(0, "reason", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Ticket charge: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "date", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Date: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "time", fetch);
    format(diatxt, sizeof(diatxt), "%s{33FF66}Time: {FFFFFF}%s\n",diatxt, fetch);
   	cache_get_field_content(0, "ID", fetch);
   	tempid = strval(fetch) + 100;
    format(diatxt, sizeof(diatxt), "%s{33FF66}Ticket ID: {FFFFFF}#%d\n",diatxt, tempid);
	ShowPlayerDialog(playerid, 294, DIALOG_STYLE_MSGBOX, "Mobile data computer", diatxt, "Back", "");
    return 1;
}
//============================================//
forward PayTicketsP(playerid);
public PayTicketsP(playerid)
{
    new fields, rows, fetch[128], total, temp[100], query[255];
    cache_get_data(rows, fields);
    if(rows)
    {
        for(new i = 0; i < rows + 1; i++)
        {
	        cache_get_field_content(i, "amount", fetch);
	        if(strlen(fetch) > 0 && strval(fetch) != 0 && i < 100)
	        {
				total = total + strval(fetch);
				cache_get_field_content(i, "ID", fetch);
				temp[i] = strval(fetch);
			}
		}
		if(GetPlayerMoneyEx(playerid) >= total)
		{
			if(total >= 1) GivePlayerMoneyEx(playerid, -total);
			SCM(playerid, -1, "All tickets have been paid.");
        	for(new i = 0; i < rows + 1; i++)
        	{
	        	cache_get_field_content(i, "amount", fetch);
	        	if(strlen(fetch) > 0 && strval(fetch) != 0 && i < 100)
	        	{
					format(query, sizeof(query), "UPDATE tickets SET paid=1 WHERE ID = %d",temp[i]);
					mysql_tquery(handlesql, query);
				}
			}
		}
		else error(playerid, "Insufficient funds. ((/tickets to see all your tickets.))");
    }
    else
    {
        SCM(playerid, -1, "You have no pending tickets.");
	}
	return 1;
}
//============================================//
forward LoadFactionSQL(playerid);
public LoadFactionSQL(playerid) {
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows) {
		new id = cache_get_field_content_int(0, "ID");
		FactionInfo[id][fUsed]=1;
		new fetch[128];
		cache_get_field_content(0, "Name", fetch);
		format(FactionInfo[id][fName], 48, "%s", fetch);
		if(strlen(FactionInfo[id][fName]) < 1) {
			FactionInfo[id][fUsed]=0;
			return 1;
		}
		FactionInfo[id][fWepCount] = cache_get_field_content_int(0, "WepCount");
		FactionInfo[id][fDrugCount] = cache_get_field_content_int(0, "DrugCount");
		new str2[128];
		for(new i=1; i < 25; i++) {
			format(str2, 128, "Rank%d", i);
			cache_get_field_content(0, str2, fetch);
       		if(strlen(fetch) >= 2) {
           		format(FactionRank[id][i], 50, "%s", fetch);
				format(str2, 128, "Skin%d", i);
		    } else {
				strmid(FactionRank[id][i], " ", 0, strlen(" "), 255);
			}
			
	   		format(str2, 128, "Bonus_Rank%i", i);
			FactionBonus[id][i - 1] = cache_get_field_content_int(0, str2);
		}
		cache_get_field_content(0, "Name", fetch);
		format(FactionInfo[id][fMOTD], 25, "%s", fetch);
		FactionInfo[id][fRights] = cache_get_field_content_int(0, "Rights");
		
		FactionInfo[id][fFact][0] = cache_get_field_content_float(0, "Fact0");
		FactionInfo[id][fFact][1] = cache_get_field_content_float(0, "Fact1");
		FactionInfo[id][fFact][2] = cache_get_field_content_float(0, "Fact2");
		if(FactionInfo[id][fRights] > 0) FactionCP[id]=CreateDynamicCP(FactionInfo[id][fFact][0], FactionInfo[id][fFact][1], FactionInfo[id][fFact][2], 1.5, 0, -1, -1, 10.0);
		//==========//
		format(str2, 128, "Loaded FACTION: %d from MySQL database", id);
		printf(str2);
	}
	return 1;
}
//============================================//
public LoadRadios(playerid)
{
	if(GetPlayerInterior(playerid) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid)) {
			new id = GetPlayerVehicleID(playerid);
			if(strcmp(VehicleInfo[id][vRadio], "None", true) == 0){
			} else {
				if(strcmp(VehicleInfo[id][vRadio], PlayerInfo[playerid][pAudioUrl], true) == 0){}
				else
				{
					PlayAudioStreamForPlayerEx(playerid, VehicleInfo[id][vRadio]);
				}
			}
        } else {
			for(new i = 0; i < sizeof(RadioInfo); i++) {
				if(RadioInfo[i][rStatus] == 0) continue;
				if(strcmp(RadioInfo[i][rURL], PlayerInfo[playerid][pAudioUrl], true) == 0) continue;
				if(GetPlayerZone(playerid) == RadioInfo[i][rAreaID]) {
					if(RadioInfo[i][rOnRLS] == 1) {
						PlayAudioStreamForPlayerEx(playerid, RadioLSStream, RadioInfo[i][rX], RadioInfo[i][rY], RadioInfo[i][rZ], 50.0, 1);
					} else PlayAudioStreamForPlayerEx(playerid, RadioInfo[i][rURL], RadioInfo[i][rX], RadioInfo[i][rY], RadioInfo[i][rZ], 50.0, 1);
				}
			}		
		}
	}
	else
	{
	    if(GetPVarInt(playerid, "HouseEnter") != 0)
	    {
	    	new id = GetPVarInt(playerid, "HouseEnter");
	    	if(strcmp(HouseInfo[id][hRadioU], "None", true) == 0){}
	    	else
	    	{
	        	if(strcmp(HouseInfo[id][hRadioU], PlayerInfo[playerid][pAudioUrl], true) == 0){}
	        	else { PlayAudioStreamForPlayerEx(playerid, HouseInfo[id][hRadioU]); }
	    	}
	    	return true;
	    }
	    if(GetPVarInt(playerid, "BizzEnter") != 0)
	    {
	    	new id = GetPVarInt(playerid, "BizzEnter");
	    	if(strcmp(BizInfo[id][bRadio], "None", true) == 0){}
	    	else
	    	{
	        	if(strcmp(BizInfo[id][bRadio], PlayerInfo[playerid][pAudioUrl], true) == 0){}
	        	else { PlayAudioStreamForPlayerEx(playerid, BizInfo[id][bRadio]); }
	    	}
	    }
		if(PlayerInfo[playerid][pInVehicle] != -1) {
			new id = PlayerInfo[playerid][pInVehicle];
			if(strcmp(VehicleInfo[id][vRadio], "None", true) == 0){
			} else {
				if(strcmp(VehicleInfo[id][vRadio], PlayerInfo[playerid][pAudioUrl], true) == 0){}
				else { PlayAudioStreamForPlayerEx(playerid, VehicleInfo[id][vRadio]); }
			}		
		}
	}
	return true;
}
//============================================//
stock TempFreeze(playerid)
{
	TogglePlayerControllableEx(playerid,false);
    SetTimerEx("TempUnfreeze", 1500, false, "i", playerid);
	return 1;
}
//============================================//
forward TempUnfreeze(playerid);
public TempUnfreeze(playerid)
{
	TogglePlayerControllableEx(playerid,true);
	return 1;
}
//============================================//
forward ReloadWeapon(playerid);
public ReloadWeapon(playerid)
{
	cmd_reload(playerid, "");
	return 1;
}
//============================================//
stock SPCM(playerid, color, text[], minlen = 110, maxlen = 120)
{
    new str[255];
    if(strlen(text) > maxlen)
    {
        new pos = maxlen;
        while(text[--pos] > ' ') {}
        if(pos < minlen) pos = maxlen;
        format(str, sizeof(str), "%.*s ...", pos, text);
        SendClientMessage(playerid,color,str);
        format(str, sizeof(str), ".... %s", text[pos+1]);
        SendClientMessage(playerid,color,str);
    }
    else format(str, sizeof(str), "%s", text), SendClientMessage(playerid,color,str);
    return true;
}
//============================================//
public SetPlayerWalkStyle(playerid,style)
{
	SendClientMessage(playerid,COLOR_WHITE,"Walkstyle changed.");
	SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Press '~k~~SNEAK_ABOUT~' to start walking, then press '~k~~PED_LOCK_TARGET~' to stop.");
	return SetPVarInt(playerid, "WalkStyle", style);
}
//============================================//
public GetPlayerWalkStyle(playerid)
{
	return GetPVarInt(playerid, "WalkStyle");
}
//============================================//
public RemovePlayerWalkStyle(playerid)
{
    SendClientMessage(playerid,COLOR_WHITE,"Walkstyle removed.");
	return DeletePVar(playerid,"WalkStyle");
}
//============================================//
stock IsTrunkCar(id)
{
	if(id == 480 || id == 533 || id == 439 || id == 555 || id == 536 || id == 451 || 
	id == 575 || id == 534 || id == 567 || id == 566 || id == 576 || id == 415 || id == 442 ||
	id == 412 || id == 579 || id == 400 || id == 500 || id == 489 || id == 422 || id == 411 ||
	id == 505 || id == 495 || id == 602 || id == 429 || id == 496 || id == 541 || id == 554 ||
	id == 402 || id == 589 || id == 587 || id == 565 || id == 559 || id == 603 || id == 475 ||
	id == 506 || id == 558 || id == 418 || id == 404 || id == 479 || id == 458 || id == 561 ||
	id == 445 || id == 401 || id == 518 || id == 527 || id == 542 || id == 507 || id == 562 ||
	id == 585 || id == 419 || id == 526 || id == 604 || id == 466 || id == 492 || id == 474 ||
    id == 546 || id == 517 || id == 410 || id == 551 || id == 516 || id == 467 || id == 426 ||
    id == 436 || id == 547 || id == 405 || id == 580 || id == 560 || id == 550 || id == 549 ||
    id == 540 || id == 491 || id == 529 || id == 421 || id == 470 || id == 477 || id == 478 ||
	id == 482 || id == 483 || id == 490 || id == 498 || id == 535 || id == 543 || id == 545 ||
	id == 600 || id == 609)
	{
	    return true;
	}
    return false;
}
//============================================//
forward Float:TrunkOffset(id, type);
public Float:TrunkOffset(id, type) // 1 - Y | 2 - Z
{
	new Float:offset = 0.0;
	if(id == 480 || id == 533 || id == 439 || id == 555 || id == 575 ||
	id == 602 || id == 429 || id == 496 || id == 402 || id == 589 ||
	id == 587 || id == 565 || id == 559 || id == 603 || id == 475 ||
	id == 506 || id == 558 || id == 401 || id == 518 || id == 527 ||
	id == 542 || id == 562 || id == 526 || id == 474 ||
	id == 410 || id == 436 || id == 491)
	{
	    switch(type)
	    {
	        case 1: offset=0.6;
	        case 2: offset=0.2;
	    }
	}
	if(id == 536 || id == 534 || id == 567 || id == 566 || id == 576 || id == 412 ||
	id == 404 || id == 479 || id == 458 || id == 561 || id == 445 || id == 507 ||
	id == 585 || id == 419 || id == 604 || id == 466 || id == 492 || id == 546 ||
	id == 551 || id == 516 || id == 467 || id == 426 || id == 547 || id == 405 ||
	id == 580 || id == 560 || id == 550 || id == 549 || id == 540 || id == 529 ||
	id == 421 || 517)
	{
	    switch(type)
	    {
	        case 1: offset=0.8;
	        case 2: offset=0.2;
	    }
	}
	if(id == 579 || id == 400 || id == 418)
	{
	    switch(type)
	    {
	        case 1: offset=0.6;
	        case 2: offset=0.5;
	    }
	}
	if(id == 500)
	{
	    switch(type)
	    {
	        case 1: offset=0.6;
	        case 2: offset=0.4;
	    }
	}
	
    return offset;
}
//============================================//
stock TrunkObject(itemid, type) // 1 == true && 2 == objectid
{
	new result = 0;
	if(itemid > 21 && itemid < 35)
    {
        switch(type)
        {
            case 1: result = 1;
            case 2: result=PrintIid(itemid);
            case 3: result = 90;
        }
    }
    if(itemid >= 100 && itemid <= 150)
    {
        switch(type)
        {
            case 1: result = 1;
            case 2: result=2037;
            case 3: result = 0;
        }
    }
    if(itemid == 403)
    {
        switch(type)
        {
            case 1: result = 1;
            case 2: result=1650;
            case 3: result = 90;
        }
    }
    if(itemid == 406)
    {
        switch(type)
        {
            case 1: result = 1;
            case 2: result=1210;
            case 3: result = 0;
        }
    }
    if(itemid >= 500 && itemid <= 550)
    {
        switch(type)
        {
            case 1: result = 1;
            case 2: result=1575;
            case 3: result = 0;
        }
    }
	return result;
}
//============================================//
stock CreateNPC(skinid, type, Float:x, Float:y, Float:z, Float:a, intid, world)
{
	new string[128], found = 0;
    for(new i = 1; i < sizeof(NPCInfo); i++)
    {
		if(NPCInfo[i][nID] == 0 && found == 0)
		{
		    format(string, sizeof(string), "NPC_%d", i);
			strmid(NPCInfo[i][nName], string, 0, strlen(string), 255);
		    NPCInfo[i][nID]=1;
		    NPCInfo[i][nModel]=skinid;
		    NPCInfo[i][nType]=type;
		    NPCInfo[i][n_X]=x;
		    NPCInfo[i][n_Y]=y;
		    NPCInfo[i][n_Z]=z;
		    NPCInfo[i][n_A]=a;
		    NPCInfo[i][nInt]=intid;
		    NPCInfo[i][nWorld]=world;
		    switch(type)
		    {
		        case NPC_TYPE_BUS_1: ConnectNPC(NPCInfo[i][nName], "busroute");
		        case NPC_TYPE_BUS_2: ConnectNPC(NPCInfo[i][nName], "busroute2");
		        case NPC_TYPE_TRAIN: ConnectNPC(NPCInfo[i][nName], "train_lv");
		        default: ConnectNPC(NPCInfo[i][nName], "npcidle");
		    }
		    found++;
		}
    }
    return true;
}
//============================================//
public LoadBots(number)
{
	switch(number)
	{
	    case 0:
	    {
	        LoadBot++;
	        SetTimerEx("LoadBots", 1000, false, "i", LoadBot);
	        // RESTAURANT BOTS //
	        CreateActorEx(167, 369.5807,-4.4911,1001.8589,182.6335,1); // CLUCKIN'BELL
            CreateActorEx(167, 369.1259,-4.4913,1001.8516,181.3877,7); // CLUCKIN'BELL
            CreateActorEx(167, 369.1878,-4.4921,1001.8516,180.2339,5); // CLUCKIN'BELL
	    }
	    case 1:
		{
	        LoadBot++;
	        SetTimerEx("LoadBots", 1000, false, "i", LoadBot);
			// RESTAURANT BOTS //
            CreateActorEx(167, 369.3261,-4.4919,1001.8516,176.4267,0); // CLUCKIN'BELL
            CreateActorEx(155, 375.7443,-117.2738,1001.4922,181.7847,1); // PIZZA STACK
            CreateActorEx(205, 377.3229,-65.8492,1001.5078,179.4584,1); // BURGER SHOT
            CreateActorEx(205, 377.4675,-65.8467,1001.5078,178.2493,2); // BURGER SHOT
	    }
	    case 2:
		{
	        LoadBot++;
	        SetTimerEx("LoadBots", 1000, false, "i", LoadBot);
	        // STORES / BIZZES //
            CreateActorEx(211, 2038.4792,-1339.1968,1271.4860,356.3586, 0); // HOSPITAL
            CreateActorEx(150, 192.4362,1770.0546,1029.9419,91.5386, 1); // BANK
            CreateActorEx(203, 766.7040,14.0530,1000.7009,196.4696, 1); // GYM TEACHER
			CreateActorEx(177, -28.9959,-186.8189,1003.5469,359.1369,532); // CLERK
	    }
	    case 3:
		{
	        LoadBot++;
	        SetTimerEx("LoadBots", 1000, false, "i", LoadBot);
	        // STORES / BIZZES //
			CreateActorEx(177, -28.9861,-186.8233,1003.5469,356.3770,91); // CLERK
            CreateActorEx(211, -103.5831,-24.2046,1000.7188,357.9645,142); // SEXSHOP
            CreateActorEx(177, -29.0404,-186.8191,1003.5469,356.3770,8); // CLERK
            CreateActorEx(211, -2655.5085,1413.3170,906.2734,267.4915,10); // BARTENDER
	    }
	    case 4:
	    {
	        LoadBot++;
	        SetTimerEx("LoadBots", 1000, false, "i", LoadBot);
	        // STORES / BIZZES //
	        CreateActorEx(177, -29.2133,-186.8157,1003.5469,0.3969, 1); // store clerk - int 17 - world 1
            CreateActorEx(177, -28.9932,-186.8192,1003.5469,1.1790, 0); // clerk - intid 17 - world 0
            CreateActorEx(211, 204.3464,-157.8301,1000.5234,180.1041, 0); // clothes - int 14 - world 0
            CreateActorEx(217, -103.8579,-24.2026,1000.7188,359.6335, 0); // sexshop - int 3 - world 0
            CreateActorEx(217, 497.5117,-77.5449,998.7651,0.4598, 0); // bartender - int 11 - world 0
            
	    }
	    case 5:
	    {
	        LoadBot++;
	        SetTimerEx("LoadBots", 1000, false, "i", LoadBot);
	        // STORES / BIZZES //
            CreateActorEx(217, 1215.1420,-15.2632,1000.9219,359.0578, 0); // bartender - int 2 - world 0
            CreateActorEx(217, -223.3060,1405.1097,27.7734,92.8193, 0); // bartender - int 18 - world 0
            CreateActorEx(179, 290.2040,-111.5141,1001.5156,0.4047, 1); // ammu - int 6 - world 1
            CreateActorEx(179, 308.4419,-143.0942,999.6016,356.8510, 2); // ammu - int  7 - world 2
            
	    }
	    case 6:
	    {
	        LoadBot++;
	        SetTimerEx("LoadBots", 1000, false, "i", LoadBot);
	        // AUTHORITIES //
            CreateNPC(280, NPC_TYPE_COP, 131.4545,1129.8295,527.4631,38.5570,1, 0); // LSPD
            CreateNPC(281, NPC_TYPE_COP, 1543.8273,-1631.9545,13.3828,89.4972,0, 0); // LSPD
	    }
	    case 7:
	    {
	        LoadBot++;
	        SetTimerEx("LoadBots", 1000, false, "i", LoadBot);
            CreateNPC(80, NPC_TYPE_BOXER, 760.9185,-0.1000,1001.5942,7.3957, 5, 1);
            CreateNPC(80, NPC_TYPE_BOXER, 760.9093,0.8792,1001.5942,180.4409, 5, 1);
	    }
		case 8:
		{
            CreateNPC(20, NPC_TYPE_BUS_1, 0.0, 0.0, 0.0, 0.0, 0, 0);
            CreateNPC(20, NPC_TYPE_BUS_2, 0.0, 0.0, 0.0, 0.0, 0, 0);
            CreateNPC(20, NPC_TYPE_TRAIN, 0.0, 0.0, 0.0, 0.0, 0, 0);
		}
	}
	return true;
}
//============================================//
stock CartoCloseCar(playerid,type,Float:distance)
{
    new Float:x, Float:y, Float:z;
    foreach(new c : Vehicle)
    {
        if(IsVehicleStreamedIn(c, playerid) && c != GetPlayerVehicleID(playerid))
        {
            GetVehiclePos(c,x,y,z);
            if(IsVehicleInRangeOfPoint(GetPlayerVehicleID(playerid),distance,x,y,z))
            {
			    switch(type)
			    {
			        case 1: return true;
			        case 2: return c;
			    }
            }
        }
    }
    if(type == 1) return false;
    return INVALID_VEHICLE_ID;
}
//============================================//
stock IsVehicleInRangeOfPoint(vehicleid, Float:radi, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz,Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return true;
    return false;
}
//============================================//
forward BuildHouseObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz);
public BuildHouseObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz)
{
	new string[128], found = 0, key = FurnRight(playerid, 1);
	if(key == -1) return 1;
 	/*new limit = MAX_HOUSE_OBJ;
  	if(HouseInfo[key][hOwned] == 2) limit = 50;
   	if(HouseInfo[key][hOwned] == 1) limit = 100;
   	if(GetPVarInt(playerid, "MonthDon") > 0) limit = MAX_HOUSE_OBJ;
    for(new h = 0; h < limit; h++)*/
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(HouseInfo[key][hoID][h] == 0)
		{
			found++;
			if(IsValidObjID(objectid)) {
				HouseInfo[key][hObject][h] = CreateDynamicObject(objectid, X, Y, Z, rotx, roty, rotz, GetPlayerVirtualWorld(playerid));
			}
			HouseInfo[key][hoID][h] = objectid;
			HouseInfo[key][hoX][h] = X;
			HouseInfo[key][hoY][h] = Y;
			HouseInfo[key][hoZ][h] = Z;
			HouseInfo[key][horX][h] = rotx;
			HouseInfo[key][horY][h] = roty;
			HouseInfo[key][horZ][h] = rotz;
			HouseInfo[key][hoInt][h] = GetPlayerInterior(playerid);
			format(string, sizeof(string), "Furniture %d created for HouseID: %d.", objectid, key);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			new query[524];
			mysql_format(handlesql, query, sizeof(query), "INSERT INTO housefurn (HID, Model, PosX, PosY, PosZ, AngX, AngY, AngZ, Interior) VALUES (%i, %i, %f, %f, %f, %f, %f, %f, %i)", 
				HouseInfo[key][hID], 
				HouseInfo[key][hoID][h], 
				HouseInfo[key][hoX][h], 
				HouseInfo[key][hoY][h],
				HouseInfo[key][hoZ][h], 
				HouseInfo[key][horX][h], 
				HouseInfo[key][horY][h], 
				HouseInfo[key][horZ][h],
				HouseInfo[key][hoInt][h]);
			mysql_tquery(handlesql, query, "OnBuildHouseObject", "ii", key, h);
            Streamer_Update(playerid);
			break;
        }
    }
    if(found == 0) SendClientMessage(playerid,COLOR_LIGHTRED,"All furniture slots have been used!");
    return 1;
}
//============================================//
forward OnBuildHouseObject(houseid, objectid);
public OnBuildHouseObject(houseid, objectid) {
	HouseInfo[houseid][hoDBID][objectid] = cache_insert_id();
	return 1;
}
//============================================//
stock RemoveHouseObject(key)
{
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(HouseInfo[key][hObject][h] != 0)
		{
			if(IsValidDynamicObject(HouseInfo[key][hObject][h])) { DestroyDynamicObject(HouseInfo[key][hObject][h]); }
			HouseInfo[key][hObject][h]=0;
			HouseInfo[key][hoID][h] = 0;
			HouseInfo[key][hoX][h] = 0.0;
		    HouseInfo[key][hoY][h] = 0.0;
			HouseInfo[key][hoZ][h] = 0.0;
		    HouseInfo[key][horX][h] = 0.0;
		    HouseInfo[key][horY][h] = 0.0;
			HouseInfo[key][horZ][h] = 0.0;
		    HouseInfo[key][hoInt][h] = 0;
        }
    }
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM `housefurn` WHERE `HID`=%i", key);
	mysql_tquery(handlesql, query);
    return 1;
}
//============================================//
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
    if(response != EDIT_RESPONSE_FINAL && response != EDIT_RESPONSE_CANCEL) return true;
	if(tCreateGateStep[playerid] != 0) {
		if(response == EDIT_RESPONSE_CANCEL)
		{
			if(IsValidPlayerObject(playerid, tCreateGateObjID[playerid])) DestroyPlayerObject(playerid, tCreateGateObjID[playerid]);
			tCreateGateObjID[playerid] = INVALID_OBJECT_ID;
			tCreateGateObjModel[playerid] = -1;
			tCreateGateStep[playerid] = 0;
		}
		else if(response == EDIT_RESPONSE_FINAL)
		{
			if(tCreateGateObjID[playerid] != INVALID_OBJECT_ID)
			{
				if(tCreateGateStep[playerid] == 1)
				{
					objInfo[playerid][objCloseX] = fX;
					objInfo[playerid][objCloseY] = fY;
					objInfo[playerid][objCloseZ] = fZ;
					objInfo[playerid][objCloseRX] = fRotX;
					objInfo[playerid][objCloseRY] = fRotY;
					objInfo[playerid][objCloseRZ] = fRotZ;
					objInfo[playerid][objVW] = GetPlayerVirtualWorld(playerid);
					objInfo[playerid][objInt] = GetPlayerInterior(playerid);
					tCreateGateStep[playerid] = 2;
					//Streamer_Update(playerid);
					EditPlayerObject(playerid, tCreateGateObjID[playerid]);
					SendClientMessage(playerid, -1, "[Gate System] Set where the gate should open.");
					return 1;
				} else if(tCreateGateStep[playerid] == 2)
				{			
					new i = -1;
					for(new g=0; g < MAX_GATES; g++)
					{
						if(!Iter_Contains(gateObjects, g)) {
							i=g;
							break;
						}
					}
					if(i == -1) return error(playerid, "Couldn't create gate, no open array-slots. Tell a developer.");	
					new query[424];						
					format(query, sizeof(query), "INSERT INTO `gates` (`Model`, `cPosX`, `cPosY`, `cPosZ`, `cPosRX`, `cPosRY`, `cPosRZ`, `oPosX`, `oPosY`, `oPosZ`, `oPosRX`, `oPosRY`, `oPosRZ`, `VW`, `Int`, `Password`, `Member`, `Rank`) VALUES(%d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d, %d, '%s', %d, %d)",
						tCreateGateObjModel[playerid],
						objInfo[playerid][objCloseX],
						objInfo[playerid][objCloseY],
						objInfo[playerid][objCloseZ],
						objInfo[playerid][objCloseRX],
						objInfo[playerid][objCloseRY],
						objInfo[playerid][objCloseRZ],				
						fX,
						fY,
						fZ,
						fRotX,
						fRotY,
						fRotZ,
						objInfo[playerid][objVW],
						objInfo[playerid][objInt],
						"",
						0,
						0
					);
					
					mysql_tquery(handlesql, query, "thread_CreateGate", "dd", playerid, i);					
					
					gateInfo[i][gateModel] = tCreateGateObjModel[playerid];
					gateInfo[i][gateClosePosX] = objInfo[playerid][objCloseX];
					gateInfo[i][gateClosePosY] = objInfo[playerid][objCloseY];
					gateInfo[i][gateClosePosZ] = objInfo[playerid][objCloseZ];
					gateInfo[i][gateClosePosRX] = objInfo[playerid][objCloseRX];
					gateInfo[i][gateClosePosRY] = objInfo[playerid][objCloseRY];
					gateInfo[i][gateClosePosRZ] = objInfo[playerid][objCloseRZ];
					gateInfo[i][gateOpenPosX] = fX;
					gateInfo[i][gateOpenPosY] = fY;
					gateInfo[i][gateOpenPosZ] = fZ;
					gateInfo[i][gateOpenPosRX] = fRotX;
					gateInfo[i][gateOpenPosRY] = fRotY;
					gateInfo[i][gateOpenPosRZ] = fRotZ;
					gateInfo[i][gateVW] = objInfo[playerid][objVW];
					gateInfo[i][gateInt] = objInfo[playerid][objInt];
					
					DestroyPlayerObject(playerid, tCreateGateObjID[playerid]);
					gateInfo[i][gateObjID] = CreateDynamicObject(gateInfo[i][gateModel], objInfo[playerid][objCloseX], objInfo[playerid][objCloseY], objInfo[playerid][objCloseZ], objInfo[playerid][objCloseRX], objInfo[playerid][objCloseRY], objInfo[playerid][objCloseRZ], objInfo[playerid][objVW], objInfo[playerid][objInt]);
					Iter_Add(gateObjects, i);
				
					for(new index; enumObjectInformation:index < enumObjectInformation; index++) objInfo[playerid][enumObjectInformation:index] = 0;
					tCreateGateObjID[playerid] = INVALID_OBJECT_ID;
					tCreateGateObjModel[playerid] = -1;
					tCreateGateStep[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Gate created! To add a password to it use: {FF9a02}/gatepass [password]. Use /gatehelp for more options.");
				}
			}
		}	
	} else {
		if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
		switch(GetPVarInt(playerid, "EditorMode"))
		{
			case EDITOR_MODE_HOUSEFURN_CREATE: // House furniture
			{
				if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
				TogglePlayerControllableEx(playerid, true);
				if(response == 1)
				{
					new key = FurnRight(playerid, 1), string[248];
					if(key == -1) return true;
					PlayerInfo[playerid][pFurn][0]=fX;
					PlayerInfo[playerid][pFurn][1]=fY;
					PlayerInfo[playerid][pFurn][2]=fZ;
					PlayerInfo[playerid][pFurnR][0]=fRotX;
					PlayerInfo[playerid][pFurnR][1]=fRotY;
					PlayerInfo[playerid][pFurnR][2]=fRotZ;
					format(string, 248, "Would you like to purchase this item?\n%s: - ID: %d\nPrice: $250", GetObjName(PlayerInfo[playerid][pFurnID]), PlayerInfo[playerid][pFurnID]);
					ShowPlayerDialog(playerid, 75, DIALOG_STYLE_MSGBOX,"Furniture Agreement", string, "Yes", "No");
				}
			}
			case EDITOR_MODE_HOUSEFURN_EDIT: // House furniture
			{
				if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
				TogglePlayerControllableEx(playerid, true);
				if(response == 1)
				{
					new key = FurnRight(playerid, 1), h = GetPVarInt(playerid, "FurnEditH");
					if(key == -1) return true;
					MoveDynamicObject(HouseInfo[key][hObject][h], fX, fY, fZ, 50.0, fRotX, fRotY, fRotZ);
					HouseInfo[key][hoX][h]=fX;
					HouseInfo[key][hoY][h]=fY;
					HouseInfo[key][hoZ][h]=fZ;
					HouseInfo[key][horX][h]=fRotX;
					HouseInfo[key][horY][h]=fRotY;
					HouseInfo[key][horZ][h]=fRotZ;
					SaveFurnObj(key, h);
				}
			}
			case EDITOR_MODE_BIZZFURN_CREATE: // Bizz furniture
			{
				if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
				TogglePlayerControllableEx(playerid, true);
				if(response == 1)
				{
					new key = FurnRight(playerid, 2), string[248];
					if(key == -1) return true;
					PlayerInfo[playerid][pFurn][0]=fX;
					PlayerInfo[playerid][pFurn][1]=fY;
					PlayerInfo[playerid][pFurn][2]=fZ;
					PlayerInfo[playerid][pFurnR][0]=fRotX;
					PlayerInfo[playerid][pFurnR][1]=fRotY;
					PlayerInfo[playerid][pFurnR][2]=fRotZ;
					format(string, 248, "Would you like to purchase this item?\n%s: - ID: %d\nPrice: $250", GetObjName(PlayerInfo[playerid][pFurnID]), PlayerInfo[playerid][pFurnID]);
					ShowPlayerDialog(playerid, 102, DIALOG_STYLE_MSGBOX,"Furniture Agreement", string, "Yes", "No");
				}
			}
			case EDITOR_MODE_BIZZFURN_EDIT: // Bizz furniture
			{
				if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
				TogglePlayerControllableEx(playerid, true);
				if(response == 1)
				{
					new key = FurnRight(playerid, 2), h = GetPVarInt(playerid, "FurnEditH");
					if(key == -1) return true;
					MoveDynamicObject(BizInfo[key][bObject][h], fX, fY, fZ, 50.0, fRotX, fRotY, fRotZ);
					BizInfo[key][boX][h]=fX;
					BizInfo[key][boY][h]=fY;
					BizInfo[key][boZ][h]=fZ;
					BizInfo[key][borX][h]=fRotX;
					BizInfo[key][borY][h]=fRotY;
					BizInfo[key][borZ][h]=fRotZ;
					SaveBizzObj(key, h);
				}
			}
			case EDITOR_MODE_ROADBLOCK:
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
					RoadBlocks++;
					RoadBlockObject[RoadBlocks]=CreateDynamicObject(GetPVarInt(playerid, "RBID"), fX, fY, fZ, fRotX, fRotY, fRotZ);
				}
			}
			case EDITOR_MODE_MAPFURN_CREATE: // Map editor
			{
				if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
				TogglePlayerControllableEx(playerid, true);
				if(response == 1) {
					PlayerInfo[playerid][pFurn][0]=fX;
					PlayerInfo[playerid][pFurn][1]=fY;
					PlayerInfo[playerid][pFurn][2]=fZ;
					PlayerInfo[playerid][pFurnR][0]=fRotX;
					PlayerInfo[playerid][pFurnR][1]=fRotY;
					PlayerInfo[playerid][pFurnR][2]=fRotZ;
					new string[128];
					format(string, 128, "Would you like to place this item?\n%s: - ID: %d", GetObjName(PlayerInfo[playerid][pFurnID]), PlayerInfo[playerid][pFurnID]);
					ShowPlayerDialog(playerid, 518, DIALOG_STYLE_MSGBOX,"Map Object Agreement", string, "Yes", "No");
				}
			}
			case EDITOR_MODE_MAPFURN_EDIT: // Map Editor
			{
				if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
				TogglePlayerControllableEx(playerid, true);
				if(response == 1) {
					new h = GetPVarInt(playerid, "FurnEditH");
					MoveDynamicObject(MapInfo[h][mObject], fX, fY, fZ, 50.0, fRotX, fRotY, fRotZ);
					MapInfo[h][mX]=fX;
					MapInfo[h][mY]=fY;
					MapInfo[h][mZ]=fZ;
					MapInfo[h][mrX]=fRotX;
					MapInfo[h][mrY]=fRotY;
					MapInfo[h][mrZ]=fRotZ;
					SaveMapObj(h);
				}
			}
			case EDITOR_MODE_VEHICLEFURN_CREATE: //Vehicle furn
			{
				if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
				TogglePlayerControllableEx(playerid, true);
				if(response == 1) {
					PlayerInfo[playerid][pFurn][0]=fX;
					PlayerInfo[playerid][pFurn][1]=fY;
					PlayerInfo[playerid][pFurn][2]=fZ;
					PlayerInfo[playerid][pFurnR][0]=fRotX;
					PlayerInfo[playerid][pFurnR][1]=fRotY;
					PlayerInfo[playerid][pFurnR][2]=fRotZ;
					new string[128], cost = 250;
					if(GetPVarInt(playerid, "MonthDon") > 0) { cost = 0; }
					if(IsNeonObject(PlayerInfo[playerid][pFurnID])) { cost = 2500; }					
					format(string, 128, "Would you like to purchase this item?\n%s: - ID: %d\nPrice: $%d", GetObjName(PlayerInfo[playerid][pFurnID]), PlayerInfo[playerid][pFurnID], cost);
					ShowPlayerDialog(playerid, DIALOG_VEHICLE_FURN_CREATE, DIALOG_STYLE_MSGBOX, "Furniture Agreement", string, "Yes", "No");
				} else {
					DeletePVar(playerid, "FurnVehicleID");
				}		
			}
			case EDITOR_MODE_VEHICLEFURN_EDIT: //Vehicle furn
			{
				if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));
				TogglePlayerControllableEx(playerid, true);
				new vehicleid = GetPVarInt(playerid, "FurnVehicleID");
				if(vehicleid == 0) {
					DeletePVar(playerid, "FurnVehicleID");
					DeletePVar(playerid, "FurnVehicleKey");
					return 1;
				}				
				new slot = GetPVarInt(playerid, "FurnVehicleKey");
				if(response == 1) {				
					if(VehicleInfo[vehicleid][voIndoor][slot] == 1) {
						VehicleInfo[vehicleid][voX][slot] = fX;
						VehicleInfo[vehicleid][voY][slot] = fY;
						VehicleInfo[vehicleid][voZ][slot] = fZ;
						VehicleInfo[vehicleid][vorZ][slot] = fRotZ;		
					} else { //Outside.
						new Float:offset[3];
						GetOffsetFromVehicle(fX, fY, fZ, vehicleid, offset[0], offset[1], offset[2]);
						new Float:vRotZ;
						GetVehicleZAngle(vehicleid, vRotZ);
						VehicleInfo[vehicleid][voX][slot] = offset[0];
						VehicleInfo[vehicleid][voY][slot] = offset[1];
						VehicleInfo[vehicleid][voZ][slot] = offset[2];
						VehicleInfo[vehicleid][vorZ][slot] = fRotZ-vRotZ;
					}
					VehicleInfo[vehicleid][vorX][slot] = fRotX;
					VehicleInfo[vehicleid][vorY][slot] = fRotY;								
					SaveVehObj(vehicleid, slot);		
					SendClientMessage(playerid, COLOR_WHITE, "Object position saved!");
				}
				CreateVehicleObject(vehicleid, slot);
				Streamer_Update(playerid);
				DeletePVar(playerid, "FurnVehicleID");
				DeletePVar(playerid, "FurnVehicleKey");				
			}
			case EDITOR_MODE_POLICESIREN : // Police Siren
			{
				if(GetPVarInt(playerid, "FurnObject") != 0) DestroyPlayerObject(playerid, GetPVarInt(playerid, "FurnObject"));

				if(response == 1)
				{
					if(!IsPlayerInAnyVehicle(playerid)) return 1;
					new vehicleid = GetPlayerVehicleID(playerid);

					new Float:ofx, Float:ofy, Float:ofz, Float:ofaz,
					Float:finalx, Float:finaly,
					Float:px, Float:py, Float:pz, Float:roz;
					GetVehiclePos(GetPlayerVehicleID(playerid), px, py, pz);
					GetVehicleZAngle(GetPlayerVehicleID(playerid), roz);

					ofx = fX-px;
					ofy = fY-py;
					ofz = fZ-pz;
					ofaz = fRotZ-roz;
					finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
					finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

					for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
					{
						if(VehicleInfo[vehicleid][vSirenObject][i] == 0)
						{
							VehicleInfo[vehicleid][vSirenObject][i] = GetPVarInt(playerid, "SirenModel");
							VehicleInfo[vehicleid][vSirenObjectID][i] = CreateDynamicObject(GetPVarInt(playerid, "SirenModel"), 0, 0, 0, 0.0, 0.0, 0.0);

							VehicleInfo[vehicleid][vSirenX][i] = finalx;
							VehicleInfo[vehicleid][vSirenY][i] = finaly;
							VehicleInfo[vehicleid][vSirenZ][i] = ofz;
							VehicleInfo[vehicleid][vSirenXr][i] = fRotX;
							VehicleInfo[vehicleid][vSirenYr][i] = fRotY;
							VehicleInfo[vehicleid][vSirenZr][i] = ofaz;

							AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vSirenObjectID][i], vehicleid, 
								VehicleInfo[vehicleid][vSirenX][i], VehicleInfo[vehicleid][vSirenY][i], VehicleInfo[vehicleid][vSirenZ][i], 
								VehicleInfo[vehicleid][vSirenXr][i], VehicleInfo[vehicleid][vSirenYr][i], VehicleInfo[vehicleid][vSirenZr][i]);

							SendClientMessage(playerid, COLOR_WHITE, "Siren added.");

							ShowPlayerDialog(playerid, DIALOG_SIREN_EDITOR, DIALOG_STYLE_LIST, "Siren Editor", "Add a siren\nRemove a siren", "Select","Exit");

							new Float:X, Float:Y, Float:Z;
							GetVehicleVelocity(vehicleid, X, Y, Z);
							if(X == 0 && Y == 0 && Z == 0)
							{
								SetVehicleVelocity(vehicleid, X, Y, Z + 0.01);
							}

							CarEngine(GetPlayerVehicleID(playerid), 1);
							break;
						}
					}
				}
			}
		}
		DeletePVar(playerid,"EditorMode");
		SetPVarInt(playerid, "Mute", 0);
	}
	return true;
}
//============================================//
stock EditCloseHouseObject(playerid, key)
{
	new string[128], furnitname[50], found = 0;
	furnitname="N/A";
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(HouseInfo[key][hObject][h] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
		    {
				SetPVarInt(playerid, "FurnEditKey", key);
				SetPVarInt(playerid, "FurnEditH", h);
				format(string, 128, "Edit Object: %s", GetObjName(HouseInfo[key][hoID][h]));
				ShowPlayerDialog(playerid, 76, DIALOG_STYLE_LIST, string, "Edit Object\nInput Position\nSelect Material\nReset Material\nRemove Object", "Select", "Close");
				found++;
				break;
		    }
        }
    }
	if(found == 0) SCM(playerid, COLOR_LIGHTRED, "ERROR: Can't find any object!");
    return 1;
}
//============================================//
stock GetCloseHouseObject(playerid,key)
{
	new furnitob[50], found = 0;
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(HouseInfo[key][hObject][h] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
		    {
                furnitob[found] = HouseInfo[key][hoID][h];
				found++;
		    }
        }
    }
	if(found == 0) {
		SCM(playerid, COLOR_LIGHTRED, "ERROR: Can't find any object!");
	} else ShowModelSelectionMenuEx(playerid, furnitob, found, "Select item", 3, 16.0, 0.0, -55.0);
    return 1;
}
//============================================//
stock GetCloseMapObject(playerid)
{
	new furnitob[50], found = 0;
    for(new h = 0; h < MAX_MAP_OBJ; h++)
    {
        if(MapInfo[h][mObject] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, MapInfo[h][mX], MapInfo[h][mY], MapInfo[h][mZ]))
		    {
                furnitob[found] = MapInfo[h][mID];
				found++;
		    }
        }
    }
	if(found == 0) {
		SCM(playerid, COLOR_LIGHTRED, "ERROR: Can't find any object!");
	} else ShowModelSelectionMenuEx(playerid, furnitob, found, "Select item", 11, 16.0, 0.0, -55.0);
    return 1;
}
//============================================//
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(GetPVarInt(playerid, "EditorMode") != 15)
	{
		if(ToyInfo[playerid][index][tModel] == 0) //Is previewing it
		{
			ShowPlayerDialog(playerid, 295, DIALOG_STYLE_MSGBOX, "Buying item", "Would you like to buy this item?", "Buy","Cancel");
			SetPVarFloat(playerid, "ToyoX", fOffsetX);
			SetPVarFloat(playerid, "ToyoY", fOffsetY);
			SetPVarFloat(playerid, "ToyoZ", fOffsetZ);
			SetPVarFloat(playerid, "ToyrX", fRotX);
			SetPVarFloat(playerid, "ToyrY", fRotY);
			SetPVarFloat(playerid, "ToyrZ", fRotZ);
			SetPVarFloat(playerid, "ToysX", fScaleX);
			SetPVarFloat(playerid, "ToysY", fScaleY);
			SetPVarFloat(playerid, "ToysZ", fScaleZ);

			ToyInfo[playerid][index][toX] = fOffsetX;
			ToyInfo[playerid][index][toY] = fOffsetY;
			ToyInfo[playerid][index][toZ] = fOffsetZ;

			ToyInfo[playerid][index][trX] = fRotX;
			ToyInfo[playerid][index][trY] = fRotY;
			ToyInfo[playerid][index][trZ] = fRotZ;

			ToyInfo[playerid][index][tsX] = fScaleX;
			ToyInfo[playerid][index][tsY] = fScaleY;
			ToyInfo[playerid][index][tsZ] = fScaleZ;
		}
		else //Already bought it and is editting it.
		{
			SetPVarFloat(playerid, "ToyoX", fOffsetX);
			SetPVarFloat(playerid, "ToyoY", fOffsetY);
			SetPVarFloat(playerid, "ToyoZ", fOffsetZ);
			SetPVarFloat(playerid, "ToyrX", fRotX);
			SetPVarFloat(playerid, "ToyrY", fRotY);
			SetPVarFloat(playerid, "ToyrZ", fRotZ);
			SetPVarFloat(playerid, "ToysX", fScaleX);
			SetPVarFloat(playerid, "ToysY", fScaleY);
			SetPVarFloat(playerid, "ToysZ", fScaleZ);
			
			ToyInfo[playerid][index][toX] = fOffsetX;
			ToyInfo[playerid][index][toY] = fOffsetY;
			ToyInfo[playerid][index][toZ] = fOffsetZ;
			
			ToyInfo[playerid][index][trX] = fRotX;
			ToyInfo[playerid][index][trY] = fRotY;
			ToyInfo[playerid][index][trZ] = fRotZ;
			
			ToyInfo[playerid][index][tsX] = fScaleX;
			ToyInfo[playerid][index][tsY] = fScaleY;
			ToyInfo[playerid][index][tsZ] = fScaleZ;
			
			SaveToys(playerid);
			if(IsPlayerAttachedObjectSlotUsed(playerid,index)) {
				RemovePlayerAttachedObject(playerid, index);
			}
			if(IsValidClothing(modelid)) SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ,ARGBColors[ToyInfo[playerid][index][tColor]][Hex],ARGBColors[ToyInfo[playerid][index][tColor2]][Hex]);
		}
	} else {
	    RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN2);
	    RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN1);

		new wpnid = PlayerInfo[playerid][pPlayerWeapon];
		SetTimerEx("LoadHolsters", 2000, false, "i", playerid);
		if(wpnid == 0) return scm(playerid, -1, "You need the weapon equipped!");

		scm(playerid, -1, "Holster set.");
		if(HolsterInfo[playerid][wpnid][hBone] == 0)
		{
		    HolsterInfo[playerid][wpnid][hBone] = 1;
		}
	    HolsterInfo[playerid][wpnid][hoX] = fOffsetX;
     	HolsterInfo[playerid][wpnid][hoY] = fOffsetY;
     	HolsterInfo[playerid][wpnid][hoZ] = fOffsetZ;
     	HolsterInfo[playerid][wpnid][hrX] = fRotX;
     	HolsterInfo[playerid][wpnid][hrY] = fRotY;
        HolsterInfo[playerid][wpnid][hrZ] = fRotZ;
        DeletePVar(playerid, "EditorMode");
        SaveHolster(playerid);	
	}
	return 1;
}
//============================================//
forward LoadToys(playerid);
public LoadToys(playerid)
{
	new rows = cache_get_row_count();
	for(new i = 0; i < 5; i++) {
		ToyInfo[playerid][i][tModel] = 0;
		if(i < rows) {
                new indexid = cache_get_field_content_int(i, "indexID");
				if(IsPlayerAttachedObjectSlotUsed(playerid, indexid)) { RemovePlayerAttachedObject(playerid, indexid); }				
                ToyInfo[playerid][indexid][tID] = indexid;

		        ToyInfo[playerid][indexid][tBone] = cache_get_field_content_int(i, "bone");
                ToyInfo[playerid][indexid][tModel] = cache_get_field_content_int(i, "modelid");

				ToyInfo[playerid][indexid][toX] = cache_get_field_content_float(i, "OffSetX");
    			ToyInfo[playerid][indexid][toY] = cache_get_field_content_float(i, "OffSetY");
    			ToyInfo[playerid][indexid][toZ] = cache_get_field_content_float(i, "OffSetZ");

    			ToyInfo[playerid][indexid][trX] = cache_get_field_content_float(i, "RotX");
    			ToyInfo[playerid][indexid][trY] = cache_get_field_content_float(i, "RotY");
    			ToyInfo[playerid][indexid][trZ] = cache_get_field_content_float(i, "RotZ");
    			
    			ToyInfo[playerid][indexid][tsX] = cache_get_field_content_float(i, "ScaleX");
    			ToyInfo[playerid][indexid][tsY] = cache_get_field_content_float(i, "ScaleY");
    			ToyInfo[playerid][indexid][tsZ] = cache_get_field_content_float(i, "ScaleZ");
				
				ToyInfo[playerid][indexid][tColor] = cache_get_field_content_int(i, "Color");
				ToyInfo[playerid][indexid][tColor2] = cache_get_field_content_int(i, "Color2");
				
				if(cache_get_field_content_int(i, "Equipped") != 0 && IsValidClothing(ToyInfo[playerid][indexid][tModel])) {
				    SetPlayerAttachedObject(playerid, indexid, ToyInfo[playerid][indexid][tModel],ToyInfo[playerid][indexid][tBone],
					ToyInfo[playerid][indexid][toX], ToyInfo[playerid][indexid][toY], ToyInfo[playerid][indexid][toZ],
					ToyInfo[playerid][indexid][trX], ToyInfo[playerid][indexid][trY], ToyInfo[playerid][indexid][trZ],
				 	ToyInfo[playerid][indexid][tsX], ToyInfo[playerid][indexid][tsY], ToyInfo[playerid][indexid][tsZ],
					ARGBColors[ToyInfo[playerid][indexid][tColor]][Hex], ARGBColors[ToyInfo[playerid][indexid][tColor2]][Hex]);
				}			
		}
	}
	return 1;
}
//============================================//
forward SaveToys(playerid);
public SaveToys(playerid)
{
	new query[348];
	for(new i = 0; i < 5; i++) {
		if(IsValidClothing(ToyInfo[playerid][i][tModel])) {
			new equipped = 0;
			if(IsPlayerAttachedObjectSlotUsed(playerid, i)) { equipped = 1; }
			mysql_format(handlesql, query, sizeof(query), "UPDATE toys SET bone=%d, modelid=%d, OffSetX=%f, OffSetY=%f, OffSetZ=%f, RotX=%f, RotY=%f, RotZ=%f, ScaleX=%f, ScaleY=%f, ScaleZ=%f, Color=%i, Color2=%i, Equipped=%i WHERE PlayerName='%s' AND indexID=%d",
			ToyInfo[playerid][i][tBone],ToyInfo[playerid][i][tModel],
			ToyInfo[playerid][i][toX],ToyInfo[playerid][i][toY],ToyInfo[playerid][i][toZ],
			ToyInfo[playerid][i][trX],ToyInfo[playerid][i][trY],ToyInfo[playerid][i][trZ],
			ToyInfo[playerid][i][tsX],ToyInfo[playerid][i][tsY],ToyInfo[playerid][i][tsZ],
			ToyInfo[playerid][i][tColor],ToyInfo[playerid][i][tColor2],equipped,PlayerInfo[playerid][pUsername],i);
			mysql_tquery(handlesql, query);
		}
	}
	return 1;
}
//============================================//
forward EndBlackScreen(playerid);
public EndBlackScreen(playerid)
{
    if(GetPVarInt(playerid, "Blinded") == 0) TextDrawHideForPlayer(playerid,BlindDraw), DeletePVar(playerid, "BlackScreen");
	return true;
}
//============================================//
forward LoadHolsters(playerid);
public LoadHolsters(playerid)
{
	if(GetPVarInt(playerid, "Backpack") == 1) {
		if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
		SetPlayerAttachedObject(playerid, 6, 371, 1, 0.0, -0.14, 0.0, 0.0, 90, 359.5022, 1, 1, 1);
		return true;
	}
	new weaponid = -1;
	for(new p = 0; p < MAX_INV_SLOTS; p++)
	{
		if(PlayerInfo[playerid][pInvItem][p] >= 25 && PlayerInfo[playerid][pInvItem][p] <= 34)
		{
			weaponid = PlayerInfo[playerid][pInvItem][p];
			break;
		}
	}
	if(weaponid != -1)
	{
	    if(HolsterInfo[playerid][weaponid][hoX] != 0.0) {
	        if(HolsterInfo[playerid][weaponid][hBone] != -1) SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN2, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ], HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
	    } else {
	    	HolsterInfo[playerid][weaponid][hBone] = 1;
	    	HolsterInfo[playerid][weaponid][hoX] = 0.139415;
	    	HolsterInfo[playerid][weaponid][hoY] = -0.167970;
	    	HolsterInfo[playerid][weaponid][hoZ] = 0.120848;
	    	HolsterInfo[playerid][weaponid][hrX] = 0.000000;
	    	HolsterInfo[playerid][weaponid][hrY] = 152.342666;
	    	HolsterInfo[playerid][weaponid][hrZ] = 0.000000;

	        SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN2, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ], HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
	    }
	} else {
	    if(IsPlayerAttachedObjectSlotUsed(playerid, HOLDOBJECT_GUN2)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_GUN2);
	}
	//==========//
	// SECONDARY WEAPON //
	weaponid = -1;
	for(new p = 0; p < MAX_INV_SLOTS; p++)
	{
		if(PlayerInfo[playerid][pInvItem][p] >= 22 && PlayerInfo[playerid][pInvItem][p] <= 24)
		{
			weaponid=PlayerInfo[playerid][pInvItem][p];
			break;
		}
	}
	if(weaponid != -1 && GetPVarInt(playerid, "SecHol") != 0)
	{
		if(HolsterInfo[playerid][weaponid][hoX] != 0.0) {
			if(HolsterInfo[playerid][weaponid][hBone] != -1) SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN1, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ], HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
		} else {
			HolsterInfo[playerid][weaponid][hBone] = 8;
			HolsterInfo[playerid][weaponid][hoX] = -0.044177;
			HolsterInfo[playerid][weaponid][hoY] = 0.000000;
			HolsterInfo[playerid][weaponid][hoZ] = 0.092454;
			HolsterInfo[playerid][weaponid][hrX] = 246.994583;
			HolsterInfo[playerid][weaponid][hrY] = 0.000000;
			HolsterInfo[playerid][weaponid][hrZ] = 0.000000;
			
			SetPlayerAttachedObject(playerid, HOLDOBJECT_GUN1, GunobjectIds[weaponid], HolsterInfo[playerid][weaponid][hBone], HolsterInfo[playerid][weaponid][hoX], HolsterInfo[playerid][weaponid][hoY], HolsterInfo[playerid][weaponid][hoZ], HolsterInfo[playerid][weaponid][hrX], HolsterInfo[playerid][weaponid][hrY], HolsterInfo[playerid][weaponid][hrZ]);
		}
	} else {
	    if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
	}
	//==========//
	return true;
}
//============================================//
stock GetAreaZone(Float:x,Float:y,Float:z)
{
	for(new i=0;i<sizeof(Zones);i++)
	{
		if(x > Zones[i][zone_minx] && y > Zones[i][zone_miny] && z > Zones[i][zone_minz] && x < Zones[i][zone_maxx] && y < Zones[i][zone_maxy] && z < Zones[i][zone_maxz])
		return i;
	}
	return false;
}
//============================================//
stock GetZoneArea(Float:x,Float:y,Float:z)
{
	new str[130];
	format(str,sizeof(str),"%s",Zones[GetAreaZone(x,y,z)][zone_name]);
	return str;
}
//============================================//
stock SetPlayerPosEx(playerid, Float:x,Float:y,Float:z)
{
    PlayerInfo[playerid][pPos][0]=x;
    PlayerInfo[playerid][pPos][1]=y;
    PlayerInfo[playerid][pPos][2]=z;
    return SetPlayerPos(playerid, x, y, z);
}
//============================================//
stock SetVehiclePosEx(vehicleid, Float:x,Float:y,Float:z)
{
    foreach(new i : Player)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid)
            {
                PlayerInfo[i][pPos][0]=x;
                PlayerInfo[i][pPos][1]=y;
                PlayerInfo[i][pPos][2]=z;
            }
        }
    }
    return SetVehiclePos(vehicleid, x, y, z);
}
//============================================//
forward GiveMoneyPlayer(playerid, amount);
public GiveMoneyPlayer(playerid, amount)
{
	GivePlayerMoneyEx(playerid, amount);
	return true;
}
//============================================//
forward GetHouseClass(Float:x, Float:y, Float:z);
public GetHouseClass(Float:x, Float:y, Float:z)
{
	new count = 0;
	for(new i = 0; i < sizeof(HouseCor); i++)
	{
	    if(count == 0)
	    {
			if(HouseCor[i][mbX] == x && HouseCor[i][mbY] == y && HouseCor[i][mbZ] == z)
			{
			    count = HouseCor[i][Class];
			}
	    }
	}
	if(count == 0) count = 2;
	return count;
}
//============================================//
stock GetHouseClassName(classid)
{
	new text[30];
	if(classid == 0) format(text, sizeof(text), "%s","No class");
	if(classid == 1) format(text, sizeof(text), "%s","Small");
	if(classid == 2) format(text, sizeof(text), "%s","Medium");
	if(classid == 3) format(text, sizeof(text), "%s","Big");
	if(classid == 4) format(text, sizeof(text), "%s","Mansion");
	return text;
}
//============================================//
forward LotteryCheck(playerid,type, number);
public LotteryCheck(playerid,type, number)
{
    new fields, rows, fetch[100], query[500];
	new text[120];
    if(type == 1) //buying tickets
    {
	    cache_get_data(rows, fields);
	    if(!rows)
	    {
			format(query, sizeof(query), "INSERT INTO lottery (`Name`, `Number`, `Active`, `Win`) VALUES ('%s',%d, 1, 0)", PlayerName(playerid), number);
			mysql_tquery(handlesql, query);
			SCM(playerid, -1, "Lottery ticket has been bought! Good luck!");
	    }
	    else
	    {
	        error(playerid, "This number is already taken for the current lottery.");
	        ShowPlayerDialog(playerid, 418, DIALOG_STYLE_INPUT, "Lottery ticket", "What number would you like your ticket to be? \nInsert any number between 1-500", "Buy","");
	    }
	}
	if(type == 2) //Selecting winner at midnight.
	{
	    cache_get_data(rows, fields);
	    if(rows) //There's a winner
	    {
	        format(query, sizeof(query), "SELECT * FROM lottery WHERE Active=1 OR Active=2");
	      	mysql_tquery(handlesql, query, "LotteryCheck", "iii", -1, 3, number);
	      	format(query, sizeof(query), "UPDATE lottery SET Win=1 WHERE Number=%d", number);
	      	mysql_tquery(handlesql, query);
	    }
		else //No winner
		{
		    format(text, sizeof(text), "* [Lottery] The winning number is (%d), nobody has won this draw. *", number);
		    SendClientMessageToAll(0x458E1DAA, text);
		    format(query, sizeof(query), "UPDATE lottery SET Active = 2 WHERE Active = 1");
		    mysql_tquery(handlesql, query);
		}
	}
	if(type == 3) //If winner is found.
	{
	    cache_get_data(rows, fields);
        cache_get_field_content(0, "Name", fetch);
        new price = rows*90;
        new name[24];
        new count = 0;
		foreach(new i : Player)
		{
		    GetPlayerName(i, name, 24);
	     	if(strcmp(name, fetch, true) == 0) //Player is online
	     	{
	     	    count++;
	     	    GivePlayerMoneyEx(playerid,price);
	     	}
		}
		if(count == 0) //Player is offline
		{
			format(query, sizeof(query),"SELECT * FROM accounts WHERE Name='%s'", fetch);
			mysql_tquery(handlesql, query, "LotteryCheck", "iii", -1, 4, price);
		}
	    format(text, sizeof(text), "* [Lottery] The winning number is (%d), [%s] is the winner. *", number, fetch);
	    SendClientMessageToAll(0x458E1DAA, text);
	    format(text, sizeof(text), "* [Lottery] The jackpot was set at ($%d) *", price);
	    SendClientMessageToAll(0x458E1DAA, text);
	    format(query, sizeof(query), "UPDATE lottery SET Active = 2 WHERE Active = 1");
	    mysql_tquery(handlesql, query);
	}
	if(type == 4) //Winner is found but offline
	{
	    cache_get_data(rows, fields);
	    cache_get_field_content(0, "Cash", fetch);
	    new money = strval(fetch);
	    cache_get_field_content(0, "Name", fetch);
	    money = money + (rows*90);
	    format(query, sizeof(query),"UPDATE accounts SET Cash=%d WHERE Name='%s'",money, fetch);
	    mysql_tquery(handlesql, query);
	}
	return 1;
}
//============================================//
forward PCRPlayer(playerid,type);
public PCRPlayer(playerid,type)
{
    new fields, rows, str[128], fetch[500], diatxt[2056];
	new temptxt[64], tmpid;
    if(type == 1)
    {
	    cache_get_data(rows, fields);
	    if(rows)
	    {
	        format(diatxt, sizeof(diatxt), "%s{CCCCCC}(Click to add new medical file)\n",diatxt);
	        for(new i = 0; i < rows; i++)
	        {
		        cache_get_field_content(i, "title", fetch);
		        if(strlen(fetch) > 0)
		        {
		            cache_get_field_content(i, "critic", fetch);
		            tmpid = strval(fetch);
		            //{33A0FF}Check-up{33FF66}Casual\n{FFCC33}Normal\n{FF0000}Severe
		            switch(tmpid)
		            {
		                case 0: //Checkup
		                {
		                    format(temptxt, sizeof(temptxt), "{33A0FF}Check-up");
		                }
		                case 1: //Casual
		                {
		                    format(temptxt, sizeof(temptxt), "{33FF66}Casual");
		                }
		                case 2: //Normal
		                {
		                    format(temptxt, sizeof(temptxt), "{FFCC33}Normal");
		                }
		                case 3: //Severe
		                {
		                    format(temptxt, sizeof(temptxt), "{FF0000}Severe");
		                }
		            }
		            cache_get_field_content(i, "title", fetch);
			        format(diatxt, sizeof(diatxt), "%s{33FF66}File: {FFFFFF}%s [%s]{CCCCCC}(Click for more information)\n",diatxt, fetch,temptxt);
			        //Seting info for player to view on dialog.
			        cache_get_field_content(i, "time", fetch);
		            format(MDCinfo[playerid][i][mTime], 64, "%s", fetch);

		            cache_get_field_content(i, "player", fetch);
		            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);

		            cache_get_field_content(i, "medic", fetch);
		            format(MDCinfo[playerid][i][mSuspect], 64, "%s", fetch);
				}
			}
	    }
	    else
	    {
			format(diatxt, sizeof(diatxt), "%s{CCCCCC}(Click to add new medical file)\n",diatxt);
	        format(MDCinfo[playerid][0][mTime], 64, "99:99:99");
		}
	 	ShowPlayerDialog(playerid, 413, DIALOG_STYLE_LIST, "Patient Care Report", diatxt, "Select", "Back");
	}
	if(type == 2)
	{
	    cache_get_data(rows, fields);
	    if(!rows) return error(playerid, "Invalid record selected.");
		cache_get_field_content(0, "player", fetch);
	    format(diatxt, sizeof(diatxt), "%s{33FF66}Name: {FFFFFF}%s\n",diatxt, fetch);
		cache_get_field_content(0, "medic", fetch);
	    format(diatxt, sizeof(diatxt), "%s{33FF66}Person in charge: {FFFFFF}%s\n",diatxt, fetch);
	   	cache_get_field_content(0, "date", fetch);
	    format(diatxt, sizeof(diatxt), "%s{33FF66}Date: {FFFFFF}%s\n",diatxt, fetch);
	   	cache_get_field_content(0, "time", fetch);
	    format(diatxt, sizeof(diatxt), "%s{33FF66}Time: {FFFFFF}%s\n",diatxt, fetch);
        cache_get_field_content(0, "critic", fetch);
        tmpid = strval(fetch);
        //{33A0FF}Check-up{33FF66}Casual\n{FFCC33}Normal\n{FF0000}Severe
        switch(tmpid)
        {
            case 0: //Checkup
            {
                format(temptxt, sizeof(temptxt), "{33A0FF}Check-up");
            }
            case 1: //Casual
            {
                format(temptxt, sizeof(temptxt), "{33FF66}Casual");
            }
            case 2: //Normal
            {
                format(temptxt, sizeof(temptxt), "{FFCC33}Normal");
            }
            case 3: //Severe
            {
                format(temptxt, sizeof(temptxt), "{FF0000}Severe");
            }
        }
        format(diatxt, sizeof(diatxt), "%s{33FF66}Severity: {FFFFFF}%s\n",diatxt, temptxt);
	 	cache_get_field_content(0, "text", fetch);
		if(strlen(fetch) < 400)
		{
			format(diatxt, sizeof(diatxt), "%s{33FF66}Text: {FFFFFF}%s\n",diatxt, fetch);
		}
		else
		{
			new len = strlen(fetch);
			new found = 0;
			for(new i = 1; i < 5; i++)
			{
			    if(found == 0)
			    {
				    len = len - 40;
				    if(len < 0)
					{
						found = i;
					}
				}
			}
			format(diatxt, sizeof(diatxt), "%s{33FF66}Text: ",diatxt);
			for(new i = 1; i < found; i++)
			{
				new maxl = 40 * i;
				new minl = (40 * 1) - 40;
		        new pos = maxl;
		        while(fetch[--pos] > ' ') {}
		        if(pos < minl) pos = maxl;
		        format(str, sizeof(str), "%.*s\n", pos, fetch[minl]);
				format(diatxt, sizeof(diatxt), "%s{FFFFFF}%s",diatxt, str);
			}
		}
		cache_get_field_content(0, "title", fetch);
	    format(temptxt, 64, "{33FF66}Summary: {FFFFFF}%s",fetch);
		ShowPlayerDialog(playerid, 417, DIALOG_STYLE_MSGBOX, temptxt, diatxt, "Back", "");
	}
	return 1;
}
//============================================//
forward UpdateVehicleNames(vehicleID);
public UpdateVehicleNames(vehicleID) {
    if(cache_get_row_count() > 0) {
	    cache_get_field_content(0, "Owner", VehicleInfo[vehicleID][vOwner], handlesql, MAX_PLAYER_NAME);
	}
}
//============================================//
forward UpdateBizNames(i);
public UpdateBizNames(i)
{
    new fields, rows, fetch[40];
    cache_get_data(rows, fields);
    if(rows)
    {
	    cache_get_field_content(0, "Owner", fetch);
	    format(BizInfo[i][Owner], 24, "%s", fetch);
	}
	return 1;
}
//============================================//
forward UpdateHouseNames(i);
public UpdateHouseNames(i)
{
    new fields, rows, fetch[40];
    cache_get_data(rows, fields);
    if(rows)
    {
	    cache_get_field_content(0, "Owner", fetch);
	    format(HouseInfo[i][hOwner], 24, "%s", fetch);
	}
	return 1;
}

forward FixItems(playerid);
public FixItems(playerid)
{
	new id;
	id = GetPVarInt(playerid, "HouseKey");
	if(id !=0) format(HouseInfo[id][hOwner], 24, "%s", PlayerName(playerid));
	SaveHouse(id);
	
	id = GetPVarInt(playerid, "BizzKey");
	if(id !=0) format(BizInfo[id][Owner], 24, "%s", PlayerName(playerid));
	SaveBiz(id);
	return 1;
}
//============================================//
forward SelectSpawnpoint(playerid);
public SelectSpawnpoint(playerid)
{
    new option[5], listitem = GetPVarInt(playerid,"SSP"), key;
    option[0]=1;
    if(GetPVarInt(playerid,"HouseKey") != 0) option[1]=1;
	if(GetPVarInt(playerid,"BizzKey") != 0) option[2]=1;
	if(GetPVarInt(playerid,"Member") == 1 || GetPVarInt(playerid,"Member") == 2 || GetPVarInt(playerid,"Member") == 8) option[3]=1;
	for(new i = 1; i < 4; i++)
	{
		if(listitem == i && option[i] == 0)
		{
			listitem=i+1;
		}
	}
	if(listitem > 3) listitem=0;
	switch(listitem)
	{
	    case 0: // Last Location
		{
		    TextDrawShowForPlayer(playerid, SpawnDraw[0]);
            TextDrawHideForPlayer(playerid, SpawnDraw[1]);
            TextDrawHideForPlayer(playerid, SpawnDraw[2]);
            TextDrawHideForPlayer(playerid, SpawnDraw[3]);
		    SetPlayerCameraPos(playerid, GetPVarFloat(playerid, "PosX"), GetPVarFloat(playerid, "PosY"), GetPVarFloat(playerid, "PosZ")+25.0);
		    SetPlayerCameraLookAt(playerid, GetPVarFloat(playerid, "PosX"), GetPVarFloat(playerid, "PosY"), GetPVarFloat(playerid, "PosZ"));
            SetPlayerInterior(playerid, GetPVarInt(playerid, "Interior"));
	        SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "World"));
		    SetPVarInt(playerid, "SSP", listitem+1);
			
			Streamer_Update(playerid);
		}
		case 1: // Property
		{
		    TextDrawHideForPlayer(playerid, SpawnDraw[0]);
            TextDrawShowForPlayer(playerid, SpawnDraw[1]);
            TextDrawHideForPlayer(playerid, SpawnDraw[2]);
            TextDrawHideForPlayer(playerid, SpawnDraw[3]);
		    key = GetPVarInt(playerid,"HouseKey");
			SetPlayerCameraPos(playerid, HouseInfo[key][hXo], HouseInfo[key][hYo], HouseInfo[key][hZo]+50.0);
		    SetPlayerCameraLookAt(playerid,HouseInfo[key][hXo], HouseInfo[key][hYo], HouseInfo[key][hZo]);
			SetPlayerInterior(playerid, HouseInfo[key][hIntOut]);
	        SetPlayerVirtualWorld(playerid, HouseInfo[key][hVwOut]);
			SetPVarInt(playerid, "SSP", listitem+1);
			
			Streamer_Update(playerid);
		}
		case 2: // Business
		{
		    TextDrawHideForPlayer(playerid, SpawnDraw[0]);
            TextDrawHideForPlayer(playerid, SpawnDraw[1]);
            TextDrawShowForPlayer(playerid, SpawnDraw[2]);
            TextDrawHideForPlayer(playerid, SpawnDraw[3]);
		    key = GetPVarInt(playerid,"BizzKey");
            SetPlayerCameraPos(playerid, BizInfo[key][Xo], BizInfo[key][Yo], BizInfo[key][Zo]+50.0);
		    SetPlayerCameraLookAt(playerid,BizInfo[key][Xo], BizInfo[key][Yo], BizInfo[key][Zo]);
			SetPlayerInterior(playerid, BizInfo[key][IntOut]);
	        SetPlayerVirtualWorld(playerid, 0);
			SetPVarInt(playerid, "SSP", listitem+1);
			
			Streamer_Update(playerid);
		}
		case 3:
		{
		    SetPVarInt(playerid, "SSP", listitem+1);
		    switch(GetPVarInt(playerid,"Member"))
			{
			    case 1: // LSPD
			    {
			        TextDrawHideForPlayer(playerid, SpawnDraw[0]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[1]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[2]);
                    TextDrawShowForPlayer(playerid, SpawnDraw[3]);
			        SetPlayerCameraPos(playerid, 1513.6908,-1676.3589,31.4003);
		            SetPlayerCameraLookAt(playerid, 1553.6469,-1675.6169,16.1953);
			        SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);
					
					Streamer_Update(playerid);
			    }
			    case 2: // LSFD
			    {
			        TextDrawHideForPlayer(playerid, SpawnDraw[0]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[1]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[2]);
                    TextDrawShowForPlayer(playerid, SpawnDraw[3]);
			        SetPlayerCameraPos(playerid, 1219.1266,-1322.5055,27.7507);
		            SetPlayerCameraLookAt(playerid, 1175.9971,-1324.2395,19.4422);
			        SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);
					
					Streamer_Update(playerid);
			    }
			    case 8: // GOV
			    {
			        TextDrawHideForPlayer(playerid, SpawnDraw[0]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[1]);
                    TextDrawHideForPlayer(playerid, SpawnDraw[2]);
                    TextDrawShowForPlayer(playerid, SpawnDraw[3]);
			        SetPlayerCameraPos(playerid, 1481.8411,-1719.9417,32.7127);
		            SetPlayerCameraLookAt(playerid, 1481.1187,-1770.7849,18.7958);
			        SetPlayerInterior(playerid, 0);
	                SetPlayerVirtualWorld(playerid, 0);
					
					Streamer_Update(playerid);
			    }
		    }
	    }
	}
	return 1;
}
//============================================//
forward LoadFurn(id);
public LoadFurn(id)
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
		for(new i = 0; i < MAX_HOUSE_OBJ; i++)
		{
			if(i < cache_get_row_count())
			{
				HouseInfo[id][hoDBID][i] = cache_get_field_content_int(i, "ID");
				HouseInfo[id][hoID][i] = cache_get_field_content_int(i, "Model");
				HouseInfo[id][hoX][i] = cache_get_field_content_float(i, "PosX");
				HouseInfo[id][hoY][i] = cache_get_field_content_float(i, "PosY");
				HouseInfo[id][hoZ][i] = cache_get_field_content_float(i, "PosZ");
				HouseInfo[id][horX][i] = cache_get_field_content_float(i, "AngX");
				HouseInfo[id][horY][i] = cache_get_field_content_float(i, "AngY");
				HouseInfo[id][horZ][i] = cache_get_field_content_float(i, "AngZ");
				HouseInfo[id][hoInt][i] = cache_get_field_content_int(i, "Interior");
				HouseInfo[id][Locked][i] = cache_get_field_content_int(i, "Locked");

				if(IsHouseOutdoorObject(id, i)) {
					if(outdoor_furn == 0) { continue; }
					HouseInfo[id][hObject][i] = CreateDynamicObject(HouseInfo[id][hoID][i], HouseInfo[id][hoX][i], HouseInfo[id][hoY][i], HouseInfo[id][hoZ][i], HouseInfo[id][horX][i], HouseInfo[id][horY][i], HouseInfo[id][horZ][i], HouseInfo[id][hVwOut], HouseInfo[id][hoInt][i], -1, 100);
				} else HouseInfo[id][hObject][i] = CreateDynamicObject(HouseInfo[id][hoID][i], HouseInfo[id][hoX][i], HouseInfo[id][hoY][i], HouseInfo[id][hoZ][i], HouseInfo[id][horX][i], HouseInfo[id][horY][i], HouseInfo[id][horZ][i], id, HouseInfo[id][hoInt][i], -1, 100);

				new toget[7];
				for(new v=0; v < 13; v++) {
					format(toget,7,"Layer%d",v);
					new res = cache_get_field_content_int(i, toget);
					HouseMInfo[id][i][v] = res;
					if(res != 0) {
						ChangeDynamicObjectMaterial(HouseInfo[id][hObject][i], v, res);
					}
				}
			}
		}
    }
	return 1;
}
//============================================//
stock SaveFurnObj(id, furnid)
{
	if(HouseInfo[id][hoID][furnid] != 0) //Skip this index if it's blank, why would we bother?
	{
		new query[516];
		mysql_format(handlesql, query, sizeof(query), "UPDATE `housefurn` SET Model=%d,PosX=%f,PosY=%f,PosZ=%f,AngX=%f,AngY=%f,AngZ=%f,Interior=%d,Locked=%d,Layer0=%d,Layer1=%d,Layer2=%d,Layer3=%d,Layer4=%d,Layer5=%d,Layer6=%d,Layer7=%d,Layer8=%d,Layer9=%d,Layer10=%d,Layer11=%d,Layer12=%d WHERE ID=%d",
		HouseInfo[id][hoID][furnid],
		HouseInfo[id][hoX][furnid],
		HouseInfo[id][hoY][furnid],
		HouseInfo[id][hoZ][furnid],
		HouseInfo[id][horX][furnid],
		HouseInfo[id][horY][furnid],
		HouseInfo[id][horZ][furnid],
		HouseInfo[id][hoInt][furnid],
		HouseInfo[id][Locked][furnid],
		HouseMInfo[id][furnid][0],
		HouseMInfo[id][furnid][1],
		HouseMInfo[id][furnid][2],
		HouseMInfo[id][furnid][3],
		HouseMInfo[id][furnid][4],
		HouseMInfo[id][furnid][5],
		HouseMInfo[id][furnid][6],
		HouseMInfo[id][furnid][7],
		HouseMInfo[id][furnid][8],
		HouseMInfo[id][furnid][9],
		HouseMInfo[id][furnid][10],
		HouseMInfo[id][furnid][11],
		HouseMInfo[id][furnid][12],
		HouseInfo[id][hoDBID][furnid]);
		mysql_tquery(handlesql, query);
	} else {
		new query[84];
	    mysql_format(handlesql, query, sizeof(query), "DELETE FROM `housefurn` WHERE `HID`=%d AND `ID`=%d", HouseInfo[id][hID], HouseInfo[id][hoDBID][furnid]);
		mysql_tquery(handlesql, query);
	}
    return 1;
}
//============================================//
forward LoadBizzFurn(id);
public LoadBizzFurn(id)
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
		for(new i = 0; i < MAX_HOUSE_OBJ; i++)
		{
			if(i < cache_get_row_count())
			{
				BizInfo[id][boDBID][i] = cache_get_field_content_int(i, "ID");
				BizInfo[id][boID][i] = cache_get_field_content_int(i, "Model");
				BizInfo[id][boX][i] = cache_get_field_content_float(i, "PosX");
				BizInfo[id][boY][i] = cache_get_field_content_float(i, "PosY");
				BizInfo[id][boZ][i] = cache_get_field_content_float(i, "PosZ");
				BizInfo[id][borX][i] = cache_get_field_content_float(i, "AngX");
				BizInfo[id][borY][i] = cache_get_field_content_float(i, "AngY");
				BizInfo[id][borZ][i] = cache_get_field_content_float(i, "AngZ");
				BizInfo[id][boInt][i] = cache_get_field_content_int(i, "Interior");
				BizInfo[id][bLocked][i] = cache_get_field_content_int(i, "Locked");

				if(IsBizzOutdoorObject(id, i)) {
					if(outdoor_furn == 0) { continue; }
					BizInfo[id][bObject][i] = CreateDynamicObject(BizInfo[id][boID][i], BizInfo[id][boX][i], BizInfo[id][boY][i], BizInfo[id][boZ][i], BizInfo[id][borX][i], BizInfo[id][borY][i], BizInfo[id][borZ][i], 0, BizInfo[id][boInt][i], -1, 100);
				} else BizInfo[id][bObject][i] = CreateDynamicObject(BizInfo[id][boID][i], BizInfo[id][boX][i], BizInfo[id][boY][i], BizInfo[id][boZ][i], BizInfo[id][borX][i], BizInfo[id][borY][i], BizInfo[id][borZ][i], id, BizInfo[id][IntIn], -1, 100);

				new toget[7];
				for(new v=0; v < 13; v++) {
					format(toget,7,"Layer%d",v);
					new res = cache_get_field_content_int(i, toget);
					BizMInfo[id][i][v] = res;
					if(res != 0) {
						ChangeDynamicObjectMaterial(BizInfo[id][bObject][i], v, res);
					}
				}
			}
		}
    }
	return 1;
}
//============================================//
stock SaveBizzObj(id, furnid)
{
	if(BizInfo[id][boID][furnid] != 0) //Skip this index if it's blank, why would we bother?
	{
		new query[516];
		mysql_format(handlesql, query, sizeof(query), "UPDATE `bizzfurn` SET Model=%d,PosX=%f,PosY=%f,PosZ=%f,AngX=%f,AngY=%f,AngZ=%f,Interior=%d,Locked=%d,Layer0=%d,Layer1=%d,Layer2=%d,Layer3=%d,Layer4=%d,Layer5=%d,Layer6=%d,Layer7=%d,Layer8=%d,Layer9=%d,Layer10=%d,Layer11=%d,Layer12=%d WHERE ID=%d",
		BizInfo[id][boID][furnid],
		BizInfo[id][boX][furnid],
		BizInfo[id][boY][furnid],
		BizInfo[id][boZ][furnid],
		BizInfo[id][borX][furnid],
		BizInfo[id][borY][furnid],
		BizInfo[id][borZ][furnid],
		BizInfo[id][boInt][furnid],
		BizInfo[id][bLocked][furnid],
		BizMInfo[id][furnid][0],
		BizMInfo[id][furnid][1],
		BizMInfo[id][furnid][2],
		BizMInfo[id][furnid][3],
		BizMInfo[id][furnid][4],
		BizMInfo[id][furnid][5],
		BizMInfo[id][furnid][6],
		BizMInfo[id][furnid][7],
		BizMInfo[id][furnid][8],
		BizMInfo[id][furnid][9],
		BizMInfo[id][furnid][10],
		BizMInfo[id][furnid][11],
		BizMInfo[id][furnid][12],
		BizInfo[id][boDBID][furnid]);
		mysql_tquery(handlesql, query);
	} else {
		new query[84];
	    mysql_format(handlesql, query, sizeof(query), "DELETE FROM `bizzfurn` WHERE `BID`=%d AND `ID`=%d", BizInfo[id][ID], BizInfo[id][boDBID][furnid]);
		mysql_tquery(handlesql, query);
	}
	return 1;
}
//============================================//
stock LoadCrate(Float:X, Float:Y, Float:Z)
{
	new foundid = -1;
    for(new i = 0; i < sizeof(CrateInfo); i++)
    {
        if(CrateInfo[i][cUsed] == 0)
        {
            foundid=i;
			break;
        }
    }
    if(foundid == -1) {
		new str[132];
		format(str, 132, "[ERROR] A 'crate' failed to load because there are no unused crates.");
		SendAdminMessage(COLOR_YELLOW, str);
		return -1;
	}
    CrateInfo[foundid][cUsed]=1;
    CrateInfo[foundid][cText]=CreateDynamic3DTextLabel( "| SHIPMENT CRATE |\npress '~k~~CONVERSATION_YES~' to navigate!", 0x33AA33FF, X, Y, Z, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 50.0);
	CrateInfo[foundid][cObject]=CreateDynamicObject(964, X, Y, Z - 1, 0.0, 0.0, 0.0, 0);
    CrateInfo[foundid][cX]=X;
    CrateInfo[foundid][cY]=Y;
    CrateInfo[foundid][cZ]=Z;
    CrateInfo[foundid][cVeh]=0;
    CrateInfo[foundid][cTime]=60;
	for(new i=0; i < MAX_SHIPMENT_SLOTS; i++) {
		CrateInfo[foundid][cInvID][i] = 0;
		CrateInfo[foundid][cInvA][i] = 0;
	}
	return foundid;
}
//============================================//
stock AddToCrate(crateid, itemid, amount=0)
{
	if(CrateInfo[crateid][cUsed] == 0) return 0;
	for(new slot=0; slot < MAX_SHIPMENT_SLOTS; slot++) {
		if(CrateInfo[crateid][cInvID][slot] < 1) {
			CrateInfo[crateid][cInvID][slot] = itemid;
			CrateInfo[crateid][cInvA][slot] = amount;
			return 1;
		}
	}
	return 1;
}
//============================================//
stock RemoveFromCrate(crateid, slot, amount=0) {
	if(amount == 0 || CrateInfo[crateid][cInvA][slot] <= amount) {
		CrateInfo[crateid][cInvID][slot] = 0;
		CrateInfo[crateid][cInvA][slot] = 0;
	} else CrateInfo[crateid][cInvA][slot] -= amount;
}
//============================================//
stock PrintShipment(playerid)
{
	new string[568], member = GetPVarInt(playerid, "Member"), time = 0, price = 0, added = 0, approved = 1;
	for(new i=0; i < MAX_SHIPMENT_SLOTS; i++) {
		if(FactionInfo[member][fShipmentID][i] < 1) continue;
		if(IsQuantityItem(FactionInfo[member][fShipmentID][i])) {
			price += (GetItemPrice(FactionInfo[member][fShipmentID][i])*FactionInfo[member][fShipmentA][i]);
		} else price += GetItemPrice(FactionInfo[member][fShipmentID][i]);
		switch(FactionInfo[member][fShipmentID][i])
		{
			case 22 .. 34:
			{
				if(added == 0) {
					added = 1;
					time += 15;
				}
				time += 15;
				if(FactionInfo[member][fShipmentID][i] > 27 && FactionInfo[member][fShipmentID][i] < 33) { approved = 0; }
			}
			case 100 .. 150:
			{
				if(added == 0) {
					added = 1;
					time += 15;
				}
				time += FactionInfo[member][fShipmentA][i];
			}
			case 409:
			{
				time += 10;
			}
			case 500 .. 550:
			{
				time += (FactionInfo[member][fShipmentA][i]/2);
			}
			case 1002 .. 1020:
			{
				time += FactionInfo[member][fShipmentA][i];
				if(FactionInfo[member][fShipmentID][i] == 1004) { approved = 0; }
			}
		}
	}
	if(approved == 0) {
		format(string, 568, "*Needs administrative approval*\nLocation(LZ): %s\nPrice: $%d\nTime: %d min", GetPlayerArea(playerid), price, time);
	} else format(string, 568, "Location(LZ): %s\nPrice: $%d\nTime: %d min", GetPlayerArea(playerid), price, time);
    ShowPlayerDialog(playerid, 90, DIALOG_STYLE_MSGBOX, "Shipment Info", string, "Options", "");
	return true;
}
//============================================//
stock GetItemPrice(itemid)
{
	new price = 0;
	switch(itemid)
	{
	    case 22: price = 550;
	    case 24: price = 1000;
	    case 25: price = 650;
	    case 26: price = 700;
	    case 28: price = 850;
	    case 30: price = 2750;
	    case 32: price = 850;
		case 33: price = 450;
	    case 100: price = 40;
	    case 101: price = 80;
	    case 106: price = 60;
	    case 107: price = 100;
	    case 110: price = 40;
	    case 111: price = 50;
	    case 112: price = 50;
	    case 115: price = 60;
	    case 116: price = 140;
	    case 120: price = 70;
	    case 122: price = 50;
	    case 125: price = 40;
	    case 126: price = 525;
	    case 409: price = 700;
	    case 500: price = 10;
	    case 501: price = 20;
	    case 502: price = 15;
	    case 503: price = 10;
	    case 504: price = 15;
	    case 505: price = 20;
	    case 506: price = 10;
	    case 507: price = 25;
		case 1002: price = 2500;
		case 1004: price = 22500;
		case 1005: price = 2000;
	}
	return price;
}
//============================================//
stock IsHeavyCar(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 499 || pveh == 422 || pveh == 482 || pveh == 498 || pveh == 414 || pveh == 413
	|| pveh == 440 || pveh == 478 || pveh == 456 || pveh == 554)
    {
        return true;
    }
	return false;
}
//============================================//
stock BizzProduct(bizz)
{
    if(bizz >= 1 && bizz <= MAX_BUSINESSES+1)
    {
	    BizInfo[bizz][bProd]--;
	    if(BizInfo[bizz][bProd] <= 0) BizInfo[bizz][bProd]=0;
	}
    return true;
}
//============================================//
stock BizzProductC(bizz)
{
    if(bizz >= 1 && bizz <= MAX_BUSINESSES+1)
    {
	    if(BizInfo[bizz][bProd] <= 0) return true;
	}
    return false;
}
//============================================//
stock BizzTill(bizz, price)
{
    if(bizz >= 1 && bizz <= MAX_BUSINESSES+1)
    {
	    BizInfo[bizz][Bank]+=price;
	}
    return true;
}
//============================================//
stock ReturnEnum(interger)
{
	new enume;
	enume=interger;
	return enume;
}
//============================================//
stock CreateFireEx(Float:X, Float:Y, Float:Z, World, Interior)
{
    for(new i=0;i<sizeof(FDInfo);i++)
    {
		if(FDInfo[i][fObject] == 0)
		{
		    FDInfo[i][fObject] = CreateDynamicObject(18691, X, Y, Z-2.0, 0.0, 0.0, 0.0, World, Interior);
		    FDInfo[i][fdX]=X;
		    FDInfo[i][fdY]=Y;
		    FDInfo[i][fdZ]=Z;
		    FDInfo[i][fWorld]=World;
		    FDInfo[i][fInt]=Interior;
		    FDInfo[i][fTime]=60;
		    FDInfo[i][fHealth]=30;
		    return true;
		}
    }
    return true;
}
//============================================//
stock CreateFire(Float:X, Float:Y, Float:Z, World, Interior, Float:spread=3.0)
{
    new rand = random(5);
    new Float:adjustment[2];
    
    switch(rand)
    {
        case 0: adjustment[0] = 0 * spread;
        case 1: adjustment[0] = 0.25 * spread;
        case 2: adjustment[0] = 0.50 * spread;
        case 3: adjustment[0] = 0.75 * spread;
        case 4: adjustment[0] = 1.0 * spread;
    }

    rand = random(5);

    switch(rand)
    {
        case 0: adjustment[1] = 0 * spread;
        case 1: adjustment[1] = 0.25 * spread;
        case 2: adjustment[1] = 0.50 * spread;
        case 3: adjustment[1] = 0.75 * spread;
        case 4: adjustment[1] = 1.0 * spread;
    }

    CreateFireEx(X, Y, Z - 0.5, World, Interior);
    CreateFireEx(X + adjustment[0], Y - adjustment[1], Z - 0.5, World, Interior);
    CreateFireEx(X + adjustment[0], Y + adjustment[1], Z - 0.5, World, Interior);
    CreateFireEx(X - adjustment[0], Y + adjustment[1], Z - 0.5, World, Interior);
    CreateFireEx(X - adjustment[0], Y - adjustment[1], Z - 0.5, World, Interior);
    return true;
}
//============================================//
stock IsAroundFire(playerid, type, Float:distance)
{
    for(new i=0;i<sizeof(FDInfo);i++)
    {
		if(FDInfo[i][fObject] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid,distance,FDInfo[i][fdX],FDInfo[i][fdY],FDInfo[i][fdZ]))
		    {
				if(GetPlayerInterior(playerid) == FDInfo[i][fInt])
				{
					if(GetPlayerVirtualWorld(playerid) == FDInfo[i][fWorld])
					{
		        		switch(type)
						{
				    		case 1:
				    		{
				        		return true;
				    		}
				    		case 2:
				    		{
				       			return i;
				    		}
						}
					}
				}
		    }
		}
	}
	return false;
}
//============================================//
stock IsPlayerAimObjectID(playerid, objectid)
{
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetDynamicObjectPos(objectid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	new Float:A;
	GetPlayerFacingAngle(playerid, A);
    X1 += (Distance * floatsin(-A, degrees));
    Y1 += (Distance * floatcos(-A, degrees));
	Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	if(Distance < 1.5) return true;
	return false;
}
//============================================//
stock IsPlayerAimingPlayer(playerid, targetid)
{
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetPlayerPos(targetid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	new Float:A;
	GetPlayerFacingAngle(playerid, A);
    X1 += (Distance * floatsin(-A, degrees));
    Y1 += (Distance * floatcos(-A, degrees));
	Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	if(Distance < 1.5) return true;
	return false;
}
//============================================//
stock PlayerInWater(playerid)
{
    new animlib[32],tmp[32];
    GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, sizeof(animlib), tmp, sizeof(tmp));
    if(!strcmp(animlib, "SWIM") && !IsPlayerInAnyVehicle(playerid)) return true;
    return false;
}
//============================================//
stock EditCloseBizzObject(playerid, key)
{
	new string[128], furnitname[50], found = 0;
	furnitname="N/A";
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(BizInfo[key][bObject][h] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h]))
		    {
				SetPVarInt(playerid, "FurnEditKey", key);
				SetPVarInt(playerid, "FurnEditH", h);
				format(string, 128, "Edit Object: %s", GetObjName(BizInfo[key][boID][h]));
				ShowPlayerDialog(playerid, 103, DIALOG_STYLE_LIST, string, "Edit Object\nInput Position\nSelect Material\nReset Material\nRemove Object", "Select", "Close");
				found++;
				break;
		    }
        }
    }
	if(found == 0) SCM(playerid, COLOR_LIGHTRED, "ERROR: Can't find any object!");
    return 1;
}
//============================================//
stock GetCloseBizzObject(playerid, key) {
	new furnitob[50], found = 0;
    for(new h = 0; h < MAX_HOUSE_OBJ; h++) {
        if(BizInfo[key][bObject][h] != 0) {
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[key][boX][h], BizInfo[key][boY][h], BizInfo[key][boZ][h])) {
        		furnitob[found] = BizInfo[key][boID][h];
				found++;
		    }
        }
    }
	if(found == 0) {
		SCM(playerid, COLOR_LIGHTRED, "ERROR: Can't find any object!");
	} else ShowModelSelectionMenuEx(playerid, furnitob, found, "Select item", 9, 16.0, 0.0, -55.0);
    return 1;
}
//============================================//
forward BuildBizzObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz);
public BuildBizzObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz)
{
	new string[128], found = 0, key = FurnRight(playerid, 2);
	if(key == -1) return 1;
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(BizInfo[key][boID][h] == 0)
		{
			found++;
			if(IsValidObjID(objectid))
			{
				BizInfo[key][bObject][h] = CreateDynamicObject(objectid, X, Y, Z, rotx, roty, rotz, GetPlayerVirtualWorld(playerid));
			}
			BizInfo[key][boID][h] = objectid;
			BizInfo[key][boX][h] = X;
			BizInfo[key][boY][h] = Y;
			BizInfo[key][boZ][h] = Z;
			BizInfo[key][borX][h] = rotx;
			BizInfo[key][borY][h] = roty;
			BizInfo[key][borZ][h] = rotz;
			BizInfo[key][boInt][h] = GetPlayerInterior(playerid);
			format(string, sizeof(string),"Furniture %d created for BizID: %d.", objectid, key);
			SendClientMessage(playerid,COLOR_LIGHTRED,string);
			new query[524];
			mysql_format(handlesql, query, sizeof(query), "INSERT INTO bizzfurn (BID, Model, PosX, PosY, PosZ, AngX, AngY, AngZ, Interior) VALUES (%i, %i, %f, %f, %f, %f, %f, %f, %i)", 
				BizInfo[key][ID], 
				BizInfo[key][boID][h], 
				BizInfo[key][boX][h], 
				BizInfo[key][boY][h],
				BizInfo[key][boZ][h], 
				BizInfo[key][borX][h], 
				BizInfo[key][borY][h], 
				BizInfo[key][borZ][h],
				BizInfo[key][boInt][h]);
			mysql_tquery(handlesql, query, "OnBuildBizzObject", "ii", key, h);
            Streamer_Update(playerid);
			break;
        }
    }
    if(found == 0) SendClientMessage(playerid,COLOR_LIGHTRED,"All furniture slots have been used!");
    return 1;
}
//============================================//
forward OnBuildBizzObject(bizzid, objectid);
public OnBuildBizzObject(bizzid, objectid)
{
	BizInfo[bizzid][boDBID][objectid] = cache_insert_id();
	return 1;
}
//============================================//
stock RemoveBizzObjects(key)
{
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(BizInfo[key][bObject][h] != 0)
		{
			if(IsValidDynamicObject(BizInfo[key][bObject][h])) { DestroyDynamicObject(BizInfo[key][bObject][h]); }
			BizInfo[key][bObject][h]=0;
			BizInfo[key][boID][h] = 0;
			BizInfo[key][boX][h] = 0.0;
		    BizInfo[key][boY][h] = 0.0;
			BizInfo[key][boZ][h] = 0.0;
		    BizInfo[key][borX][h] = 0.0;
		    BizInfo[key][borY][h] = 0.0;
			BizInfo[key][borZ][h] = 0.0;
		    BizInfo[key][boInt][h] = 0;
        }
    }
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM `bizzfurn` WHERE `BID`=%d", key);
	mysql_tquery(handlesql, query);
    return 1;
}
//============================================//
stock NotAbleToPlant(playerid)
{
	if(GetPVarInt(playerid, "Jailed") > 0) return false;
	return true;
}
//============================================//
stock PlayerWound(playerid, type, give)
{
	if(give == 0) // REMOVE ALL
	{
	    SetPVarInt(playerid, "Wound_T", 0);
    	SetPVarInt(playerid, "Wound_A", 0);
    	SetPVarInt(playerid, "Wound_L", 0);
    	for(new i = 0; i < 8; i++)
    	{
    	    TextDrawHideForPlayer(playerid, WoundDraw[i]);
    	}
		return true;
	}
	switch(type)
	{
	    case 1:
	    {
	        TextDrawShowForPlayer(playerid, WoundDraw[0]);
	        TextDrawShowForPlayer(playerid, WoundDraw[1]);
	        SetPVarInt(playerid, "Wound_T", 1);
	    }
	    case 2:
	    {
	        TextDrawShowForPlayer(playerid, WoundDraw[2]);
	        TextDrawShowForPlayer(playerid, WoundDraw[3]);
	        SetPVarInt(playerid, "Wound_A", 1);
	    }
	    case 3:
	    {
	        TextDrawShowForPlayer(playerid, WoundDraw[4]);
	        TextDrawShowForPlayer(playerid, WoundDraw[5]);
	        SetPVarInt(playerid, "Wound_L", 1);
	    }
	    case 4:
	    {
	        TextDrawShowForPlayer(playerid, WoundDraw[6]);
	        TextDrawShowForPlayer(playerid, WoundDraw[7]);
	    }
	}
	return true;
}
//============================================//
stock DeathPlayer(playerid, msg[])
{
	ResetPlayerWeaponsEx(playerid);
    SetPVarInt(playerid, "Mute", 1);
    SetPVarInt(playerid, "Dead", 3);
    TogglePlayerControllableEx(playerid,false);
    ResetPlayerWeaponsEx(playerid);
    SetPlayerHealth(playerid,1.0);
    SetPlayerInterior(playerid,0);
    SetPlayerPosEx(playerid, 269.4417,1861.8927,8.7578);
    SetPlayerCameraPos(playerid, 275.2712,1859.6465,9.8133);
	SetPlayerCameraLookAt(playerid, 275.2712,1859.6465,16.6257, 0);
    if(playerid == 0) SetPlayerVirtualWorld(playerid,INVALID_MAXPL);
    else SetPlayerVirtualWorld(playerid,playerid);
    SendClientMessage(playerid, COLOR_PINK, msg);
    PlayerWound(playerid, 0, 0);
    return true;
}
//============================================//
public ProgressBar(playerid, title[], time, number)
{
	new string[128];
	switch(GetPVarInt(playerid, "PBUse"))
	{
	    case 0:
	    {
	        SetPVarInt(playerid, "PBUse", 1);
	        PGBar[0][playerid] = TextDrawCreate(262.0, 295.0, "I");
	        TextDrawBackgroundColor(PGBar[0][playerid], 0);
	        TextDrawFont(PGBar[0][playerid], 1);
	        TextDrawLetterSize(PGBar[0][playerid], 0.500000, 1.199999);
	        TextDrawColor(PGBar[0][playerid], 150994944);
	        TextDrawSetOutline(PGBar[0][playerid], 0);
	        TextDrawSetProportional(PGBar[0][playerid], 1);
	        TextDrawSetShadow(PGBar[0][playerid], 1);
	        TextDrawUseBox(PGBar[0][playerid], 1);
	        TextDrawBoxColor(PGBar[0][playerid], 255);
	        TextDrawTextSize(PGBar[0][playerid], 364.0, 0.0);
	        PGBar[1][playerid] = TextDrawCreate(266.0, 298.0, "I");
	        TextDrawBackgroundColor(PGBar[1][playerid], 0);
	        TextDrawFont(PGBar[1][playerid], 1);
	        TextDrawLetterSize(PGBar[1][playerid], 0.500000, 0.599999);
	        TextDrawColor(PGBar[1][playerid], 0);
	        TextDrawSetOutline(PGBar[1][playerid], 0);
	        TextDrawSetProportional(PGBar[1][playerid], 1);
	        TextDrawSetShadow(PGBar[1][playerid], 1);
	        TextDrawUseBox(PGBar[1][playerid], 1);
	        TextDrawBoxColor(PGBar[1][playerid], 2038004223);
	        TextDrawTextSize(PGBar[1][playerid], 360.0, 0.0);
	        PGBar[2][playerid] = TextDrawCreate(266.0, 298.0, "I");
	        TextDrawBackgroundColor(PGBar[2][playerid], 0);
	        TextDrawFont(PGBar[2][playerid], 1);
	        TextDrawLetterSize(PGBar[2][playerid], 0.500000, 0.599999);
	        TextDrawColor(PGBar[2][playerid], 0);
	        TextDrawSetOutline(PGBar[2][playerid], 0);
	        TextDrawSetProportional(PGBar[2][playerid], 1);
	        TextDrawSetShadow(PGBar[2][playerid], 1);
	        TextDrawUseBox(PGBar[2][playerid], 1);
	        TextDrawBoxColor(PGBar[2][playerid], -1);
	        TextDrawTextSize(PGBar[2][playerid], 261.0, 0.0);
	        PGBar[3][playerid] = TextDrawCreate(261.0, 280.0, " ");
	        TextDrawBackgroundColor(PGBar[3][playerid], 255);
	        TextDrawFont(PGBar[3][playerid], 2);
	        TextDrawLetterSize(PGBar[3][playerid], 0.240000, 1.399999);
	        TextDrawColor(PGBar[3][playerid], -1);
	        TextDrawSetOutline(PGBar[3][playerid], 0);
	        TextDrawSetProportional(PGBar[3][playerid], 1);
	        TextDrawSetShadow(PGBar[3][playerid], 1);
	        for(new o = 0; o < 4; o++)
	        {
	            TextDrawShowForPlayer(playerid, PGBar[o][playerid]);
	        }
	        format(string, 128, "~w~%s", title);
	        TextDrawSetString(PGBar[3][playerid], string);
	        SetPVarFloat(playerid, "PBNum", 261.0);
	        CallRemoteFunction("ProgressBarEx","iii", playerid, time, number);
	    }
	}
    return true;
}
//============================================//
public ProgressBarEx(playerid, time, number)
{
	new Float:amount;
	switch(GetPVarInt(playerid, "PBUse"))
	{
	    case 1:
	    {
			if(GetPVarFloat(playerid,"PBNum") < 360.0)
			{
				new Float:timeex = float(time);
			    amount = 100.0 / timeex;
			    amount = amount / 2.0;
			    SetPVarFloat(playerid, "PBNum", GetPVarFloat(playerid,"PBNum")+amount);
			    TextDrawTextSize(PGBar[2][playerid], 0.0+GetPVarFloat(playerid,"PBNum"), 0.0);
			    //==========//
			    TextDrawHideForPlayer(playerid, PGBar[2][playerid]);
			    TextDrawShowForPlayer(playerid, PGBar[2][playerid]);
			    //==========//
			    SetTimerEx("ProgressBarEx", 500, false, "iii", playerid, time, number);
			}
			else
			{
			    for(new o = 0; o < 4; o++)
	            {
	                TextDrawHideForPlayer(playerid, PGBar[o][playerid]);
	                TextDrawDestroy(PGBar[o][playerid]);
	            }
			    SetPVarInt(playerid, "PBUse", 0);
			    CallRemoteFunction("OnProgressEnd","ii", playerid, number);
			}
	    }
	}
    return true;
}
//============================================//
public OnProgressEnd(playerid, number)
{
	RemovePlayerTag(playerid);
	new str[128], rand;
	switch(number)
	{
	    case 0:
	    {
	        TogglePlayerControllable(playerid, true);
	    }
	    case 1:
	    {
	        // NO CODE
	    }
	    case 2: // Factory Worker
	    {
	        TogglePlayerControllable(playerid, true);
	        switch(GetPVarInt(playerid, "FactoryRoute"))
		    {
		        case 1:
		        {
		            rand = random(2);
		            switch(rand)
		            {
		                case 1: SetPlayerCheckpoint(playerid, 2744.8408,-2438.8320,13.4155, 5.0);
		                default: SetPlayerCheckpoint(playerid, 2744.4714,-2429.9734,13.4165, 5.0);
		            }
		            SendClientMessage(playerid, COLOR_WHITE, "Deliver the boxes to the marked location!");
		            SetPVarInt(playerid, "FactoryRoute", 2);
		        }
		        case 2:
		        {
					new maxbox = 30;
		            SetPVarInt(playerid, "OnRoute", GetPVarInt(playerid, "OnRoute")+1);
		            if(GetPVarInt(playerid, "OnRoute") >= maxbox)
		            {
		                CallRemoteFunction("EndRoute","ii", playerid, 750);
					    return true;
		            }
		            format(str, sizeof(str), "Continue collecting boxes, %d/%d deliveries left!", maxbox-GetPVarInt(playerid, "OnRoute")+1, maxbox);
		            SendClientMessage(playerid, COLOR_WHITE, str);
		            rand = random(sizeof(gFactoryCheckpoints));
		            SetPlayerCheckpoint(playerid, gFactoryCheckpoints[rand][0], gFactoryCheckpoints[rand][1], gFactoryCheckpoints[rand][2], 5.0);
		            SetPVarInt(playerid, "FactoryRoute", 1);
		        }
		    }
	    }
		case 3: // Weapon crafting
		{
			if(GetPVarInt(playerid, "Cuffed") > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't do this while handcuffed/tazed.");
			new id = GetPVarInt(playerid, "CraftID");
			if(PlayerInfo[playerid][pMaterials] < CraftWeps[id][wCost]) return SCM(playerid, COLOR_ORANGE, "You don't have enough materials for this!");
			PlayerInfo[playerid][pMaterials] = PlayerInfo[playerid][pMaterials] - CraftWeps[id][wCost];
			GiveInvItem(playerid, CraftWeps[id][wID], CraftWeps[id][wQ], CraftWeps[id][wEx]);
			if(PlayerInfo[playerid][pCraft] < 2 || CraftWeps[id][wLvl] > 1) {
				PlayerInfo[playerid][pCraftExp]++;
			} else scm(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Since your craft-level is over 1 you can only gain EXP from items that require a craft-level of 2 or higher.");
			CheckCraftLvl(playerid);
		}
	}
	return true;
}
//============================================//
stock GetCraftEXP(playerid)
{
	if(PlayerInfo[playerid][pCraft] > 0) { 
		return 25*PlayerInfo[playerid][pCraft];
	}
	return 15;
}
//============================================//
stock CheckCraftLvl(playerid)
{
	if(PlayerInfo[playerid][pCraft] >= 5) { // Max level
		SaveCrafting(playerid);
		return 1;
	}
	if(PlayerInfo[playerid][pCraftExp] >= GetCraftEXP(playerid)) {
		PlayerInfo[playerid][pCraft]++;
		PlayerInfo[playerid][pCraftExp]=0;
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		new str[78];
		format(str, 78, "Congratulations! {FFFFFF}You've levelled your crafting skill to level %d.", PlayerInfo[playerid][pCraft]);
		scm(playerid, COLOR_GREEN, str);
	}
	SaveCrafting(playerid);
	return 1;
}
//============================================//
stock StopProgress(playerid)
{
    if(GetPVarInt(playerid, "PBUse") > 0)
    {
        for(new o = 0; o < 4; o++)
	    {
	        TextDrawHideForPlayer(playerid, PGBar[o][playerid]);
	        TextDrawDestroy(PGBar[o][playerid]);
	    }
		SetPVarInt(playerid, "PBUse", 0);
    }
	RemovePlayerTag(playerid);
	return true;
}
//============================================//
stock IsInProgress(playerid)
{
	if(GetPVarInt(playerid, "PBUse") > 0)
	{
	    return true;
	}
	return false;
}
//============================================//
stock SendRadioMessage(color,string[])
{
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "TogRadio") == 0)
        {
            SendClientMessage(i,color,string);
        }
    }
    return 1;
}
//============================================//
stock SendNewsMessage(color,string[])
{
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "TogNews") == 0)
        {
            SendClientMessage(i,color,string);
        }
    }
    return 1;
}
//============================================//
stock SendOOCMessage(Float:radi, playerid, string[])
{
    new Float:posx, Float:posy, Float:posz;
	GetPlayerPos(playerid, posx, posy, posz);
    foreach(new i : Player)
    {
        if(GetPVarInt(i, "PlayerLogged") == 1 && GetPVarInt(i, "TogB") == 0)
        {
		    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		    {
		        if(IsPlayerInRangeOfPoint(i,radi,posx, posy, posz))
		        {
				    new Float:radius, feet;
					radius = GetPlayerDistanceFromPoint(i,posx, posy, posz);
		            feet = floatround(radius);
		            switch(feet)
		            {
		                case 0 .. 10: SendClientMessageEx(i,0xF0F0F096,string);
			            case 11 .. 15: SendClientMessageEx(i,0xC9C9C996,string);
			            case 16 .. 20: SendClientMessageEx(i,0xB5B5B596,string);
			            case 21 .. 25: SendClientMessageEx(i,0xA3A3A396,string);
			            case 26 .. 31: SendClientMessageEx(i,0x79797996,string);
			        }
		        }
		    }
        }
    }
    return 1;
}
//============================================//
stock RemoveBuildings(playerid)
{
	//==========================================================================//
	RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1778.4531, 14.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1774.3125, 14.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1771.3438, 14.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1767.2891, 14.1406, 0.25);

	RemoveBuildingForPlayer(playerid, 5523, 2021.6563, -1810.7266, 18.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 5524, 2025.3750, -1773.9531, 16.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 5525, 2029.5000, -1819.2734, 14.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 5526, 2049.5781, -1781.6797, 18.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 5527, 2056.9844, -1830.5156, 20.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 5551, 2140.5156, -1735.1406, 15.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 2034.3984, -1801.6719, 14.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 3773, 1971.2734, -1701.7734, 17.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 2062.0313, -1826.6406, 19.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1268, 2030.9297, -1763.1641, 28.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1268, 2066.8125, -1791.7891, 21.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 5417, 2029.5000, -1819.2734, 14.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2013.2734, -1816.4297, 16.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 2062.0313, -1826.6406, 19.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1972.9922, -1811.4531, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1974.2109, -1808.1406, 16.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 5411, 2021.6563, -1810.7266, 18.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1259, 2030.9297, -1763.1641, 28.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 5628, 2025.3750, -1773.9531, 16.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2041.3594, -1807.9531, 16.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 5522, 2048.7188, -1776.4766, 18.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 5521, 2049.5781, -1781.6797, 18.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 3616, 1971.2734, -1701.7734, 17.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2070.2109, -1812.8828, 15.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1259, 2066.8125, -1791.7891, 21.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1522, 2070.2109, -1794.5938, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1522, 2068.1641, -1780.6094, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 2069.0000, -1766.6641, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 2068.9375, -1767.8359, 13.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 5410, 2140.5156, -1735.1406, 15.8906, 0.25);
	// LSPD TRAINING CENTER !
	RemoveBuildingForPlayer(playerid, 17349, -542.0078, -522.8438, 29.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 17019, -606.0313, -528.8203, 30.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -541.4297, -561.2266, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 17012, -542.0078, -522.8438, 29.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -513.7578, -561.0078, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -503.6172, -540.5313, 25.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -502.6094, -528.6484, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -502.1172, -521.0313, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -502.4063, -513.0156, 25.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -620.4141, -490.5078, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -619.6250, -473.4531, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 17018, -565.7656, -489.1406, 29.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -553.6875, -481.6328, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -554.4531, -496.1797, 25.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1441, -537.0391, -469.1172, 25.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -516.9453, -496.6484, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -503.1250, -509.0000, 25.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 17020, -475.9766, -544.8516, 28.1172, 0.25);
	// JEFFERSON JUNGLES //
	RemoveBuildingForPlayer(playerid, 3562, 2232.3984, -1464.7969, 25.6484, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 2275.3906, -1438.6641, 22.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2229.0234, -1411.6406, 22.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2265.6172, -1410.3359, 21.7734, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2253.2188, -1409.8906, 23.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2232.3984, -1464.7969, 25.6484, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2241.8906, -1458.9297, 22.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 1307, 2272.6797, -1459.1875, 22.0547, 0.25);
    RemoveBuildingForPlayer(playerid, 3593, 2265.0781, -1424.4766, 23.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2247.5313, -1464.7969, 25.5469, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2263.7188, -1464.7969, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2243.7109, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2230.6094, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2256.6641, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2230.6094, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2243.7109, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2256.6641, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2247.5313, -1464.7969, 25.5469, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2263.7188, -1464.7969, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 5523, 2021.6563, -1810.7266, 18.6016, 0.25);
    RemoveBuildingForPlayer(playerid, 5524, 2025.3750, -1773.9531, 16.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 5525, 2029.5000, -1819.2734, 14.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 5526, 2049.5781, -1781.6797, 18.3281, 0.25);
    RemoveBuildingForPlayer(playerid, 5551, 2140.5156, -1735.1406, 15.8906, 0.25);
    RemoveBuildingForPlayer(playerid, 1524, 2034.3984, -1801.6719, 14.5469, 0.25);
    RemoveBuildingForPlayer(playerid, 1268, 2030.9297, -1763.1641, 28.5781, 0.25);
    RemoveBuildingForPlayer(playerid, 1268, 2066.8125, -1791.7891, 21.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 5417, 2029.5000, -1819.2734, 14.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 2013.2734, -1816.4297, 16.3828, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 1972.9922, -1811.4531, 15.5859, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1974.2109, -1808.1406, 16.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 5411, 2021.6563, -1810.7266, 18.6016, 0.25);
    RemoveBuildingForPlayer(playerid, 1259, 2030.9297, -1763.1641, 28.5781, 0.25);
    RemoveBuildingForPlayer(playerid, 5628, 2025.3750, -1773.9531, 16.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 2041.3594, -1807.9531, 16.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 5522, 2048.7188, -1776.4766, 18.6484, 0.25);
    RemoveBuildingForPlayer(playerid, 5521, 2049.5781, -1781.6797, 18.3281, 0.25);
    RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 2070.2109, -1812.8828, 15.6016, 0.25);
    RemoveBuildingForPlayer(playerid, 1259, 2066.8125, -1791.7891, 21.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 1522, 2070.2109, -1794.5938, 12.5234, 0.25);
    RemoveBuildingForPlayer(playerid, 1522, 2068.1641, -1780.6094, 12.5391, 0.25);
    RemoveBuildingForPlayer(playerid, 1216, 2069.0000, -1766.6641, 13.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 1216, 2068.9375, -1767.8359, 13.2109, 0.25);
    // CITY HALL //
    RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
    // BOXES IN JEFFERSON //
    RemoveBuildingForPlayer(playerid, 1221, 2180.4766, -1247.6797, 23.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1224, 2180.6484, -1245.7109, 23.4922, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2181.2344, -1243.1953, 23.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2183.0078, -1243.1953, 23.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2182.5938, -1246.8672, 23.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 1224, 2224.8438, -1229.5938, 23.5625, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2227.3594, -1230.1797, 23.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2225.4688, -1231.1406, 23.4063, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2222.8750, -1229.4219, 23.4063, 0.25);
    // REMOVE STAGE 51 //
	/*RemoveBuildingForPlayer(playerid, 6491, 717.4844, -1357.3047, 20.2969, 0.25);
    RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1377.6641, 21.7578, 0.25);
    RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1356.5859, 21.7578, 0.25);
    RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1338.2422, 21.7578, 0.25);
    RemoveBuildingForPlayer(playerid, 1635, 677.1953, -1328.8750, 25.1094, 0.25);
    RemoveBuildingForPlayer(playerid, 1689, 745.5859, -1381.1094, 25.8750, 0.25);
    RemoveBuildingForPlayer(playerid, 1689, 751.3359, -1368.0313, 25.8750, 0.25);
    RemoveBuildingForPlayer(playerid, 6490, 717.4844, -1357.3047, 20.2969, 0.25);
    RemoveBuildingForPlayer(playerid, 6516, 717.6875, -1357.2813, 18.0469, 0.25);
    RemoveBuildingForPlayer(playerid, 1635, 696.1953, -1328.8750, 25.1094, 0.25);
    RemoveBuildingForPlayer(playerid, 1635, 702.2344, -1328.8750, 25.1094, 0.25);
    RemoveBuildingForPlayer(playerid, 1635, 721.2109, -1328.8750, 25.1094, 0.25);
    RemoveBuildingForPlayer(playerid, 1415, 732.8516, -1332.8984, 12.6875, 0.25);
    RemoveBuildingForPlayer(playerid, 1439, 732.7266, -1341.7734, 12.6328, 0.25);*/

	// CHARLES PROJECTS //
	RemoveBuildingForPlayer(playerid, 17594, 2314.8516, -1799.4219, 13.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 17759, 2314.8516, -1799.4219, 13.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2239.9297, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2282.9922, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2314.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2352.7188, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2387.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2220.4375, -1802.8359, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2229.0469, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2230.4141, -1815.1484, 11.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2234.4844, -1817.9297, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2239.9297, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2228.6719, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2232.5156, -1766.0547, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2249.8672, -1815.4141, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2254.7266, -1827.4375, 12.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 17886, 2264.0391, -1789.2578, 20.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2275.3906, -1820.7266, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2268.1875, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2273.6953, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2282.9922, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2267.8125, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2273.3359, -1767.3438, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2305.0625, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2314.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2304.7813, -1767.3828, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2332.8281, -1817.7109, 12.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2341.7578, -1817.7266, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 17887, 2343.6094, -1784.5078, 20.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2341.3828, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2329.1875, -1765.5234, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2352.7188, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2367.6484, -1780.7734, 11.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2378.3359, -1818.7266, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2376.6172, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2399.9766, -1815.9922, 11.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2387.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2387.0234, -1763.6406, 12.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 17518, 2361.9375, -1699.9375, 15.9219, 0.25);	
	
	//Prison exterior
	RemoveBuildingForPlayer(playerid, 5202, 2050.3594, -2045.9297, 20.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 5138, 2050.3594, -2045.9297, 20.8672, 0.25);

	// Diverse Gas
	RemoveBuildingForPlayer(playerid, 5535, 1918.8516, -1776.3281, 16.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 1910.1641, -1779.6641, 18.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1917.3203, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1912.0547, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1906.7734, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1927.8516, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1922.5859, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1938.3906, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1933.1250, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 5681, 1921.4844, -1778.9141, 18.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 5409, 1918.8516, -1776.3281, 16.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1778.4531, 14.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1774.3125, 14.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1900.8047, -1756.5156, 16.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1928.7344, -1772.4453, 12.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1771.3438, 14.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1767.2891, 14.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1948.9844, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1943.6875, -1797.4219, 13.8125, 0.25);	
	
    // GANTON GARAGE //
    RemoveBuildingForPlayer(playerid, 1308, 2276.5469, -1674.5625, 14.3203, 0.25);
    if(Concert == 1)
    {
        RemoveBuildingForPlayer(playerid, 5523, 2021.6563, -1810.7266, 18.6016, 0.25);
	    RemoveBuildingForPlayer(playerid, 5524, 2025.3750, -1773.9531, 16.6797, 0.25);
	    RemoveBuildingForPlayer(playerid, 5525, 2029.5000, -1819.2734, 14.3359, 0.25);
	    RemoveBuildingForPlayer(playerid, 5526, 2049.5781, -1781.6797, 18.3281, 0.25);
	    RemoveBuildingForPlayer(playerid, 1524, 2034.3984, -1801.6719, 14.5469, 0.25);
	    RemoveBuildingForPlayer(playerid, 1268, 2030.9297, -1763.1641, 28.5781, 0.25);
	    RemoveBuildingForPlayer(playerid, 1268, 2066.8125, -1791.7891, 21.9766, 0.25);
	    RemoveBuildingForPlayer(playerid, 5417, 2029.5000, -1819.2734, 14.3359, 0.25);
	    RemoveBuildingForPlayer(playerid, 1226, 2013.2734, -1816.4297, 16.3828, 0.25);
	    RemoveBuildingForPlayer(playerid, 1283, 1972.9922, -1811.4531, 15.5859, 0.25);
	    RemoveBuildingForPlayer(playerid, 1226, 1974.2109, -1808.1406, 16.4063, 0.25);
	    RemoveBuildingForPlayer(playerid, 5411, 2021.6563, -1810.7266, 18.6016, 0.25);
	    RemoveBuildingForPlayer(playerid, 1259, 2030.9297, -1763.1641, 28.5781, 0.25);
	    RemoveBuildingForPlayer(playerid, 5628, 2025.3750, -1773.9531, 16.6797, 0.25);
	    RemoveBuildingForPlayer(playerid, 1226, 2041.3594, -1807.9531, 16.4063, 0.25);
	    RemoveBuildingForPlayer(playerid, 5522, 2048.7188, -1776.4766, 18.6484, 0.25);
	    RemoveBuildingForPlayer(playerid, 5521, 2049.5781, -1781.6797, 18.3281, 0.25);
	    RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	    RemoveBuildingForPlayer(playerid, 1283, 2070.2109, -1812.8828, 15.6016, 0.25);
	    RemoveBuildingForPlayer(playerid, 1259, 2066.8125, -1791.7891, 21.9766, 0.25);
	    RemoveBuildingForPlayer(playerid, 1522, 2070.2109, -1794.5938, 12.5234, 0.25);
    	RemoveBuildingForPlayer(playerid, 1522, 2068.1641, -1780.6094, 12.5391, 0.25);
	    RemoveBuildingForPlayer(playerid, 1216, 2069.0000, -1766.6641, 13.2109, 0.25);
	    RemoveBuildingForPlayer(playerid, 1216, 2068.9375, -1767.8359, 13.2109, 0.25);
    }
    return true;
}
//=================================//
stock strmatch(const string1[], const string2[])
{
    if ((strcmp(string1, string2, true, strlen(string2)) == 0) && (strlen(string2) == strlen(string1)))
    {
        return true;
    }
    else
    {
        return false;
    }
}
//============================================//
public PopulateBanList(playerid) //Don't forget to set curPopVar to 0 when the menu is closed.
{
	SetPVarInt(playerid, "EndOfBL", 0);
	format(gBanList[playerid], 1080, "\0");
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
		new fetch[128];
		new pcount = 0;
		new mres = 40*curPopVar[playerid];
		for(new i = (40*curPopVar[playerid]); i < (mres+40); i++) //Display 40 banned players per-page
		{
			if(pcount >= 40) break;
			cache_get_field_content(i, "bUsername", fetch);
			if(strmatch(fetch,"NULL")) {
				fetch = "\0";
			}
			format(gBanList[playerid],1080,"%s\n%s",gBanList[playerid],fetch);
			pcount++;
		}
		if(pcount < 1) 
		{
			SetPVarInt(playerid, "EndOfBL", 1);
			curPopVar[playerid] = 0;
		}
	}
	else {SCM(playerid, -1, "No bans found!");}
	ShowPlayerDialog(playerid,432,DIALOG_STYLE_LIST,"Ban list",gBanList[playerid],"Options","Next");
	return 1;
}

public PopulateBanListEx(playerid,filter[]) //Don't forget to set curPopVar to 0 when the menu is closed.
{
	SetPVarInt(playerid, "EndOfBL", 0);
	SetPVarString(playerid, "CurBLFilter", filter);
	format(gBanList[playerid], 1080, "\0");
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
		new fetch[128];
		new count = 0;
		new mres = 40*curPopVarEx[playerid];
		for(new i = mres; i < rows; i++) //Start at 40*curPopVarEx[playerid] then index through the rest
		{
			if(count >= 40) break;
			cache_get_field_content(i, "bUsername", fetch);
			if(strfind(fetch, filter, true) != -1) {
				format(gBanList[playerid],1080,"%s\n%s",gBanList[playerid],fetch);
				count++;
			}
		}
		if(count < 1) {
			SetPVarInt(playerid, "EndOfBL", 1);
			curPopVarEx[playerid] = 0;
		}
			
	}
	else {SCM(playerid, -1, "No bans found!");}
	ShowPlayerDialog(playerid,434,DIALOG_STYLE_LIST,"Ban list",gBanList[playerid],"Options","Next");
	return 1;
}
//============================================//
forward ShowBanInfo(playerid);
public ShowBanInfo(playerid)
{
	new fields, rows;
	cache_get_data(rows, fields);
	if(rows)
	{
		new reason[128], adminname[64], buser[32], bip[32], bdate[32];
		cache_get_field_content(0, "bReason", reason);
		cache_get_field_content(0, "BannedBy", adminname);
		cache_get_field_content(0, "bUsername", buser);
		cache_get_field_content(0, "bIP", bip);
		cache_get_field_content(0, "Date", bdate);
		new string[288];
		format(string,288,"Banned User:\n%s\nBanned User IP:\n%s\nBanned by:\n%s\nDate of ban:\n%s\nBan reason:\n%s",buser,bip,adminname,bdate,reason); //10 total buttons
		ShowPlayerDialog(playerid,436,DIALOG_STYLE_MSGBOX,"Ban info",string,"Unban","Exit");
	}
	return 1;
}
//============================================//
stock CreateFaction(playerid,id,name[],ranks,rights)
{
	if(FactionInfo[id][fUsed] == 1) return error(playerid, "Faction slot already in use!");
	new nom[128];
	mysql_real_escape_string(name,nom);
	new query[512];
	format(query, 512, "INSERT INTO factions (ID,Name) VALUES (%d, '%s')", id, nom);
	mysql_tquery(handlesql, query);
	FactionInfo[id][fUsed]=1;
	format(FactionInfo[id][fName], 48, "%s", name);
	format(FactionInfo[id][fMOTD], 48, "%s", name);
	for(new i=1; i < (ranks+1); i++) {
		format(FactionRank[id][i],128,"%s %i",name,i);
	}
	FactionInfo[id][fRights] = rights;
	FactionInfo[id][fFact][0] = 0.0;
	FactionInfo[id][fFact][1] = 0.0;
	FactionInfo[id][fFact][2] = 0.0;
	SaveFaction(id);
	printf("Created faction %s(%i) created by %s.",name,id,PlayerName(playerid));
	DeletePVar(playerid,"NewF_ID");
	DeletePVar(playerid,"NewF_Name");
	DeletePVar(playerid,"NewF_Ranks");
	return 1;
}
//============================================//
public DoFillUp(playerid,amount,price)
{
	new string[80];
	PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
	format(string, sizeof(string),"~r~-$%d",price);
	GameTextForPlayer(playerid, string, 5000, 1);
	GivePlayerMoneyEx(playerid,-price);
	VehicleInfo[GetPlayerVehicleID(playerid)][vFuel] += amount;
	format(string, sizeof(string), "Your vehicle has been filled up with %d litres of fuel for $%d.", amount, price);
	SendClientMessage(playerid, COLOR_WHITE, string);
}
//============================================//
//==================Tagging===================//
public SprayTag_Dialog(playerid, dType)
{
    new
    szDialog[1024],
    szBold[4],
	szColor[30]; 
	
	switch(dType)
	{
		case TYPE_LIST_MENU:
		{
			ShowPlayerDialog(playerid, SPRAYTAG_MENU, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Menu", "Create graffiti\nEdit graffiti\nDelete graffiti\nTrack tags", "Select", "Exit");
		}
        case TYPE_LIST_CREATE:
		{
			switch(spraytag_bold[playerid])
			{
				case 0: szBold = "No";
				case 1: szBold = "Yes";
            }
			switch(spraytag_color[playerid])
			{
				case -65536: szColor = "{FF0000}Red";
				case -16468988: szColor = "{04B404}Green";
				case -16730675: szColor = "{00B5CD}Light Blue";
                case -256: szColor = "{FFFF00}Yellow";
                case -16776961: szColor = "{0000FF}Blue";
                case -8092540: szColor = "{848484}Gray";
                case -65281: szColor = "{FF00FF}Pink";
				case -1: szColor = "{FFFFFF}White";
			}
			format(szDialog, sizeof szDialog, "\
				{F7EC6F}Text: %s\n\
                {F7EC6F}Font: %s\n\
                {F7EC6F}Size: %d\n\
                {F7EC6F}Color: %s\n\
                {F7EC6F}Bold: %s\n\
                {FFB957}Create tag",
				spraytag_text[playerid],
                spraytag_font[playerid],
				spraytag_size[playerid],
                szColor,
				szBold
			);
			ShowPlayerDialog(playerid, SPRAYTAG_CREATE_MAIN, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Customization", szDialog, "Select", "Exot");
		}
		case TYPE_LIST_EDIT:
		{
			switch(spraytag_bold[playerid])
			{
				case 0: szBold = "No";
				case 1: szBold = "Yes";
            }
            switch(spraytag_color[playerid])
			{
				case -65536: szColor = "{FF0000}Red";
				case -16468988: szColor = "{04B404}Green";
				case -16730675: szColor = "{00B5CD}Light Blue";
                case -256: szColor = "{FFFF00}Yellow";
				case -16776961: szColor = "{0000FF}Blue";
				case -8092540: szColor = "{848484}Gray";
				case -65281: szColor = "{FF00FF}Pink";
				case -1: szColor = "{FFFFFF}White";
			}
			format(szDialog, sizeof szDialog, "\
                {F7EC6F}Text: %s\n\
                {F7EC6F}Font: %s\n\
                {F7EC6F}Size: %d\n\
                {F7EC6F}Color: %s\n\
				{F7EC6F}Bold: %s\n\
				{FFB957}Create tag",
                spraytag_text[playerid],
				spraytag_font[playerid],
                spraytag_size[playerid],
                szColor,
				szBold
			);
			ShowPlayerDialog(playerid, SPRAYTAG_EDIT_LIST, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Customization", szDialog, "Select", "Exit");
		}
		case TYPE_LIST_TAGS:
		{
			new member = GetPVarInt(playerid, "Member");
			if(member == 0) return 1;
			new szName[MAX_PLAYER_NAME];                                       
			GetPlayerName(playerid, szName, sizeof szName);
            for(new i; i < MAX_FACTION_TAGS; i++)
			{
				new szTag[24];
				format(szTag, sizeof szTag, "{F7EC6F}Empty Slot");
				if(strfind(SprayTags[member][i][_spOwned], szName, true) != -1) {
					format(szTag, sizeof(szTag), "Spray Tag #%i", i);
                }
				format(szDialog, sizeof(szDialog), "%s%s\n", szDialog, szTag);
			}
			ShowPlayerDialog(playerid, SPRAYTAG_EDIT_MAIN, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Edit your tags", szDialog, "Select", "Exit");
		}
		case TYPE_LIST_TAGS_DELETE:
		{
			new member = GetPVarInt(playerid, "Member");
			if(member == 0) return 1;
			new	szName[MAX_PLAYER_NAME];                
			GetPlayerName(playerid, szName, sizeof szName);                                     
			for(new i; i < MAX_FACTION_TAGS; i++)
			{
				new szTag[24];
                format(szTag, sizeof szTag, "{F7EC6F}Empty Slot");
				if(strfind(SprayTags[member][i][_spOwned], szName, true) != -1)
				{
					format(szTag, sizeof(szTag), "Spray Tag #%i", i);
				}
				format(szDialog, sizeof(szDialog), "%s%s\n", szDialog, szTag);
			}
			ShowPlayerDialog(playerid, SPRAYTAG_DELETE, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Delete your tags", szDialog, "Select", "Exit");
		}
		case TYPE_LIST_TAGS_CREATE:
		{
			new member = GetPVarInt(playerid, "Member");
			if(member == 0) return 1;		
			new	szName[MAX_PLAYER_NAME];              
			GetPlayerName(playerid, szName, sizeof szName);                                 
			for(new i; i < MAX_FACTION_TAGS; i++)
			{
				new szTag[24];
				format(szTag, sizeof szTag, "{F7EC6F}Empty Slot");
				if(strfind(SprayTags[member][i][_spOwned], szName, true) != -1)
				{
					format(szTag, sizeof(szTag), "Spray Tag #%i", i);
				}
				format(szDialog, sizeof(szDialog), "%s%s\n", szDialog, szTag);
			}
			ShowPlayerDialog(playerid, SPRAYTAG_CREATE, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Select a free slot", szDialog, "Select", "Exit");
		}
        case TYPE_LIST_TAGS_FIND:
		{
			new member = GetPVarInt(playerid, "Member");
			if(member == 0) return 1;
			new szName[MAX_PLAYER_NAME];                
            GetPlayerName(playerid, szName, sizeof szName);                                    
			for(new i; i < MAX_FACTION_TAGS; i++)
			{
				new szTag[24];
                format(szTag, sizeof szTag, "{F7EC6F}Empty Slot");
				if(strfind(SprayTags[member][i][_spOwned], szName, true) != -1)
				{
					format(szTag, sizeof(szTag), "Spray Tag #%i", i);
				}
				format(szDialog, sizeof(szDialog), "%s%s\n", szDialog, szTag);
			}
			ShowPlayerDialog(playerid, SPRAYTAG_FIND, DIALOG_STYLE_LIST, "{F7EC6F}Spray Tag - {469BF0}Select the tag you want to find.", szDialog, "Select", "Exit");
		}
	}
	return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{		
	if(GetPVarInt(playerid, "PlantPayphone") == 1) {
		if(response == EDIT_RESPONSE_CANCEL) {
			if(IsValidDynamicObject(tCreatePhoneObjID[playerid])) DestroyDynamicObject(tCreatePhoneObjID[playerid]);
			tCreatePhoneObjID[playerid] = INVALID_OBJECT_ID;
			DeletePVar(playerid, "PlantPayphone");
		} else if(response == EDIT_RESPONSE_FINAL) {
			MoveDynamicObject(objectid, x, y, z, 2.0, rx, ry, rz);
			
			new i = -1;
			for(new p=0; p < MAX_PAYPHONES; p++)
			{
				if(!Iter_Contains(phoneObjects, p)) {
					i=p;
					break;
				}
			}
			if(i == -1) return error(playerid, "Couldn't create payphone, limit has been reached.");	
			new name[48];
			format(name, 48, "Payphone (%s)", GetZoneArea(x, y, z));
			mysql_real_escape_string(name, name);
			new vw = GetPlayerVirtualWorld(playerid), int = GetPlayerInterior(playerid);
			new query[424];			
			format(query, sizeof(query), "INSERT INTO `payphones` (`pPosX`, `pPosY`, `pPosZ`, `pRotX`, `pRotY`, `pRotZ`,`VW`, `Int`, `Name`) VALUES(%f, %f, %f, %f, %f, %f, %d, %d, '%s')",
				x,
				y,
				z,
				rx,
				ry,
				rz,				
				vw,
				int,
				name
			);
			mysql_tquery(handlesql, query, "thread_CreatePhone", "dd", playerid, i);
			
			phoneInfo[i][pPosX] = x;
			phoneInfo[i][pPosY] = y;
			phoneInfo[i][pPosZ] = z;
			phoneInfo[i][pRotX] = rx;
			phoneInfo[i][pRotY] = ry;
			phoneInfo[i][pRotZ] = rz;
			phoneInfo[i][phoneVW] = vw;
			phoneInfo[i][phoneInt] = int;
			format(phoneInfo[i][phoneName], 48, "Payphone (%s)", GetZoneArea(x, y, z));
			
			DestroyDynamicObject(objectid);
			phoneInfo[i][phoneObjID] = CreateDynamicObject(1216, x, y, z, rx, ry, rz, vw, int);
			phoneInfo[i][phoneNameTag] = CreateDynamic3DTextLabel("   [Payphone]\ntype /payphone to use.", COLOR_ORANGE, x, y, z + 1.3, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw, int, -1, 30.0);
			Iter_Add(phoneObjects, i);

			tCreatePhoneObjID[playerid] = INVALID_OBJECT_ID;
			SendClientMessage(playerid, COLOR_GREEN, "Payphone created! Use /payphonehelp for more options.");
			DeletePVar(playerid, "PlantPayphone");
		}
	} else {
		if(response == EDIT_RESPONSE_FINAL)
		{
			if(GetPVarInt(playerid, "SPRAYTAG_EDIT") == 1)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
				{
					DestroyDynamicObject(spraytag_object[playerid]);
					DeletePVar(playerid, "SPRAYTAG_EDIT");
					return SendClientMessage(playerid, -1, "You are not near the spray tag.");
				}              
				spraytag_positions[playerid][0] = x;
				spraytag_positions[playerid][1] = y;
				spraytag_positions[playerid][2] = z;
				spraytag_positions[playerid][3] = rx;
				spraytag_positions[playerid][4] = ry;
				spraytag_positions[playerid][5] = rz;
						   
				spraytag_timer[playerid] = SetTimerEx("SprayTag", 1000, true, "ii", playerid, 2);
						   
				ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);
						   
				spraytag_timer_left[playerid] = SPRAY_TAG_TIMER;
				DestroyDynamicObject(spraytag_object[playerid]);
			}
			if(GetPVarInt(playerid, "SPRAYTAG_EDIT") == 2)
			{
				new member = GetPVarInt(playerid, "Member");
				new iIndex = spraytag_slot[playerid];            
				if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
				{
					DestroyDynamicObject(SprayTags[member][iIndex][_spObject]);
					SprayTag_Spawn(playerid, iIndex);
					DeletePVar(playerid, "SPRAYTAG_EDIT");
					return SendClientMessage(playerid, -1, "You are not near the spray tag.");
				}                               
				spraytag_positions[playerid][0] = x;
				spraytag_positions[playerid][1] = y;
				spraytag_positions[playerid][2] = z;
				spraytag_positions[playerid][3] = rx;
				spraytag_positions[playerid][4] = ry;
				spraytag_positions[playerid][5] = rz;
						   
				spraytag_timer[playerid] = SetTimerEx("SprayTag", 1000, true, "ii", playerid, 1);
						   
				ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);
						   
				spraytag_timer_left[playerid] = SPRAY_TAG_TIMER;
				DestroyDynamicObject(SprayTags[member][iIndex][_spObject]);
			}
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			if(GetPVarInt(playerid, "SPRAYTAG_EDIT") >= 1)
			{
				DestroyDynamicObject(spraytag_object[playerid]);
				DestroyDynamicObject(SprayTags[GetPVarInt(playerid, "Member")][spraytag_slot[playerid]][_spObject]);
				SprayTag_Spawn(playerid, spraytag_slot[playerid]);
				DeletePVar(playerid, "SPRAYTAG_EDIT");
			}
		}
	}
	return 1;
}

public SprayTag(playerid, type)
{
	new iIndex = spraytag_slot[playerid];
    if(!IsPlayerConnected(playerid))
	{
		spraytag_timer_left[playerid] = 0;
		DeletePVar(playerid, "SPRAYTAG_EDIT");
		KillTimer(spraytag_timer[playerid]);
		return 1;
	}  
	spraytag_timer_left[playerid]--;
	switch(type)
	{
		case 1:
		{
			if(spraytag_timer_left[playerid] == 0)
			{
				new member = GetPVarInt(playerid, "Member");
				DestroyDynamicObject(SprayTags[member][iIndex][_spObject]);
				SprayTags[member][iIndex][_spPosX] = spraytag_positions[playerid][0];
                SprayTags[member][iIndex][_spPosY] = spraytag_positions[playerid][1];
                SprayTags[member][iIndex][_spPosZ] = spraytag_positions[playerid][2];
				SprayTags[member][iIndex][_spPosRX] = spraytag_positions[playerid][3];
				SprayTags[member][iIndex][_spPosRY] = spraytag_positions[playerid][4];
                SprayTags[member][iIndex][_spPosRZ] = spraytag_positions[playerid][5];
                format(SprayTags[member][iIndex][_spText], 128, spraytag_text[playerid]);
				format(SprayTags[member][iIndex][_spFont], 128, spraytag_font[playerid]);
                SprayTags[member][iIndex][_spFontColor] = spraytag_color[playerid];
                SprayTags[member][iIndex][_spFontSize] = spraytag_size[playerid];
                SprayTags[member][iIndex][_spBold] = spraytag_bold[playerid];
                SprayTag_Spawn(playerid, iIndex);
                ClearAnimations(playerid);
				ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0, 1);
                KillTimer(spraytag_timer[playerid]);
				SendClientMessage(playerid, -1, "Graffiti object created!");
				new string[84];
				format(string, sizeof(string), "AdmWarning: %s (ID: %i) has created a graffiti object.", PlayerInfo[playerid][pName], playerid);
				SendAdminMessage(COLOR_YELLOW, string);				
			}
		}
		case 2:
		{
			if(spraytag_timer_left[playerid] == 0)
			{
				SprayTag_Create(playerid, spraytag_slot[playerid]);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0, 1);
				KillTimer(spraytag_timer[playerid]);
			}
		}
	}
	DeletePVar(playerid, "SPRAYTAG_EDIT");
	return 1;
}

public SprayTag_Create(playerid, iIndex)
{
	new member = GetPVarInt(playerid, "Member");
    GetPlayerName(playerid, SprayTags[member][iIndex][_spOwned], MAX_PLAYER_NAME);
       
	SprayTags[member][iIndex][_spPosX] = spraytag_positions[playerid][0];
	SprayTags[member][iIndex][_spPosY] = spraytag_positions[playerid][1];
	SprayTags[member][iIndex][_spPosZ] = spraytag_positions[playerid][2];
    SprayTags[member][iIndex][_spPosRX] = spraytag_positions[playerid][3];
    SprayTags[member][iIndex][_spPosRY] = spraytag_positions[playerid][4];
	SprayTags[member][iIndex][_spPosRZ] = spraytag_positions[playerid][5];
       
	format(SprayTags[member][iIndex][_spText], 50, spraytag_text[playerid]);
	format(SprayTags[member][iIndex][_spFont], 50, spraytag_font[playerid]);
       
	SprayTags[member][iIndex][_spFontColor] = spraytag_color[playerid];
	SprayTags[member][iIndex][_spFontSize] = spraytag_size[playerid];
	SprayTags[member][iIndex][_spBold] = spraytag_bold[playerid];
       
	SprayTag_Spawn(playerid, iIndex);
       
    new szMessage[128];
	format(szMessage, sizeof szMessage, "[Spray Tag] You have created a tag. Spray ID: #%i.", iIndex);
	SendClientMessage(playerid, -1, szMessage);            
}

stock SprayTag_Spawn(playerid, iIndex)
{
	new tagobj = 19353, member = GetPVarInt(playerid, "Member");
	if(strlen(SprayTags[member][iIndex][_spText]) > 25) { tagobj=19445; }
	SprayTags[member][iIndex][_spObject] = CreateDynamicObject(tagobj, SprayTags[member][iIndex][_spPosX], SprayTags[member][iIndex][_spPosY], SprayTags[member][iIndex][_spPosZ], SprayTags[member][iIndex][_spPosRX], SprayTags[member][iIndex][_spPosRY], SprayTags[member][iIndex][_spPosRZ], SprayTags[member][iIndex][_spVW], SprayTags[member][iIndex][_spInt], -1, SPRAY_TAG_OBJECT_DISTANCE);
	SetDynamicObjectMaterialText(SprayTags[member][iIndex][_spObject], 0, SprayTags[member][iIndex][_spText], OBJECT_MATERIAL_SIZE_512x512, SprayTags[member][iIndex][_spFont], SprayTags[member][iIndex][_spFontSize], SprayTags[member][iIndex][_spBold], SprayTags[member][iIndex][_spFontColor], 0, 1);
	return 1;
}

stock SprayTag_Clear(playerid, iIndex)
{
	new member = GetPVarInt(playerid, "Member");
	format(SprayTags[member][iIndex][_spOwned], 32, "Ninguem");
    format(SprayTags[member][iIndex][_spText], 32, "Example");
    format(SprayTags[member][iIndex][_spFont], 32, "Arial");
    SprayTags[member][iIndex][_spFontSize] = 24;
	SprayTags[member][iIndex][_spBold] = 0;
    SprayTags[member][iIndex][_spFontColor] = -1;
    SprayTags[member][iIndex][_spPosX] = 0.0;
    SprayTags[member][iIndex][_spPosY] = 0.0;
    SprayTags[member][iIndex][_spPosZ] = 0.0;
    SprayTags[member][iIndex][_spPosRX] = 0.0;
    SprayTags[member][iIndex][_spPosRY] = 0.0;
    SprayTags[member][iIndex][_spPosRZ] = 0.0;
    SprayTags[member][iIndex][_spVW] = 0;
	SprayTags[member][iIndex][_spInt] = 0;
    if(IsValidDynamicObject(SprayTags[member][iIndex][_spObject])) { DestroyDynamicObject(SprayTags[member][iIndex][_spObject]); }
	return 1;
}

stock SprayTag_ClearEx(member, iIndex)
{
	format(SprayTags[member][iIndex][_spOwned], 32, "Ninguem");
    format(SprayTags[member][iIndex][_spText], 32, "Example");
    format(SprayTags[member][iIndex][_spFont], 32, "Arial");
    SprayTags[member][iIndex][_spFontSize] = 24;
	SprayTags[member][iIndex][_spBold] = 0;
    SprayTags[member][iIndex][_spFontColor] = -1;
    SprayTags[member][iIndex][_spPosX] = 0.0;
    SprayTags[member][iIndex][_spPosY] = 0.0;
    SprayTags[member][iIndex][_spPosZ] = 0.0;
    SprayTags[member][iIndex][_spPosRX] = 0.0;
    SprayTags[member][iIndex][_spPosRY] = 0.0;
    SprayTags[member][iIndex][_spPosRZ] = 0.0;
    SprayTags[member][iIndex][_spVW] = 0;
	SprayTags[member][iIndex][_spInt] = 0;
    if(IsValidDynamicObject(SprayTags[member][iIndex][_spObject])) { DestroyDynamicObject(SprayTags[member][iIndex][_spObject]); }
	return 1;
}

stock HexToInt(string[])
{
	if (string[0] == 0) return 0;   
	new
	i,
    cur = 1,
    res = 0;
	
	for (i = strlen(string); i > 0; i --) {
		if (string[i-1] < 58) res = res + cur * (string[i-1]-48); else res = res + cur * (string[i-1]-65+10);
		cur = cur * 16;
	}
	return res;
}
//============================================//
stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}
//============================================//
public ChangeDynamicObjectMaterial(obj, idx, mat)
{
	SetDynamicObjectMaterial(obj, idx, MaterialIDs[mat][ModelID], MaterialIDs[mat][TxdName], MaterialIDs[mat][TextureName], 0);
}
//============================================//
stock HouseLights(houseid)
{
    foreach(new i : Player)
	{
	    if(GetPVarInt(i, "PlayerLogged") == 1)
	    {
	        if(GetPVarInt(i, "HouseEnter") == houseid)
	        {
	            if(GetPlayerVirtualWorld(i) == houseid)
				{
					if(HouseInfo[houseid][hLights] == 0)
					{
						TextDrawHideForPlayer(i, BlindDraw2);
					}
					else
					{
						TextDrawHideForPlayer(i, BlindDraw2);
						TextDrawShowForPlayer(i, BlindDraw2);
					}
				}
	        }
		}
	}
	return 1;
}
//============================================//
stock HouseAlarm(houseid, toggle)
{
	switch(toggle)
	{
	    case 0:
	    {
	        if(HouseInfo[houseid][hAlarmA] == 1)
	        {
	            HouseInfo[houseid][hAlarmA]=0;
	            DestroyDynamic3DTextLabel(HouseInfo[houseid][hAText]);
	            PlaySoundInArea(1154, HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo], 20.0);
	        }
	    }
	    case 1:
	    {
	        if(HouseInfo[houseid][hAlarmA] == 0)
	        {
	            HouseInfo[houseid][hAlarmA]=1;
	            HouseInfo[houseid][hAText]=CreateDynamic3DTextLabel("*RING* HOUSE ALARM *RING*", 0xC2A2DAFF, HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo]+0.50, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 50.0);
	            foreach(new i : Player)
			    {
                    if(IsPlayerInRangeOfPoint(p, 30.0, HouseInfo[houseid][hXi], HouseInfo[houseid][hYi], HouseInfo[houseid][hZi]))
                    {
                        if(GetPlayerVirtualWorld(p) == houseid)
					    {
				            SendClientMessage(p, COLOR_PURPLE, "*** The house alarm begins to ring.");
				        }
				    }
		        }
	        }
	    }
	}
	return 1;
}
//============================================//
public PlayerGetup(playerid) return ApplyAnimation(playerid,"PED","getup",4.0,0,0,0,0,0);
//============================================//
stock SendBugMessage(playerid,string2[])
{
	if(GetPVarInt(playerid, "TrackBug") == 1)
	{
		if(IsPlayerConnected(GetPVarInt(playerid, "TrackBugPL")) && IsACop(GetPVarInt(playerid, "TrackBugPL")))
		{
			new string[256];
			format(string, sizeof(string),"** (MOLE) %s **", string2);
			SendClientMessage(GetPVarInt(playerid, "TrackBugPL"),COLOR_LIGHTBLUE,string);
		}
		else DeletePVar(playerid, "TrackBug"), DeletePVar(playerid, "TrackBugPL");
	}
	return true;
}
//============================================//
stock FurnRight(playerid, type) {
	new key = -1;
	if(type == 1) {
		key = GetPVarInt(playerid, "HouseEnter");
		if(key == -1) { key = GetPVarInt(playerid, "GarageEnter"); }
		if(key != -1) {
			if(HouseInfo[key][hOwned] == 1) {
				if(IsPlayerInRangeOfPoint(playerid, 150.0, HouseInfo[key][hXi], HouseInfo[key][hYi], HouseInfo[key][hZi]) || IsPlayerInRangeOfPoint(playerid, 150.0, HouseInfo[key][hgXi], HouseInfo[key][hgYi], HouseInfo[key][hgZi])) {
					if(GetPlayerVirtualWorld(playerid) == key) {
						if(strlen(HouseInfo[key][hFurnR]) > 0) {
							if(strcmp(HouseInfo[key][hFurnR], PlayerInfo[playerid][pUsername], true) == 0) {
								return key;
							}
						}

						if(strlen(HouseInfo[key][hOwner]) > 0) {
							if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0) {
								return key;
							}
						}
					}
				}
			}
		}
		
		foreach(new h : HouseIterator) {
			if(HouseInfo[h][hOwned] == 1) {
				if(IsPlayerInRangeOfPoint(playerid, HOUSE_PLANT_DISTANCE, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo])) {
					if(strlen(HouseInfo[h][hFurnR]) > 0) {
						if(strcmp(HouseInfo[h][hFurnR], PlayerInfo[playerid][pUsername], true) == 0) {
							return h;
						}
					}

					if(strlen(HouseInfo[h][hOwner]) > 0) {
						if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0) {
							return h;
						}
					}
				}
			}
		}
	} else {
		key = GetPVarInt(playerid, "BizzEnter");

		if(BizInfo[key][Owned] == 1) {
			if(IsPlayerInRangeOfPoint(playerid, 150.0, BizInfo[key][Xi], BizInfo[key][Yi], BizInfo[key][Zi])) {
				if(GetPlayerVirtualWorld(playerid) == key) {
					if(strlen(BizInfo[key][FurnR]) > 0) {
						if(strcmp(BizInfo[key][FurnR], PlayerInfo[playerid][pUsername], true) == 0) {
							return key;
						}
					}

					if(strlen(BizInfo[key][Owner]) > 0) {
						if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0) {
							return key;
						}
					}
				}
			}
		}
		
		foreach(new h : BizIterator) {
			if(BizInfo[h][Owned] == 1) {
				if(IsPlayerInRangeOfPoint(playerid, BUSINESS_PLANT_DISTANCE, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo])) {
					if(strlen(BizInfo[h][FurnR]) > 0) {
						if(strcmp(BizInfo[h][FurnR], PlayerInfo[playerid][pUsername], true) == 0) {
							return h;
						}
					}

					if(strlen(BizInfo[h][Owner]) > 0) {
						if(strcmp(BizInfo[h][Owner], PlayerInfo[playerid][pUsername], true) == 0) {
							return h;
						}
					}
				}
			}
		}
	}
	return -1;
}
//============================================//
stock FurnRightEx(playerid, type) {
	new key = -1;
	if(type == 1) {
		key = GetPVarInt(playerid, "HouseEnter");
		if(key == -1) { key = GetPVarInt(playerid, "GarageEnter"); }
		if(key != -1) {
			if(HouseInfo[key][hOwned] == 1) {
				if(IsPlayerInRangeOfPoint(playerid, 150.0, HouseInfo[key][hXi], HouseInfo[key][hYi], HouseInfo[key][hZi]) || IsPlayerInRangeOfPoint(playerid, 150.0, HouseInfo[key][hgXi], HouseInfo[key][hgYi], HouseInfo[key][hgZi])) {
					if(GetPlayerVirtualWorld(playerid) == key) {
						if(strlen(HouseInfo[key][hFurnR]) > 0) {
							if(strcmp(HouseInfo[key][hFurnR], PlayerInfo[playerid][pUsername], true) == 0) {
								return true;
							}
						}

						if(strlen(HouseInfo[key][hOwner]) > 0) {
							if(strcmp(HouseInfo[key][hOwner], PlayerInfo[playerid][pUsername], true) == 0) {
								return true;
							}
						}
					}
				}
			}
		}
		
		foreach(new h : HouseIterator) {
			if(HouseInfo[h][hOwned] == 1) {
				if(IsPlayerInRangeOfPoint(playerid, HOUSE_PLANT_DISTANCE, HouseInfo[h][hXo], HouseInfo[h][hYo], HouseInfo[h][hZo])) {
					if(strlen(HouseInfo[h][hFurnR]) > 0) {
						if(strcmp(HouseInfo[h][hFurnR], PlayerInfo[playerid][pUsername], true) == 0) {
							return true;
						}
					}

					if(strlen(HouseInfo[h][hOwner]) > 0) {
						if(strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true) == 0) {
							return true;
						}
					}
				}
			}
		}
	} else {
		key = GetPVarInt(playerid, "BizzEnter");

		if(BizInfo[key][Owned] == 1) {
			if(IsPlayerInRangeOfPoint(playerid, 150.0, BizInfo[key][Xi], BizInfo[key][Yi], BizInfo[key][Zi])) {
				if(GetPlayerVirtualWorld(playerid) == key) {
					if(strlen(BizInfo[key][FurnR]) > 0) {
						if(strcmp(BizInfo[key][FurnR], PlayerInfo[playerid][pUsername], true) == 0) {
							return true;
						}
					}

					if(strlen(BizInfo[key][Owner]) > 0) {
						if(strcmp(BizInfo[key][Owner], PlayerInfo[playerid][pUsername], true) == 0) {
							return true;
						}
					}
				}
			}
		}
		
		foreach(new h : BizIterator) {
			if(BizInfo[h][Owned] == 1) {
				if(IsPlayerInRangeOfPoint(playerid, BUSINESS_PLANT_DISTANCE, BizInfo[h][Xo], BizInfo[h][Yo], BizInfo[h][Zo])) {
					if(strlen(BizInfo[h][FurnR]) > 0) {
						if(strcmp(BizInfo[h][FurnR], PlayerInfo[playerid][pUsername], true) == 0) {
							return true;
						}
					}

					if(strlen(BizInfo[h][Owner]) > 0) {
						if(strcmp(BizInfo[h][Owner], PlayerInfo[playerid][pUsername], true) == 0) {
							return true;
						}
					}
				}
			}
		}
	}
	return false;
}
//============================================//
stock IsDoorObject(id)
{
	if(id == 3109) return true;
	else if(id == 3089) return true;
	else if(id == 3061) return true;
    else if(id >= 2946 && id <= 2955) return true;
	else if(id == 977) return true;
	else if(id == 1493) return true;
	else if(id == 1495) return true;
    else if(id == 1497) return true;
	else if(id == 1498) return true;
	else if(id == 1500) return true;
    else if(id == 1501) return true;
	else if(id >= 1504 && id <= 1522) return true;
	else if(id >= 1532 && id <= 1569) return true;
	return false;
}
//============================================//
stock GetObjName(objectid)
{
	new string[128];
	new found = 0, foundid;
    for(new i = 0; i < MAX_OBJECT_ARRAY; i++)
    {
	    if(found == 0)
		{
            if(ObjectList[i][oID] == objectid)
            {
                found++;
                foundid=i;
            }
        }
    }
    if(found == 0){
    format(string, 128, "%d", objectid);
	} else {
	format(string, 128, "%s", ObjectList[foundid][oName]);}
	return string;
}
//============================================//
stock SendClientMessageEx(playerid, color, msg[]) {
    if(strlen(msg) > MAX_MSG_LENGTH) {
	    new buffer[MAX_MSG_LENGTH];
	    strmid(buffer, msg, 140, strlen(msg), MAX_MSG_LENGTH);
	    strdel(msg, 141, strlen(msg));
	    strins(msg, "-..", 140, strlen(msg));
	    strins(buffer, "..-", 0, MAX_MSG_LENGTH);
     	SendClientMessage(playerid, color, msg);
      	SendClientMessage(playerid, color, buffer);
	} else {
	    SendClientMessage(playerid, color, msg);
	}
}

stock SendClientMessageExCol(playerid, color, msg[], col[]) {
    if(strlen(msg) > MAX_MSG_LENGTH) {
	    new buffer[MAX_MSG_LENGTH];
	    strmid(buffer, msg, 140, strlen(msg), MAX_MSG_LENGTH);
	    strdel(msg, 141, strlen(msg));
	    strins(msg, "-..", 140, strlen(msg));
		format(buffer, sizeof(buffer), "{%s}..-%s", col, buffer);
     	SendClientMessage(playerid, color, msg);
      	SendClientMessage(playerid, color, buffer);
	} else {
	    SendClientMessage(playerid, color, msg);
	}
}

stock SendClientMessageToAllEx(color, msg[]) {
    if(strlen(msg) > MAX_MSG_LENGTH) {
	    new buffer[MAX_MSG_LENGTH];
	    strmid(buffer, msg, 140, strlen(msg), MAX_MSG_LENGTH);
	    strdel(msg, 139, strlen(msg));
	    strins(msg, "-..", 140, strlen(msg));
	    strins(buffer, "..-", 0, MAX_MSG_LENGTH);
     	SendClientMessageToAll(color, msg);
      	SendClientMessageToAll(color, buffer);
	} else {
	    SendClientMessageToAll(color, msg);
	}
}
//============================================//
stock AddPlayerTag(playerid, msg[])
{
    strmid(PlayerInfo[playerid][pTagMsg], msg, 0, strlen(msg), 255);
    SetPVarInt(playerid, "TagUse", 1);
	return true;
}
//============================================//
stock RemovePlayerTag(playerid)
{
	DeletePVar(playerid, "TagUse");
	return 1;
}
//============================================//
stock IsInvalidVeh(vehicleid)
{
	new id = GetVehicleModel(vehicleid);
	if(id == 509 || id == 481 || id == 510 || id == 471 || id == 571 || id == 572) return true;
	return false;
}
//============================================//
stock SendPlayerSMS(playerid, text[], sender[])
{
    if (!CheckInvItem(playerid, 405)) return true;
    new string[128],sendername[MAX_PLAYER_NAME];
    format(string, sizeof(string), "TXT: %s, Sender: '%s'.", text, sender);
    SendClientMessage(playerid, COLOR_YELLOW, string);
    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	GiveNameSpace(sendername);
    format(string, sizeof(string), "*** %s's phone beeps.", sendername);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    return true;
}
//============================================//
stock GMTime()
{
    GMSec+=GM_DAY_AMOUNT;
	if(GMSec >= 60) {
	    GMSec=0, GMMin++; 
	}
	if(GMMin >= 60) {
	    GMSec=0, GMMin=0, GMHour++;
	    new string[128];
        format(string, sizeof(string), "The time is now %d:00.", GMHour);
		SendClientMessageToAll(COLOR_WHITE, string); 
		for(new i=1; i < MAX_FACTIONS; i++) {
			FactionInfo[i][fWepCount]--;
			FactionInfo[i][fDrugCount] -= 100;
			if(FactionInfo[i][fWepCount] < 0) { FactionInfo[i][fWepCount] = 0; }
			if(FactionInfo[i][fDrugCount] < 0) { FactionInfo[i][fDrugCount] = 0; }
			SaveFactionShipment(i);
		}
	}
	if(GMHour >= 24) {
	    GMSec=0, GMMin=0, GMHour=0;
	    new weather = random(16)+1;
	    switch(weather)
	    {
	        case 0,1: Weather=1;
		    case 2: Weather=2;
		    case 3: Weather=3;
		    case 4: Weather=4;
		    case 5: Weather=5;
		    case 6: Weather=6;
		    case 7,8,9: Weather=7;
		    case 10: Weather=10;
		    case 11: Weather=11;
		    case 12: Weather=12;
		    case 13: Weather=13;
		    case 14: Weather=18;
		    case 15: Weather=8;
		    case 16: Weather=9;
	    }
        SetWeatherEx(Weather);
		SetWorldTimeEx();
    }
	return 1;
}
//============================================//
stock SetWorldTimeEx() {
    foreach(new i : Player) {
		if(GetPVarInt(i, "DrugTime") == 0) {
	        SetPlayerTime(i, GMHour, GMMin);
	    }
	}
	return 1;
}
//============================================//
stock PoliceWarnArea(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
    if(X > 46.7115 && Y > -2755.979 && X < 2931.147 && Y < -548.8602) return true;
    if(GetPVarInt(playerid, "HouseEnter") != 0) return true;
    if(GetPVarInt(playerid, "IntEnter") != 0) return true;
    if(GetPVarInt(playerid, "BizzEnter") != 0) return true;
	return false;
}
//============================================//
forward ShotFired(playerid);
public ShotFired(playerid)
{
	new string[256];
    if(GetPVarInt(playerid, "Member") == 1) return 1;
    if(GetPVarInt(playerid, "FireDelay") > GetCount()) return 1;
    SetPVarInt(playerid, "FireDelay", GetCount()+600000);
    if(PlayerInfo[playerid][pPlayerWeapon] >= 22 && PlayerInfo[playerid][pPlayerWeapon] <= 34)
    {
	    if(PoliceWarnArea(playerid))
	    {
		    format(string, sizeof(string), "HQ: All Units - HQ: Shots fired | Location: %s.", PrintPlayerArea(playerid));
		    SendFactionMessage(1, COLOR_BLUE, string);
	    }
	}
	return 1;
}
//============================================//
stock CreateCorpse(playerid)
{
    new found = 0, foundid = 0, Float:x, Float:y, Float:z, sex[25];
    GetPlayerPos(playerid, x, y, z);
	for(new o = 0; o < sizeof(CorpInfo); o++)
	{
		if(o != 0)
		{
	        if(CorpInfo[o][cUsed] == 0 && found == 0)
		    {
		        found++;
			    foundid=o;
            }
        }
    }
    if(found == 0) return 1;
    CorpInfo[foundid][cUsed]=1;
    CorpInfo[foundid][cVeh]=0;
    format(CorpInfo[foundid][cName], 25, "%s", PlayerName(playerid));
    CorpInfo[foundid][cTime]=15;
    CorpInfo[foundid][cX]=x;
    CorpInfo[foundid][cY]=y;
    CorpInfo[foundid][cZ]=z;
	CorpInfo[foundid][cSkin]=GetPlayerSkin(playerid);
	CorpInfo[foundid][cBody]=CreateActor(GetPlayerSkin(playerid), x, y, z, 0.0);
	SetActorInvulnerable(CorpInfo[foundid][cBody], true);
	ApplyActorAnimation(CorpInfo[foundid][cBody], "PED", "KO_shot_stom", 4.0, 0, 0, 0, 1, 0);
    switch(GetPVarInt(playerid, "Sex")) {
        case 2: sex = "Female";
        default: sex = "Male";
    }
    
    format(CorpInfo[foundid][cNote1], 256, "Name: %s | Age: %d | Sex: %s", PlayerName(playerid), GetPVarInt(playerid, "Age"), sex);
    if(GetPVarInt(playerid, "DR") == 0) {
        format(CorpInfo[foundid][cNote2], 256, "Death Reason: Killed in an unknown way.", sex);
	} else {
        switch(GetPVarInt(playerid, "DR"))
        {
            case 0: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Beaten to death.", sex);
            case 1 .. 15: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Beaten to death with a blunt object.", sex);
            case 22 .. 34: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Shot with a %s.", DeathNames[GetPVarInt(playerid, "DR")]);
            case 49: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Killed by a vehicle.", sex);
            case 53: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Drowned in the water.", sex);
            case 54: format(CorpInfo[foundid][cNote2], 256, "Death Reason: Fell from a high height or committed suicide.", sex);
        }
    }
    CorpInfo[foundid][cText]=CreateDynamic3DTextLabel("| Corpse |\npress '~k~~CONVERSATION_YES~' to examine!", 0x33CCFFFF, x, y, z-0.4, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0);
	return 1;
}
//============================================//
stock RemoveCorpse(id)
{
	if(id == 0) return 1;
	if(CorpInfo[id][cUsed] == 1)
	{
	    CorpInfo[id][cUsed]=0;
	    CorpInfo[id][cX]=0;
        CorpInfo[id][cY]=0;
        CorpInfo[id][cZ]=0;
		CorpInfo[id][cSkin]=0;
		if(IsValidActor(CorpInfo[id][cBody])) {
			DestroyActorEx(CorpInfo[id][cBody]);
		}
        if(CorpInfo[id][cVeh] > 0 && GetVehicleModel(CorpInfo[id][cVeh]) > 0) {
		    VehicleInfo[CorpInfo[id][cVeh]][vCorp]=0;
		} else {
		DestroyDynamic3DTextLabel(CorpInfo[id][cText]); }
	}
	return 1;
}
//============================================//
public HandlePlayerPeeping(playerid,key)
{
	SetPlayerCameraPos(playerid, HouseInfo[key][hXo], HouseInfo[key][hYo], HouseInfo[key][hZo]+2.0);
	SetPlayerCameraLookAt(playerid,HouseInfo[key][hXo], HouseInfo[key][hYo], HouseInfo[key][hZo]);
	SendClientMessage(playerid,COLOR_BLUE,"You're currently looking through the peep-hole on your front door. Retype the command to cancel (/house lookout)");
	SetPVarInt(playerid, "LastHouse", key);
	PlayerInfo[playerid][pPeeping] = 1;
	return 1;
}
//============================================//
stock GetCloseHouseSafe(playerid, key)
{
	new found = 0;
    for(new h = 0; h < MAX_HOUSE_OBJ; h++)
    {
        if(HouseInfo[key][hObject][h] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[key][hoX][h], HouseInfo[key][hoY][h], HouseInfo[key][hoZ][h]))
		    {
				if(HouseInfo[key][hoID][h] == 2332)
				{
		            found++;
		        }
		    }
        }
    }
	if(found == 0) return false;
    return true;
}
//============================================//
/*stock GetBizzSafe(playerid, key)
{
	new found = 0;
    for(new b = 0; b < MAX_HOUSE_OBJ; b++)
    {
        if(BizInfo[key][bObject][b] != 0)
		{
			if(BizInfo[key][boID][b] == 2332)
			{
				found++;
		    }
        }
    }
	if(found == 0) return false;
    return true;
}*/
//============================================//
stock GetCloseBizzSafe(playerid, key)
{
	new found = 0;
    for(new b = 0; b < MAX_HOUSE_OBJ; b++)
    {
        if(BizInfo[key][bObject][b] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.5, BizInfo[key][boX][b], BizInfo[key][boY][b], BizInfo[key][boZ][b]))
		    {
				if(BizInfo[key][boID][b] == 2332)
				{
		            found++;
		        }
		    }
        }
    }
	if(found == 0) return false;
    return true;
}
//============================================//
stock GetOccupation(jobID) {
	new job[20];
	switch(jobID) {
        case 1: job = "Mechanic";
        case 2: job = "Garbage Man";
        case 3: job = "Street Sweeper";
        case 4: job = "Food Delivery";
        case 5: job = "Taxi Driver";
        case 6: job = "Trucker";
        case 7: job = "Farmer";
        default: job = "Unemployed";
    }
    
    return job;
}
//============================================//
stock GetGenderString(gender) {
	new sex[7];
	switch(gender) {
        case 2: sex = "Female";
        default: sex = "Male";
    }
    
    return sex;
}
//============================================//
stock GetDriveLicStatus(driveLicStatus) {
	new driveLic[15];
    switch(driveLicStatus) {
        case 1: driveLic = "Passed";
        default: driveLic = "Not Passed";
    }

    return driveLic;
}
//============================================//
stock GetWeaponLicStatus(weaponLicStatus) {
	new weapLic[20];
    switch(weaponLicStatus) {
        case 1: weapLic = "Passed";
        case 2: weapLic = "Permanent Passed";
        default: weapLic = "Not Passed";
    }
    
    return weapLic;
}
//============================================//
IsNumeric(const string[]) {
	for(new i = 0, j = strlen(string); i < j; i++) {
 		if(string[i] > '9' || string[i] < '0') return 0;
	}

	return 1;
}
//============================================//
stock GetNameWithSpace(oldName[]) {
	new name[MAX_PLAYER_NAME];
	format(name, sizeof(name), "%s", oldName);
	for(new i = 0; i < strlen(name); i++) {
		if(name[i] == '_') {
			name[i] = ' ';
		}
	}
	return name;
}
//============================================//
stock GetPlayerID(name[]) {
	if(!isnull(name)) {
		foreach(new i : Player) {
			if(strmatch(PlayerName(i), name)) {
				return i;
			}
		}
	}
	return -1;
}
//============================================//
stock SendMessageByName(name[], color, msg[])
{
	foreach(new i : Player) {
		if(strmatch(PlayerName(i),name)) {
			return SendClientMessage(i, color, msg);
		}
	}
	return 1;
}
//============================================/
stock FindPlayer(name[])
{
	foreach( new i : Player) {
		if(strmatch(PlayerName(i),name)) {
			return i;
		}
	}
	return -1;
}
//============================================//
stock GetNPCID(playerid) {
    new playername[30], id = -1;
	GetPlayerName(playerid, playername, sizeof(playername));
	for(new i = 1; i < sizeof(NPCInfo); i++)
    {
        if(strcmp(playername, NPCInfo[i][nName], true) == 0)
        {
		    id = i;
        }
    }
	return id;
}
//============================================//
stock TriggerBomb(vehicleID) {
	if(VehicleInfo[vehicleID][vBomb] == 1) {
	    new Float:X, Float:Y, Float:Z, string[128];
	    GetVehiclePos(vehicleID, X, Y, Z);
	    SetVehicleVelocity(vehicleID, 0, 0, 0.2);
	    VehicleInfo[vehicleID][vBomb]=0;
	    CreateFire(X, Y, Z, 0, 0);
		CreateExplosion(X, Y, Z, 12, 15.0);
		CreateExplosion(X, Y, Z, 12, 15.0);
	    foreach (Player,i)
		{
		    if(GetPlayerVehicleID(i) == vehicleID) {
                 SetPlayerPosEx(i, X, Y, Z+0.5);
				 SetPlayerHealth(i,1.0);
				 SetPlayerHealth(i,0.0);
		    }
	    }
	    SetVehicleHealth(vehicleID, 15.0);
	    VehicleInfo[vehicleID][vHealth]=15.0;
	    //==========//
	    SendFactionMessage(2, COLOR_PINK, "HQ: All Units - HQ: Vehicle explosion.");
		format(string, sizeof(string), "HQ: Location: %s.", GetZone(X, Y, Z));
		SendFactionMessage(2, COLOR_PINK, string);
	}
	return 1;
}
//============================================//
stock BuyRims(playerid,rim) 
{
	if(VehicleInfo[GetPlayerVehicleID(playerid)][vType] != VEHICLE_PERSONAL) return error(playerid, "This is not a personal vehicle!");
	new idx = -1;
	for(new i=0; i < sizeof(Components); i++) {
		if(Components[i][cID] == rim) {
			idx = i;
		}
	}
	if(idx == -1) {
		SetPVarInt(playerid, "VEHSEC", 0);
		CallRemoteFunction("VehMod", "i", playerid);
		return error(playerid, "Rim ID not found!");
	}
	SetPVarInt(playerid, "RimID", idx);
	HideWheels(playerid);
	new str[248];
	format(str, sizeof(str), "{33FF66}Name: {FFFFFF}%s\n{33FF66}Price: {FFFFFF}$%d\n{33FF66}--------------------------------\n{33FF66}Your Cash: {FFFFFF}$%d",Components[idx][cName],Components[idx][cPrice],GetPlayerMoneyEx(playerid));
	ShowPlayerDialog(playerid,509,DIALOG_STYLE_MSGBOX,"Rim Info",str,"Buy","Cancel");
	return 1;
}
//============================================//
forward RentListSQL(playerid, key);
public RentListSQL(playerid, key)
{
	new name[25], h, str[1024], result[1024], found = 0;
    for(new i = 0; i < cache_get_row_count(); i++)
	{
	    cache_get_row(i, 1, name);
	    h = cache_get_row_int(i, 0);
	    if(h == key)
	    {
	        format(str, 1024, "%s\n{3366FF}%s", str, name);
	        found++;
	    }
	}
	if(found == 0) return scm(playerid, -1, "Error: no one rents at your property.");
	format(result, 1024, "{FFFFFF}Users who have a key to your property:\n%s", str);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Rentlist", result, "Close", "");
	return 1;
}
//============================================//
stock PayHouseRent(houseid)
{
	new name[25], query[128], found = 0, foundid = 0;
	format(name, 25, "%s", HouseInfo[houseid][hOwner]);
	foreach(new i : Player)
	{
	    if(strmatch(PlayerName(i), name))
	    {
	        found++;
	        foundid=i;
	    }
	}
	if(found != 0)
	{
	    SetPVarInt(foundid, "Bank", GetPVarInt(foundid, "Bank")+HouseInfo[houseid][hValue]);
		OnPlayerDataSave(foundid);
	}
	else // MYSQL part
	{
	    mysql_format(handlesql, query, sizeof(query), "UPDATE `accounts` SET `Bank` = `Bank` + %i WHERE `Name`='%e'", HouseInfo[houseid][hValue], name);
        mysql_tquery(handlesql, query);
	}
	return 1;
}
//============================================//
forward ViewAppInfo(playerid, name[]);
public ViewAppInfo(playerid, name[]) //case 512
{
	if(cache_get_row_count() < 1) return print("[ERROR] ViewAppInfo not returning rows.");
	new fields, rows;
	cache_get_data(rows, fields);
	new ans[10][140];
	cache_get_field_content(0, "Question1", ans[0]);
	cache_get_field_content(0, "Question2", ans[1]);
	cache_get_field_content(0, "Question3", ans[2]);
	cache_get_field_content(0, "Question4", ans[3]);
	cache_get_field_content(0, "Question5", ans[4]);
	cache_get_field_content(0, "Question6", ans[5]);
	cache_get_field_content(0, "Question7", ans[6]);
	cache_get_field_content(0, "Question8", ans[7]);
	cache_get_field_content(0, "Question9", ans[8]);
	cache_get_field_content(0, "Question10", ans[9]);
	new ip[32];
	cache_get_field_content(0, "IP", ip);
	new fetch[24];
	cache_get_field_content(0, "Time", fetch);
	new time = GetCount() - strval(fetch);
	new page = GetPVarInt(playerid, "AppPage");
	new str[1024];
	switch(page)
	{
		case 0:
		{
			format(str, sizeof(str), "%s\n{33FF66}IP: {FFFFFF}%s\n{33FF66}Wait time (minutes): {FFFFFF}%d", str, ip, (time/60000));
			format(str, sizeof(str),"%s\n{33FF66}    ---------\nOOC & IC Definition:\n{FFFFFF}%s\n{33FF66}Metagame Definition:\n{FFFFFF}%s\n{33FF66}Revenge Definition:\n{FFFFFF}%s", str, ans[0], ans[1], ans[2]);
			format(str, sizeof(str),"%s\n{33FF66}Roleplay Definition:\n{FFFFFF}%s\n{33FF66}Powergame Definition:\n{FFFFFF}%s", str, ans[3], ans[4]);
		}
		case 1:
		{
			format(str, sizeof(str), "{33FF66}What do you do if you get Deathmatched?:\n{FFFFFF}%s", ans[5]);
			format(str, sizeof(str), "%s\n{33FF66}You are being arrested ICly you...:\n{FFFFFF}%s\n{33FF66}What do you do if you spot a hacker?:\n{FFFFFF}%s", str, ans[6], ans[7]);
		}
		case 2:
		{
			format(str, sizeof(str), "{33FF66}Are you allowed to rob somebody that is under 20 Time-In-LS?:\n{FFFFFF}%s", ans[8]);
			format(str, sizeof(str), "%s\n{33FF66}Are you allowed to use /report to talk to an admin?:\n{FFFFFF}%s", str, ans[9]);
		}
	}
	new title[72];
	format(title, sizeof(title), "%s's application (pg. %d)", name, page);
	return ShowPlayerDialog(playerid, 512, DIALOG_STYLE_MSGBOX, name, str, "Next", "Back");
}
//============================================//
forward PopulateAppMenu(playerid);
public PopulateAppMenu(playerid)
{
	if(cache_get_row_count() < 1) return scm(playerid, COLOR_RED, "There are no pending applications.");
	new fields,rows;
	cache_get_data(rows, fields);
	new fetch[25], str[1025];
	for(new i = 0; i < rows; i++) {
		cache_get_field_content(i, "Name", fetch);
		format(str, 1025, "%s\n%s", str, fetch);
	}
	return ShowPlayerDialog(playerid, 510, DIALOG_STYLE_LIST, "Pending applications", str, "Select", "Exit");
}
//============================================//
forward UncuffPlayer(playerid);
public UncuffPlayer(playerid)
{
	SetPVarInt(playerid, "Cuffed", 0); 
	SetPVarInt(playerid, "CuffedTime", 0);
	TogglePlayerControllableEx(playerid,true);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(playerid, 7);
	return 1;
}
//============================================//
forward DoBareSwitch(playerid);
public DoBareSwitch(playerid)
{
	new key = GetPVarInt(playerid, "BizzKey");
	if(key == 0) return error(playerid, "You do not own a property.");
	if(GetPlayerMoneyEx(playerid) >= 2500)
	{
		scm(playerid, -1, "Business Interior has been bare switched.");
		scm(playerid, COLOR_GREY, "Note: When building a interior use /biz setexit to set the door exit...");
		scm(playerid, COLOR_GREY, "... And /biz setcp to set the checkpoint to purchase items.");
		scm(playerid, COLOR_LIGHTRED, "WARNING: Abuse of this command will result in a permanent ban and a business confiscation!");
		BizInfo[key][Xi] = 1412.639892;
		BizInfo[key][Yi] = -1.787510;
		BizInfo[key][Zi] = 1000.924377;
		BizInfo[key][IntIn] = 1;
		BizInfo[key][UD]++;
		GivePlayerMoneyEx(playerid, -2500);
		GameTextForPlayer(playerid, "~r~-$2500", 5000, 1);
		SaveBiz(key);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Insufficient funds!");
	return 1;
}
//============================================//
stock IsACop(playerid)
{
	new member = GetPVarInt(playerid, "Member");
	new rank = GetPVarInt(playerid, "Rank");
	if(member == 1 && rank >= 1) return true; //LSPD
	if(member == 8 && rank < 16 && rank > 11) return true; //Secret Service
	return false;
}
//============================================//
//============================================//
forward BuildMapObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz);
public BuildMapObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz)
{
	if(GetPVarInt(playerid, "HouseKey") != 0 && (GetPlayerVirtualWorld(playerid) == GetPVarInt(playerid, "HouseKey"))) return error(playerid, "You can't spawn objects in your house using '/map'.");
	if(objectid == 6553600) return error(playerid, "Couldn't create map object: Invalid Object-ID.");
	new string[128], found = 0;
    for(new h = 0; h < MAX_MAP_OBJ; h++)
    {
        if(MapInfo[h][mID] == 0)
		{
			found++;
			new vw = GetPlayerVirtualWorld(playerid);
			if(IsValidObjID(objectid))
			{
				MapInfo[h][mObject] = CreateDynamicObject(objectid, X, Y, Z, rotx, roty, rotz, vw);
			}
			MapInfo[h][mID] = objectid;
			MapInfo[h][mX] = X;
			MapInfo[h][mY] = Y;
			MapInfo[h][mZ] = Z;
			MapInfo[h][mrX] = rotx;
			MapInfo[h][mrY] = roty;
			MapInfo[h][mrZ] = rotz;
			MapInfo[h][mInt] = GetPlayerInterior(playerid);
			MapInfo[h][mVW] = vw;
			format(MapInfo[h][mOwner], 25, "%s", PlayerName(playerid));
			format(string, sizeof(string), "Object %d created and added to the map. VW: %d Interior: %d.", objectid, vw, GetPlayerInterior(playerid));
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			new query[524];
			mysql_format(handlesql, query, sizeof(query), "INSERT INTO mapfurn (Owner, Model, PosX, PosY, PosZ, AngX, AngY, AngZ, Interior) VALUES ('%s', %i, %f, %f, %f, %f, %f, %f, %i)", 
				MapInfo[h][mOwner], 
				MapInfo[h][mID],
				MapInfo[h][mX],
				MapInfo[h][mY],
				MapInfo[h][mZ],
				MapInfo[h][mrX],
				MapInfo[h][mrY],
				MapInfo[h][mrZ],
				MapInfo[h][mInt]);
			mysql_tquery(handlesql, query, "OnBuildMapObject", "i", h);
            Streamer_Update(playerid);
			break;
        }
    }
    if(found == 0) SendClientMessage(playerid,COLOR_LIGHTRED,"All map slots have been used!");
    return 1;
}
//============================================//
forward OnBuildMapObject(objectid);
public OnBuildMapObject(objectid)
{
	MapInfo[objectid][mDBID] = cache_insert_id();
	return 1;
}
//============================================//
stock RemoveMapObject(name[])
{
    for(new h = 0; h < MAX_MAP_OBJ; h++)
    {
        if(MapInfo[h][mObject] != 0)
		{
			if(strmatch(MapInfo[h][mOwner],name)) {
				if(IsValidDynamicObject(MapInfo[h][mObject])) { DestroyDynamicObject(MapInfo[h][mObject]); }
				MapInfo[h][mObject]=0;
				MapInfo[h][mID] = 0;
				MapInfo[h][mX] = 0.0;
				MapInfo[h][mY] = 0.0;
				MapInfo[h][mZ] = 0.0;
				MapInfo[h][mrX] = 0.0;
				MapInfo[h][mrY] = 0.0;
				MapInfo[h][mrZ] = 0.0;
				MapInfo[h][mInt] = 0;
				MapInfo[h][mVW] = 0;
				format(MapInfo[h][mOwner], 25, "");
			}
        }
    }
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM `mapfurn` WHERE `Owner`='%s'", name);
	mysql_tquery(handlesql, query);
    return 1;
}
//============================================//
stock SaveMapObj(id)
{
	if(MapInfo[id][mID] != 0 && MapInfo[id][mID] != 6553600) //Skip this index if it's blank, why would we bother?
	{
		new query[516];
		mysql_format(handlesql, query, sizeof(query), "UPDATE `mapfurn` SET Model=%d,PosX=%f,PosY=%f,PosZ=%f,AngX=%f,AngY=%f,AngZ=%f,Interior=%d,VW=%d,Locked=%d,Layer0=%d,Layer1=%d,Layer2=%d,Layer3=%d,Layer4=%d,Layer5=%d,Layer6=%d,Layer7=%d,Layer8=%d,Layer9=%d,Layer10=%d,Layer11=%d,Layer12=%d WHERE ID=%d",
		MapInfo[id][mID],
		MapInfo[id][mX],
		MapInfo[id][mY],
		MapInfo[id][mZ],
		MapInfo[id][mrX],
		MapInfo[id][mrY],
		MapInfo[id][mrZ],
		MapInfo[id][mInt],
		MapInfo[id][mVW],
		MapInfo[id][mLocked],
		MapMInfo[id][0],
		MapMInfo[id][1],
		MapMInfo[id][2],
		MapMInfo[id][3],
		MapMInfo[id][4],
		MapMInfo[id][5],
		MapMInfo[id][6],
		MapMInfo[id][7],
		MapMInfo[id][8],
		MapMInfo[id][9],
		MapMInfo[id][10],
		MapMInfo[id][11],
		MapMInfo[id][12],
		MapInfo[id][mDBID]);
		mysql_tquery(handlesql, query);
	} else {
		new query[84];
	    mysql_format(handlesql, query, sizeof(query), "DELETE FROM `mapfurn` WHERE `ID`=%d", MapInfo[id][mDBID]);
		mysql_tquery(handlesql, query);
	}
    return 1;
}
//============================================//
forward LoadMap();
public LoadMap()
{
    new fields, rows;
    cache_get_data(rows, fields);
    if(rows)
    {
		for(new i = 0; i < MAX_MAP_OBJ; i++)
		{
			if(i < cache_get_row_count())
			{
				MapInfo[i][mDBID] = cache_get_field_content_int(i, "ID");
				MapInfo[i][mID] = cache_get_field_content_int(i, "Model");
				MapInfo[i][mX] = cache_get_field_content_float(i, "PosX");
				MapInfo[i][mY] = cache_get_field_content_float(i, "PosY");
				MapInfo[i][mZ] = cache_get_field_content_float(i, "PosZ");
				MapInfo[i][mrX] = cache_get_field_content_float(i, "AngX");
				MapInfo[i][mrY] = cache_get_field_content_float(i, "AngY");
				MapInfo[i][mrZ] = cache_get_field_content_float(i, "AngZ");
				MapInfo[i][mInt] = cache_get_field_content_int(i, "Interior");
				MapInfo[i][mVW] = cache_get_field_content_int(i, "VW");
				MapInfo[i][mLocked] = cache_get_field_content_int(i, "Locked");

				if(IsValidObjID(MapInfo[i][mID])) MapInfo[i][mObject] = CreateDynamicObject(MapInfo[i][mID], MapInfo[i][mX], MapInfo[i][mY], MapInfo[i][mZ], MapInfo[i][mrX], MapInfo[i][mrY], MapInfo[i][mrZ], MapInfo[i][mVW]);

				new toget[7];
				for(new v=0; v < 13; v++) {
					format(toget,7,"Layer%d",v);
					new res = cache_get_field_content_int(i, toget);
					MapMInfo[i][v] = res;
					if(res != 0) {
						ChangeDynamicObjectMaterial(MapInfo[i][mObject], v, res);
					}
				}
			}
		}
    }
	return 1;
}
//============================================//
forward SetBizCP(playerid, keyex);
public SetBizCP(playerid, keyex)
{
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	BizInfo[keyex][CP][0] = Pos[0];
	BizInfo[keyex][CP][1] = Pos[1];
	BizInfo[keyex][CP][2] = Pos[2];
	scm(playerid, -1, "Bizz Checkpoint has been switched to your position!");
	BizInfo[keyex][UD]++;
	SaveBiz(keyex);
	return 1;
}
//============================================//
stock PopulateRLS(playerid)
{
	new list[728];
	for(new i=0; i < 11; i++)
	{
		if(strlen(RLSInfo[i][Name]) < 1) format(RLSInfo[i][Name], 72, "Unnamed");
		format(list, sizeof(list), "%s\n%s", list, RLSInfo[i][Name]);
	}
	return ShowPlayerDialog(playerid, 524, DIALOG_STYLE_LIST, "RLS Songs", list, "Select", "Exit");
}
//============================================//
forward PlayRLSSong(url[]);
public PlayRLSSong(url[])
{
	format(RadioLSStream, 129, "%s", url);
	foreach(new h : HouseIterator)
	{
		if(HouseInfo[h][hOnRLS] == 1) {
			format(HouseInfo[h][hRadioU], 129, "%s", RadioLSStream);
			PlayHouseRadio(h, RadioLSStream, 1);
		}
	}
	foreach(new b : BizIterator)
	{
		if(BizInfo[b][bOnRLS] == 1) {
			format(BizInfo[b][bRadio], 129, "%s", RadioLSStream);
			PlayBizzRadio(b, RadioLSStream, 1);
		}
	}
	foreach(new c : Vehicle)
	{
		if(VehicleInfo[c][vOnRLS] == 1) {
			PlayRadioURL(c, RadioLSStream, 1);
		}
	}
	for(new id = 0; id < sizeof(RadioInfo); id++)
	{
		if(RadioInfo[id][rStatus] == 0 || RadioInfo[id][rOnRLS] != 1) continue;
		foreach(new i : Player) {
			if(GetPlayerZone(i) == RadioInfo[id][rAreaID]) {
				PlayAudioStreamForPlayerEx(i, RadioLSStream, RadioInfo[id][rX], RadioInfo[id][rY], RadioInfo[id][rZ], 50.0, 1);
			}
		}			
	}
	return 1;
}
//============================================//
stock GetMapping(playerid,name[],mine=0)
{
	if(GetPVarInt(playerid, "Admin") < 6 && GetPVarInt(playerid, "Mapper") < 1) return 1;
	new furnitob[248], found = 0;
    for(new h = 0; h < MAX_MAP_OBJ; h++)
    {
        if(MapInfo[h][mObject] != 0)
		{
			if(IsValidObjID(MapInfo[h][mID])) {
				if(strmatch(MapInfo[h][mOwner],name)) {
					furnitob[found] = MapInfo[h][mID];
					found++;
				}
			}
        }
    }
	if(found == 0) return SCM(playerid, COLOR_LIGHTRED, "ERROR: Can't find any mapping for that player!");
	if(mine == 1)
	{
		ShowModelSelectionMenuEx(playerid, furnitob, found, "Select item", 14, 16.0, 0.0, -55.0);
	} else {
		ShowModelSelectionMenuEx(playerid, furnitob, found, "Select item", 12, 16.0, 0.0, -55.0);
	}
    return 1;
}
//============================================//
forward SelectMapObj(playerid, h);
public SelectMapObj(playerid, h) 
{
	SetPVarInt(playerid, "FurnEditH", h);
	ShowPlayerDialog(playerid, 519, DIALOG_STYLE_LIST, "Editing object", "Edit Object\nInput Position\nSelect Material\nReset Material\nRemove Object", "Select", "Close");
	new str[56];
	format(str, sizeof(str), "Editing %s's object.", MapInfo[h][mOwner]);
	scm(playerid, COLOR_LIGHTBLUE, str);
	return 1;
}
//============================================//
forward SelectVehObj(playerid, slot);
public SelectVehObj(playerid, slot) 
{
	SetPVarInt(playerid, "FurnVehicleKey", slot);
	ShowPlayerDialog(playerid, DIALOG_VEHICLE_FURN_SELECT, DIALOG_STYLE_LIST, "Editing object", "Edit Object\nSelect Material\nReset Material\nRemove Object", "Select", "Close");
	return 1;
}
//============================================//
forward SelectHouseObj(playerid, h, key);
public SelectHouseObj(playerid, h, key) 
{
	SetPVarInt(playerid, "FurnEditKey", key);
	SetPVarInt(playerid, "FurnEditH", h);
	ShowPlayerDialog(playerid, 76, DIALOG_STYLE_LIST, "Editing object", "Edit Object\nInput Position\nSelect Material\nReset Material\nRemove Object", "Select", "Close");
	return 1;
}
//============================================//
forward SelectBizzObj(playerid, h, key);
public SelectBizzObj(playerid, h, key) 
{
	SetPVarInt(playerid, "FurnEditKey", key);
	SetPVarInt(playerid, "FurnEditH", h);
	ShowPlayerDialog(playerid, 103, DIALOG_STYLE_LIST, "Editing object", "Edit Object\nInput Position\nSelect Material\nReset Material\nRemove Object", "Select", "Close");
	return 1;
}
//============================================//
forward HandleNC(playerid);
public HandleNC(playerid)
{
	new rows, fields;
	cache_get_data(rows, fields, handlesql);
	if(!rows)
	{
		if(GetPlayerMoneyEx(playerid) >= 10000 || GetPVarInt(playerid, "Changes") > 0)
		{
			if(GetPVarInt(playerid, "Changes") > 0) {
				new changes = GetPVarInt(playerid, "Changes");
				SetPVarInt(playerid, "Changes", changes-1);
				SendClientMessage(playerid,COLOR_YELLOW,"Your name has been changed for free, a name-change ticket has been used!");
			} else {
				GivePlayerMoneyEx(playerid, -10000);
				SendClientMessage(playerid,COLOR_YELLOW,"Your name has been changed for $10,000!");
			}
			new text[MAX_PLAYER_NAME];
			GetPVarString(playerid, "NCTo", text, 24);
			ChangePlayerName(playerid, text);
			DeletePVar(playerid, "NCTo");
		}
		else SendClientMessage(playerid,COLOR_LIGHTRED,"You can't afford this name-change! Cost: $10,000");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Sorry, this name is already in use.");
	return 1;
}
//============================================//
forward HandleNCAdmin(playerid, targetid, name[]);
public HandleNCAdmin(playerid, targetid, name[])
{
	if(GetPVarInt(playerid, "Admin") < 6) return 1;
	if(cache_get_row_count() < 1) {
		new string[248], oldname[MAX_PLAYER_NAME];
		format(oldname, sizeof(oldname), "%s", PlayerName(playerid));
		format(string, sizeof(string), "You have changed %s's name to %s.", oldname, name);
		SendClientMessage(targetid, COLOR_ORANGE, string);			
		format(string, sizeof(string), "Your name has been changed to %s by admin %s.", name, AdminName(playerid));
		SendClientMessage(targetid, COLOR_ORANGE, string);	
		format(string, sizeof(string), "Admin %s[%s] has changed %s's name to %s.", AdminName(playerid), PlayerName(playerid), oldname, name);
		NameLog(string);
		ChangePlayerName(targetid, name);
	} else SendClientMessage(playerid, COLOR_LIGHTRED, "Oops! this name is already in use.");
	return 1;
}
//============================================//
stock ChangePlayerName(playerid, name[])
{
	new query[500];
	new oldname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, oldname, sizeof(oldname));
	for(new h = 0; h < MAX_MAP_OBJ; h++) //Handle mapping.
	{
		if(strmatch(oldname,MapInfo[h][mOwner]))
		{
			format(MapInfo[h][mOwner], 25, "%s", name);
			SaveMapObj(h);
		}
	}	
	new housekey = GetPVarInt(playerid,"HouseKey");
	if(housekey != 0 && strmatch(HouseInfo[housekey][hOwner], oldname)) //Handle house
	{
		format(HouseInfo[housekey][hOwner], 25, "%s", name);
		format(query, sizeof(query), "UPDATE `houses` SET `Owner`='%s' WHERE ID=%d", name, housekey);
		mysql_tquery(handlesql, query);
	}
	new bizzkey = GetPVarInt(playerid,"BizzKey");
	if(bizzkey != 0 && strmatch(BizInfo[bizzkey][Owner], oldname)) //Handle bizz
	{
		format(BizInfo[bizzkey][Owner], 25, "%s", name);
		format(query, sizeof(query), "UPDATE `business` SET `Owner`='%s' WHERE ID=%d", name, bizzkey);
		mysql_tquery(handlesql, query);	
	}
	SetPlayerName(playerid, name);
	mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET Name='%s' WHERE Name='%s'", name, oldname); //Handle vehicles
	mysql_tquery(handlesql, query);		
	mysql_format(handlesql, query, sizeof(query), "UPDATE vehicles SET Owner='%s' WHERE Owner='%s'", name, oldname); //Handle vehicles
	mysql_tquery(handlesql, query);
	mysql_format(handlesql, query, sizeof(query), "UPDATE toys SET PlayerName='%s' WHERE PlayerName='%s'", name, oldname); //Handle toys
	mysql_tquery(handlesql, query);	
	mysql_format(handlesql, query, sizeof(query), "UPDATE adjust SET name='%s' WHERE name='%s'", name, oldname); //Handle holster adjustments.
	mysql_tquery(handlesql, query);		
	mysql_format(handlesql, query, sizeof(query), "UPDATE logs_adminjails SET Name='%s' WHERE Name='%s'", name, oldname); //Handle vehicles
	mysql_tquery(handlesql, query);			
	mysql_format(handlesql, query, sizeof(query), "UPDATE logs_bans SET bUsername='%s' WHERE bUsername='%s'", name, oldname); //Handle vehicles
	mysql_tquery(handlesql, query);
	mysql_format(handlesql, query, sizeof(query), "UPDATE logs_kicks SET Name='%s' WHERE Name='%s'", name, oldname); //Handle vehicles
	mysql_tquery(handlesql, query);				
	mysql_format(handlesql, query, sizeof(query), "UPDATE lottery SET Name='%s' WHERE Name='%s'", name, oldname); //Handle vehicles
	mysql_tquery(handlesql, query);					
	SetTimerEx("OnPlayerDataSave",3000,false,"i",playerid);
	SetTimerEx("SavePData",4000,false,"i",playerid);
	foreach(new car : Vehicle) {
		if(PlayerOwnsVehicle(playerid, car)) {
			format(VehicleInfo[car][vOwner], MAX_PLAYER_NAME, "%s", name);
		}
	}
	new string[128];
	format(string, sizeof(string), "AdmCmd: Player %s has changed their name to %s.", oldname, name);
    SendAdminAndRegMessage(COLOR_LIGHTRED,string);
	NameLog(string);
	return 1;
}
//============================================//
public OnObjectMoved(objectid) //Basketball
{
	if(objectid == Ball) {
		new i = Baller;
		if(ShootingBall == 2)
		{
			BallDown2(i);
			return 1;
		}
		else if(ShootingBall == 3)
		{
			BallDown3(i);
			return 1;
		}
		else if(ShootingBall == 4)
		{
			BallDown4(i);
			return 1;
		}
		else if(ShootingBall == 5)
		{
			BallDown5(i);
			return 1;
		}
		else if(ShootingBall == 6)
		{
			ApplyAnimation(i,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
			HavingBall[i] = 1;
			Anim[i] = 0;
		}
		if(BallBounce == 1)
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			MoveBall(Ball, x, y, z+1.2, 4);
			BallBounce = 2;
		}
		else if(BallBounce == 2)
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			MoveBall(Ball, x, y, z-1.2, 4);
			BallBounce = 3;
		}
		else if(BallBounce == 3)
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			MoveBall(Ball, x, y, z+0.8, 3);
			BallBounce = 4;
		}
		else if(BallBounce == 4)
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			MoveBall(Ball, x, y, z-0.8, 3);
			BallBounce = 5;
		}
		else if(BallBounce == 5)
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			MoveBall(Ball, x, y, z+0.5, 2);
			BallBounce = 6;
		}
		else if(BallBounce == 6)
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			MoveBall(Ball, x, y, z-0.5, 2);
			BallBounce = 7;
		}
		else if(BallBounce == 7)
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			MoveBall(Ball, x, y, z+0.2, 1);
			BallBounce = 8;
		}
		else if(BallBounce == 8)
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			MoveBall(Ball, x, y, z-0.2, 1);
			BallBounce = 0;
		}
		if(!HavingBall[i]) return 1;
		new Keys, ud, lr;
		GetPlayerKeys(i, Keys, ud, lr);
		if(Anim[i])
		{
			switch(BallStatus)
			{
				case 0:
				{
					BallStatus = 1;
					new Float:x, Float:y, Float:z;
					GetPlayerPos(i, x, y, z);
					StopObject(Ball);
					new Float:x2, Float:y2;
					GetXYInFrontOfPlayer(i, x2, y2, 0.4);
					MoveBall(Ball, x2, y2, z+0.1, 5.5);
				}
				case 1:
				{
					BallStatus = 0;
					new Float:x, Float:y, Float:z;
					GetPlayerPos(i, x, y, z);
					StopObject(Ball);
					new Float:x2, Float:y2;
					GetXYInFrontOfPlayer(i, x2, y2, 0.4);
					MoveBall(Ball, x2, y2, z-0.8, 5.5);
				}
			}
			return 1;
		}
		if(Keys & KEY_SPRINT)
		{
			ApplyAnimation(i,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
			switch(BallStatus)
			{
				case 0:
				{
					BallStatus = 1;
					new Float:x, Float:y, Float:z;
					GetPlayerPos(i, x, y, z);
					StopObject(Ball);
					new Float:x2, Float:y2;
					GetXYInFrontOfPlayer(i, x2, y2, 1.5);
					MoveBall(Ball, x2, y2, z+0.1, 8);
				}
				case 1:
				{
					BallStatus = 0;
					new Float:x, Float:y, Float:z;
					GetPlayerPos(i, x, y, z);
					StopObject(Ball);
					new Float:x2, Float:y2;
					GetXYInFrontOfPlayer(i, x2, y2, 1.5);
					MoveBall(Ball, x2, y2, z-0.8, 8);
				}
			}
			return 1;
		}
		else
		{
			ApplyAnimation(i,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
		}
		switch(BallStatus)
		{
			case 0:
			{
				BallStatus = 1;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 1.2);
				MoveBall(Ball, x2, y2, z+0.1, 5);
			}
			case 1:
			{
				BallStatus = 0;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 1.2);
				MoveBall(Ball, x2, y2, z-0.8, 5);
			}
		}
	}
    return 1;
}
//================Basketball==================//
stock IsPlayerFacingPoint(playerid, Float:dOffset, Float:pX, Float:pY, Float:pZ)
{
	#pragma unused pZ
	new
		Float:X,
		Float:Y,
		Float:Z,
		Float:pA,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;
}
//============================================//
stock IsPlayerFacingPlayer(playerid, targetid, Float:dOffset)
{
	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:pA,
		Float:X,
		Float:Y,
		Float:Z,
		Float:ang;

	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;

	GetPlayerPos(targetid, pX, pY, pZ);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;
}
//============================================//
stock AngleInRangeOfAngle(Float:a1, Float:a2, Float:range)
{
	a1 -= a2;
	if((a1 < range) && (a1 > -range)) return true;

	return false;
}
//============================================//
forward BallDown(playerid, Float:oldz);
public BallDown(playerid, Float:oldz)
{
    new Float:x, Float:y, Float:z;
	GetObjectPos(Ball, x, y, z);
	new Float:a;
	new Float:x2, Float:y2;
	GetPlayerPos(playerid, x2, y2, a);
	GetPlayerFacingAngle(playerid, a);
	x2 += (16 * floatsin(-a, degrees));
	y2 += (16 * floatcos(-a, degrees));
	MoveBall(Ball, x2, y2, oldz-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	BallBounce = 1;
	return 1;
}
//============================================//
forward BallDown2(playerid);
public BallDown2(playerid)
{
	MoveBall(Ball, 2278.04,-1775.49,12.7, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	BallBounce = 1;
	Score[0]++;
	new str[72];
	if(Score[0] >= BASKETBALL_POINT_LIMIT) {
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pBalling] == 1)
			{
				switch(PlayerInfo[i][pBallTeam])
				{
					case 0:
					{
						scm(i, COLOR_GREEN, "Your team won the basketball game!");
						GameTextForPlayer(i, "~w~Game Over~n~~g~Team 1 wins!", 5000, 3);
					}
					case 1:
					{
						scm(i, COLOR_GREEN, "Your team lost the basketball game!");
						GameTextForPlayer(i, "~w~Game Over~n~~r~Team 1 wins!", 5000, 3);
					}
				}
				format(str, sizeof(str), "[Final Score] Team 1: %d | Team 2: %d", Score[0], Score[1]);
				scm(i, COLOR_WHITE, str);
			}
		}
		Score[0] = 0;
		Score[1] = 0;
	} else {
		new str2[64];
		format(str, sizeof(str), "~w~Score~n~~g~Team 1: %d~n~~r~Team 2: %d", Score[0], Score[1]);
		format(str2, sizeof(str2), "~w~Score~n~~r~Team 1: %d~n~~g~Team 2: %d", Score[0], Score[1]);
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pBalling] == 1)
			{
				if(PlayerInfo[i][pBallTeam] == 0) {
					GameTextForPlayer(i, str, 3000, 3);
				} else {
					GameTextForPlayer(i, str2, 3000, 3);
					if(playerid == i) {
						scm(i, COLOR_ORANGE, "[Basketball] You've scored on your own net!");
					}
				}
			}
		}
	}
	return 1;
}
//============================================//
forward BallDown3(playerid);
public BallDown3(playerid)
{
	MoveBall(Ball, 2277.58,-1801.51,12.7, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	BallBounce = 1;
	Score[1]++;
	new str[64];
	if(Score[1] >= BASKETBALL_POINT_LIMIT) {
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pBalling] == 1)
			{
				switch(PlayerInfo[i][pBallTeam])
				{
					case 0:
					{
						scm(i, COLOR_GREEN, "Your team lost the basketball game!");
						GameTextForPlayer(i, "~w~Game Over~n~~r~Team 2 wins!", 5000, 3);
					}
					case 1:
					{
						scm(i, COLOR_GREEN, "Your team won the basketball game!");
						GameTextForPlayer(i, "~w~Game Over~n~~g~Team 2 wins!", 5000, 3);
					}
				}
				format(str, sizeof(str), "[Final Score] Team 1: %d | Team 2: %d", Score[0], Score[1]);
				scm(i, COLOR_WHITE, str);
			}
		}
		Score[0] = 0;
		Score[1] = 0;
	} else {
		new str2[64];
		format(str, sizeof(str), "~w~Score~n~~g~Team 1: %d~n~~r~Team 2: %d", Score[0], Score[1]);
		format(str2, sizeof(str2), "~w~Score~n~~r~Team 1: %d~n~~g~Team 2: %d", Score[0], Score[1]);
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pBalling] == 1)
			{
				if(PlayerInfo[i][pBallTeam] == 0) {
					GameTextForPlayer(i, str, 3000, 3);
					if(playerid == i) {
						scm(i, COLOR_ORANGE, "[Basketball] You've scored on your own net!");
					}
				} else {
					GameTextForPlayer(i, str2, 3000, 3);
				}
			}
		}
	}
	return 1;
}
//============================================//
forward BallDown4(playerid);
public BallDown4(playerid)
{
	MoveBall(Ball, 2277.58+random(5),-1775.49+random(5),12.7, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	MessageBallers(1,"Missed!"); //Team IDs r opposite bcus miss is bad
	BallBounce = 1;
	return 1;
}
//============================================//
forward BallDown5(playerid);
public BallDown5(playerid)
{
	MoveBall(Ball, 2277.58+random(5),-1801.51+random(5),12.7, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	MessageBallers(0,"Missed!"); //Team IDs r opposite bcus miss is bad
	BallBounce = 1;
	return 1;
}
//============================================//
forward ShootMiss(playerid);
public ShootMiss(playerid)
{
	MoveBall(Ball, 2277.58+random(2), -1775.49+random(2), 15.56+random(2), 12.5+random(4));
	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	ShootingBall = 4;
	HavingBall[playerid] = 0;
	return 1;
}
//============================================//
forward ShootMiss2(playerid);
public ShootMiss2(playerid)
{ 
	MoveBall(Ball, 2277.58+random(2),-1801.51+random(2),15.56+random(2), 12.5+random(4));
	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	ShootingBall = 5;
	HavingBall[playerid] = 0;
	return 1;
}
//============================================//
stock MessageBallers(fav,msg[],time=3000)
{
	new text[128];
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pBalling] == 1)
		{
			if(PlayerInfo[i][pBallTeam] == fav) {
				format(text, sizeof(text), "~g~%s", msg);
			} else {
				format(text, sizeof(text), "~r~%s", msg);
			}
			GameTextForPlayer(i, text, time, 3);
		}
	}
	return 1;
}
//============================================//
stock SendBallerMessage(fav,msg[])
{
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pBalling] == 1)
		{
			if(PlayerInfo[i][pBallTeam] == fav) {
				scm(i, COLOR_LIGHTRED, msg);
			} else {
				scm(i, COLOR_GREEN, msg);
			}
		}
	}
	return 1;
}
//============================================//
stock QuitBalling(playerid)
{
	if(PlayerInfo[playerid][pBalling] != 1) return 1;
	new team = PlayerInfo[playerid][pBallTeam];
	PlayerInfo[playerid][pBalling] = 0;
	PlayerInfo[playerid][pBallTeam] = 0;
	if(Baller == playerid) {
		Baller = 999;
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		HavingBall[playerid] = 0;
		MoveBall(Ball, x+random(3), y+random(3), z-0.8, 13+random(4));
	}
	else HavingBall[playerid] = 0;
	ClearAnimations(playerid);
	Anim[playerid] = 0;
	SetPlayerColor(playerid, COLOR_WHITE);
	scm(playerid, COLOR_ORANGE, "You've left the basketball game!");
	new txt[86];
	format(txt, sizeof(txt), "[Basketball] %s(Team %d) has quit the basket-ball game.", PlayerName(playerid), team+1);
	if(team == 1) {
		SendBallerMessage(0,txt);
	} else {
		SendBallerMessage(1,txt);
	}
	return 1;
}
//============================================//
forward ClearAnim(playerid);
public ClearAnim(playerid)
{
	ClearAnimations(playerid);
	return 1;
}
//============================================//
Float:clampf(Float:f, Float:min, Float:max)
{
	if( f < min ) f = min;
	if( f > max ) f = max;
	return f;
}
//============================================//
stock CheckInCourt(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(x > 2288.74 || x < 2268.16 || y >  -1773.48 || y < -1803.60) {
		QuitBalling(playerid);
		scm(playerid, COLOR_ORANGE, "[Basketball] You've been kicked from the game for leaving the court.");
	}
	return 1;
}
//============================================//
stock MoveBall(obj, Float:x, Float:y, Float:z, Float:speed)
{
	x = clampf(x, 2268.48, 2288.05);
	y = clampf(y, -1802.74, -1774.48);
	MoveObject(obj, x, y, z, speed);
	return 1;
}
//============================================//
GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}
//=============End of Basketball===============//

//============================================//
stock DeleteFaction(id)
{
	if(id == 1 || id == 2 || id == 3 || id == 4 || id == 5 || id == 8) return 1;
	if(FactionInfo[id][fUsed] != 1) return 1;
	new str[248];
	format(str, 248, "[Faction-Info] Faction %s(%d) has been purged and deleted.", FactionInfo[id][fName], id); 
	SendClientMessageToAll(COLOR_LIGHTRED, str);
	FactionInfo[id][fUsed]=0;
	format(FactionInfo[id][fName], 48, "");
	format(FactionInfo[id][fMOTD], 48, "");
	for(new i=1; i < MaxRank(id); i++)
	{
		format(FactionRank[id][i],128,"");
	}
	FactionInfo[id][fRights] = 0;
	FactionInfo[id][fFact][0] = 0.0;
	FactionInfo[id][fFact][1] = 0.0;
	FactionInfo[id][fFact][2] = 0.0;
	FactionInfo[id][fDrugCount] = 0;
	FactionInfo[id][fWepCount] = 0;
	foreach(new i : Player)
	{
		if(GetPVarInt(i, "PlayerLogged") == 1)
		{
			if(GetPVarInt(i, "Member") == id)
			{
				SetPVarInt(i, "Member", 0);
				SetPVarInt(i, "Rank", 0);
				scm(i, COLOR_LIGHTRED, "[Faction] You've been removed from your faction because it's been deleted.");
			}
		}
	}
	mysql_format(handlesql, str, sizeof(str), "UPDATE `accounts` SET `Member`=0, `Rank`=0 WHERE `Member`=%d", id);
	mysql_tquery(handlesql, str);
	mysql_format(handlesql, str, sizeof(str), "DELETE FROM `factions` WHERE `ID`=%d", id);
	mysql_tquery(handlesql, str);
	return 1;
}
//============================================//
stock GetAllHouseFurn(playerid)
{
	new key = FurnRight(playerid, 1);
	if(key != GetPVarInt(playerid, "HouseEnter")) return error(playerid, "You don't have permission to do this at this property.");
	new furnitob[128], found = 0;
    for(new h = 0; h < MAX_HOUSE_OBJ; h++) {
        if(HouseInfo[key][hObject][h] != 0) {
			furnitob[found] = HouseInfo[key][hoID][h];
			found++;
        }
    }
	if(found == 0) SCM(playerid, COLOR_LIGHTRED, "ERROR: Can't find any objects in this property!");
	ShowModelSelectionMenuEx(playerid, furnitob, found, "Select item", 15, 16.0, 0.0, -55.0);
    return 1;
}
//============================================//
stock GetAllBizzFurn(playerid) {
	new key = FurnRight(playerid, 2);
	if(key != GetPVarInt(playerid, "BizzEnter")) return error(playerid, "You don't have permission to do this at this property.");
	new furnitob[128], found = 0;
    for(new h = 0; h < MAX_HOUSE_OBJ; h++) {
        if(BizInfo[key][bObject][h] != 0) {
			furnitob[found] = BizInfo[key][boID][h];
			found++;
        }
    }
	if(found == 0) SCM(playerid, COLOR_LIGHTRED, "ERROR: Can't find any objects in this property!");
	ShowModelSelectionMenuEx(playerid, furnitob, found, "Select item", 16, 16.0, 0.0, -55.0);
    return 1;
}
//============================================//
stock SendBurg(id) {
	foreach(new i : Player) {
		if(strcmp(VehicleInfo[id][vOwner], PlayerInfo[i][pUsername], true) == 0) {
			SendPlayerSMS(i, "Your vehicles alarm initiated from a burglary attempt.", "LS 411"); 
		} 
	}
	return 1;
}
//============================================//
stock PrintVehName(vehicleid)
{
	new str[50]="N/A";
	format(str, 50,"%s", VehicleName[GetVehicleModel(vehicleid) - 400]);
	return str;
}
//============================================//
stock IsValidTCar(veh)
{
    if(VehicleInfo[veh][vID] != 0) {
        if(VehicleInfo[veh][vType] == VEHICLE_PERSONAL) {
	        if(VehicleInfo[veh][vTrunk] == 1) {
	            if(!IsInvalidVeh(veh)) {
				return true; }
			}
		}
	}
	return false;
}
//============================================//
stock IsPoliceCar(playerid)
{
    if(GetPVarInt(playerid, "Member") != 1) return false;
    new Float:x,Float:y,Float:z;
    for(new car = 0; car < MAX_VEHICLES; car++)
	{
	    if(CopInfo[car][Created] == 1)
	    {
		    if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			{
			    GetVehiclePos(car,x,y,z);
			    if(IsPlayerInRangeOfPoint(playerid,4.0,x,y,z))
			    {
			        return true;
			    }
		    }
	    }
	}
    return false;
}
//============================================//
stock GetPoliceCarID(playerid)
{
    for(new car = 0; car < MAX_VEHICLES; car++)
	{
	    if(CopInfo[car][Created] == 1)
	    {
		    if(strcmp(CopInfo[car][Owner], PlayerInfo[playerid][pUsername], true) == 0)
			{
			    return car;
		    }
	    }
	}
    return 0;
}
//============================================//
forward OnDealershipVehicleBought(playerid, carmdl, id3, col, price);
public OnDealershipVehicleBought(playerid, carmdl, id3, col, price) {
	if(cache_get_row_count() < MaxVehicles(playerid)) {
     	new query[516], plate[VEHICLE_PLATE_MAX_LENGTH], rand = 1000 + random(99999999);
      	format(plate, VEHICLE_PLATE_MAX_LENGTH, "%d", rand);
		mysql_format(handlesql, query, sizeof(query),"INSERT INTO `vehicles`(`Model`, `X`, `Y`, `Z`, `Angle`, `ColorOne`, `ColorTwo`, `Owner`, `Value`, `Fuel`, `Plate`,`Health`) \
													  VALUES (%d, %f, %f, %f, %f, %d, %d, '%e', %d, %d, '%e', %f)", carmdl, Dealerships[id3][3], Dealerships[id3][4],
													  Dealerships[id3][5], Dealerships[id3][6], col, col, PlayerInfo[playerid][pUsername], price, 100, plate, 1000.0);

	    mysql_tquery(handlesql, query);
        if(GetPVarInt(playerid, "CTU") == 1) {
			SetPVarInt(playerid, "CarTicket", GetPVarInt(playerid, "CarTicket")-1);
			DeletePVar(playerid, "CTU");
			SendClientMessage(playerid, COLOR_WHITE, "Carticket used !");
		}
		
		if(GetPVarInt(playerid, "CTU") == 2) {
			SetPVarInt(playerid, "CarTicket", GetPVarInt(playerid, "CarTicket")-1);
			DeletePVar(playerid, "CTU");
			format(query, sizeof(query), "Carticket used, paid the remainder of $%d!", price);
			SendClientMessage(playerid, COLOR_WHITE, query);
			GivePlayerMoneyEx(playerid, -price);
		} else {
			format(query, sizeof(query), "%s purchased for $%d !", VehicleName[carmdl-400], price);
			SendClientMessage(playerid, COLOR_WHITE, query);
			GivePlayerMoneyEx(playerid, -price);
		}
		
		OnPlayerDataSave(playerid);
		VJB=1;
	} else {
		SendClientMessage(playerid, COLOR_GREY, "You cannot buy another vehicle as you've reached the maximum amount of vehicles per-player.");
	}
}
//============================================//
forward OnPlayerEntersDealership(playerid);
public OnPlayerEntersDealership(playerid) {
	if(cache_get_row_count() < MaxVehicles(playerid)) {
	    SetPVarInt(playerid, "LOADDEAL", 1);
        SetPVarInt(playerid, "VEHID", 0);
        TogglePlayerControllableEx(playerid, false);
     	CallRemoteFunction("VehCreation", "i", playerid);
	} else {
		SendClientMessage(playerid, COLOR_GREY, "You cannot buy another vehicle as you've reached the maximum amount of vehicles per-player.");
	}
}
//============================================//
stock MaxVehicles(playerid)
{
	if(GetPVarInt(playerid, "MonthDon") > 0) return VEHICLE_MAX_AMOUNT+2;
	if(GetPVarInt(playerid, "DonateRank") > 1) return VEHICLE_MAX_AMOUNT+1;
	return VEHICLE_MAX_AMOUNT;
}
//============================================//
stock CountCarKeys(playerid)
{
	new count = 0;
	for(new i=0; i < 6; i++) {
		if(CarKeys[playerid][i] != 0) {
			count++;
		}
	}
	return count;
}
//============================================//
stock HasCarKey(playerid, vid)
{
	for(new i=0; i < 6; i++) {
		if(CarKeys[playerid][i] == vid) {
			return true;
		}
	}
	return false;
}
//============================================//
stock GiveCarKey(playerid, vid)
{
	if(HasCarKey(playerid, vid)) return false;
	new found = 0;
	for(new i=0; i < 6; i++) {
		if(CarKeys[playerid][i] < 1) {
			found++;
			CarKeys[playerid][i] = vid;
			break;
		}
	}
	if(found == 0) return false;
	return true;
}
//============================================//
stock TakeCarKey(playerid, vid)
{
	new found = 0;
	for(new i=0; i < 6; i++) {
		if(CarKeys[playerid][i] == vid) {
			found++;
			CarKeys[playerid][i] = 0;
			break;
		}
	}
	if(found == 0) return false;
	return true;
}
//============================================//
stock TakeCarKeyEx(playerid, id)
{
	CarKeys[playerid][id] = 0;
	new str[54];
	format(str, sizeof(str), "You've dropped the car key you had in slot %i.", id);
	scm(playerid, COLOR_LIGHTBLUE, str);
	return true;
}
//============================================//
stock ShowCarKeys(playerid)
{
	new carDialog[248];
	format(carDialog, sizeof(carDialog), "");
	for(new i=0; i < 6; i++) {
		if(CarKeys[playerid][i] > 0) {
			format(carDialog, sizeof(carDialog), "%s{33FF66}[Slot: %i] {FFFFFF}%i.\n", carDialog, i+1, CarKeys[playerid][i]);
		} else {
			format(carDialog, sizeof(carDialog), "%s{33FF66}[Slot: %i] {FFFFFF}Empty.\n", carDialog, i+1);
		}
	}
	ShowPlayerDialog(playerid, 548, DIALOG_STYLE_LIST, "Double click a slot for more info.", carDialog, "Continue", "Exit");
	return 1;
}
//============================================//
forward OnViewKey(playerid,key);
public OnViewKey(playerid,key)
{
	if(cache_get_row_count(handlesql) > 0) {
		SetPVarInt(playerid, "ViewKeyID", key);
		new owner[25];
		cache_get_field_content(0, "Owner", owner, handlesql, 25);
		new model = cache_get_field_content_int(0, "Model");
		new str[152];
		format(str, 152, "{33FF66}     -Vehicle Information-    \nModel: {FFFFFF}%s\n{33FF66}Owner: {FFFFFF}%s", VehicleName[model-400], owner);
		ShowPlayerDialog(playerid, 549, DIALOG_STYLE_MSGBOX, "Borrowed keys", str, "Drop Key", "Back");
	}
	else error(playerid, "Failed to receive vehicle-data, contact a developer.");
	return 1;
}
//============================================//
forward OnLendKeys(playerid);
public OnLendKeys(playerid)
{
	new rows = cache_get_row_count(handlesql);
	if(rows > 0) {
	    new str[384];
	    for(new i = 0; i < rows; i++) {
			format(str, 384, "%s\nModel: %s", str, VehicleName[cache_get_field_content_int(i, "Model")-400]);
		}
		ShowPlayerDialog(playerid, 550, DIALOG_STYLE_LIST, "Which car do you want to lend this player?", str, "Select", "Exit");
	}
	else error(playerid, "You don't own any cars!");
	return 1;
}
//============================================//
forward LendCarKeys(playerid,targetid);
public LendCarKeys(playerid,targetid)
{
	if(!Iter_Contains(Player, targetid)) return 1;
	if(cache_get_row_count(handlesql) > 0) {
		new sendername[MAX_PLAYER_NAME], giveplayer[MAX_PLAYER_NAME];
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
		GiveNameSpace(sendername);
		GiveNameSpace(giveplayer);
		new string[124];
		if(GiveCarKey(targetid, cache_get_field_content_int(0, "ID"))) {
			PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			new model = cache_get_field_content_int(0, "Model");
			format(string, sizeof(string),"You gave %s keys to your %s.", giveplayer, VehicleName[model-400]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string),"%s gave you keys to %s %s.", sendername, CheckSex(playerid), VehicleName[model-400]);
			SendClientMessage(targetid, COLOR_WHITE, string);
		} else {
			format(string, sizeof(string),"%s either has the keys to this vehicle or has reached the max amount of borrowed car keys. (LIMIT: 6 at a time)", giveplayer);
			SendClientMessage(playerid, COLOR_WHITE, string);					
		}
	} else {
		SendClientMessage(playerid, COLOR_GREY, "An error occurred while attempting to load the vehicle's data, please try again.");
	}
	return 1;
}
//============================================//
forward OnTakeKeys(playerid);
public OnTakeKeys(playerid)
{
	new rows = cache_get_row_count(handlesql);
	if(rows > 0) {
	    new str[384];
	    for(new i = 0; i < rows; i++) {
			format(str, 384, "%s\nModel: %s", str, VehicleName[cache_get_field_content_int(i, "Model")-400]);
		}
		ShowPlayerDialog(playerid, 551, DIALOG_STYLE_LIST, "Which vehicles key do you want to revoke?", str, "Select", "Exit");
	}
	else error(playerid, "You don't own any cars!");
	return 1;
}
//============================================//
forward TakeCarKeys(playerid,targetid);
public TakeCarKeys(playerid,targetid)
{
	if(!Iter_Contains(Player, targetid)) return 1;
	if(cache_get_row_count(handlesql) > 0) {
		new sendername[MAX_PLAYER_NAME], giveplayer[MAX_PLAYER_NAME];
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		format(giveplayer, sizeof(giveplayer), "%s", PlayerNameEx(targetid));
		GiveNameSpace(sendername);
		GiveNameSpace(giveplayer);
		new string[124];
		if(TakeCarKey(targetid, cache_get_field_content_int(0, "ID"))) {
			PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			new model = cache_get_field_content_int(0, "Model");
			format(string, sizeof(string),"You have taken away %s's keys to your %s.", giveplayer, VehicleName[model-400]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string),"%s has taken your keys to %s %s.", sendername, CheckSex(playerid), VehicleName[model-400]);
			SendClientMessage(targetid, COLOR_WHITE, string);
		} else {
			format(string, sizeof(string),"%s doesn't have keys to your %s.", giveplayer, VehicleName[cache_get_field_content_int(0, "Model")-400]);
			SendClientMessage(playerid, COLOR_WHITE, string);					
		}
	} else {
		SendClientMessage(playerid, COLOR_GREY, "An error occurred while attempting to load the vehicle's data, please try again.");
	}
	return 1;
}
//============================================//
stock PlayerOwnsVehicle(playerid, vehicleid)
{
	if(!isnull(VehicleInfo[vehicleid][vOwner]) && strcmp(VehicleInfo[vehicleid][vOwner], PlayerInfo[playerid][pUsername], false) == 0) return true;
	return false;
}
//============================================//
stock IsValidSound(id)
{
   for(new i = 0; i < sizeof(ValidSounds); i++)
   {
	   if(id == ValidSounds[i]) return 1;
   }
   return 0;
}
//============================================//
stock PrintPhoneNum(playerid, payphone) {
	new str[24];
	switch(payphone) {
		case 0: // Not on payphone.
		{
			format(str, sizeof(str), "%d", GetPVarInt(playerid, "PhoneNum"));
		}
		case 1: // On payphone.
		{
			new i = getNearestPhone(playerid);
			if(i == -1) format(str, sizeof(str), "Payphone (INVALID)");
			format(str, sizeof(str), "%s", phoneInfo[i][phoneName]);
		}
	}
	return str;
}
//============================================//
stock InitiateFare(playerid)
{
	new string[128], sendername[MAX_PLAYER_NAME];
    if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
    {
        if(VehicleInfo[GetPlayerVehicleID(playerid)][vType] == VEHICLE_JOB)
		{
		   new driver = -1;
		   foreach(new i : Player)
	       {
	           if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
	           {
	               if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
	               {
	                   driver = i;
	               }
	           }
	       }
	       if(driver == -1) return true; // Block any leaks due to no driver inside vehicle.
	       if(GetPVarInt(driver, "TaxiFare") == 0) return true; // Block any leaks due to taxi-fare fee.
	       if(GetPVarInt(driver, "OnRoute") == 0) return true; // Driver is not on route.
	       if(GetPVarInt(driver, "Job") != 5)  return true; // Driver is not a Taxi Driver.
	       if(GetPlayerMoneyEx(playerid) >= GetPVarInt(driver, "TaxiFare"))
	       {
	           SetPVarInt(playerid, "TaxiBoss", driver);
	           SetPVarInt(playerid, "TaxiCost", GetPVarInt(driver, "TaxiFare"));
	           SetPVarInt(playerid, "TaxiStep", 0);
	           SetPVarInt(playerid, "TaxiAm", GetPVarInt(driver, "TaxiFare"));
		       format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		       GiveNameSpace(sendername);
		       format(string, 128, "%s has entered your taxi and initiated the fare.", sendername);
	           SCM(driver, -1, string);
	       }
	       else
	       {
	           SCM(playerid, -1, "You can't afford the taxi fare.");
	           RemovePlayerFromVehicle(playerid);
	       }
        }
    }
    return true;
}
//============================================//
stock TaxiPayment(playerid)
{
	new string[128], vehicleid = GetPlayerVehicleID(playerid);
    if(VehicleInfo[vehicleid][vType] == VEHICLE_JOB)
	{
	    if(IsPlayerConnected(GetPVarInt(playerid, "TaxiBoss")))
	    {
	        if(GetPVarInt(playerid, "TaxiAm") > 0)
	        {
	            format(string, sizeof(string), "You gave the taxi driver $%d!", GetPVarInt(playerid, "TaxiAm"));
	            SCM(playerid, -1, string);
	            format(string, sizeof(string), "%s gave you $%d from the taxi ride!", PlayerNameEx(playerid), GetPVarInt(playerid, "TaxiAm"));
	            SCM(GetPVarInt(playerid, "TaxiBoss"), -1, string);
	            GivePlayerMoneyEx(playerid, -GetPVarInt(playerid, "TaxiAm"));
	            GivePlayerMoneyEx(GetPVarInt(playerid, "TaxiBoss"), GetPVarInt(playerid, "TaxiAm"));
	            DeletePVar(playerid, "TaxiBoss"), DeletePVar(playerid, "TaxiCost");
	            DeletePVar(playerid, "TaxiStep"), DeletePVar(playerid, "TaxiAm");
	        }
	    }
	}
	return true;
}
//============================================//
stock CreateActorEx(modelid, Float:x, Float:y, Float:z, Float:r, world)
{
	new actor = CreateActor(modelid, x, y, z, r);
	SetActorVirtualWorld(actor, world);
	return true;
}
//============================================//
stock IsMatTruck(vehicleid) 
{
	new id = GetVehicleModel(vehicleid);
	if(id == 403 || id == 514 || id == 515) return true;
    return false;
}
//============================================//
stock IsMatTrailer(vehicleid) 
{
	new id = GetVehicleModel(vehicleid);
	if(id == 435 || id == 450 || id == 591) return true;
    return false;
}
//============================================//
stock RandTrailer()
{
	new r = random(3);
	switch(r)
	{
		case 0: 
		{
			return 435;
		}
		case 1:
		{
			return 450;
		}
		case 2:
		{
			return 591;
		}
	}
	return 591;
}
//============================================//
stock SpawnMatTrailers()
{
	new attached = 0;
	for(new i=0; i < 3; i++) {
		if(Iter_Contains(Vehicle, MatTrailers[i]) && IsMatTrailer(MatTrailers[i])) {
			if(VehicleInfo[MatTrailers[i]][vMats] < 1) {
				attached = 0;
				foreach(new c : Vehicle) {
					if(GetVehicleTrailer(c) == MatTrailers[i]) {
						attached = 1;
						break;
					}
				}
				if(attached != 1 ) {
					DespawnVehicle(MatTrailers[i]);
					MatTrailers[i] = CreateVehicle(RandTrailer(), MTSpawns[i][mt_x], MTSpawns[i][mt_y], MTSpawns[i][mt_z], 360.0, 0, 0, -1);
					VehicleInfo[MatTrailers[i]][vMats] = 0;
					VehicleInfo[MatTrailers[i]][vType] = VEHICLE_TRAILER;
					Iter_Add(Vehicle, MatTrailers[i]);
				}
			}
		} else {
			MatTrailers[i] = CreateVehicle(RandTrailer(), MTSpawns[i][mt_x], MTSpawns[i][mt_y], MTSpawns[i][mt_z], 360.0, 0, 0, -1);
			VehicleInfo[MatTrailers[i]][vMats] = 0;
			VehicleInfo[MatTrailers[i]][vType] = VEHICLE_TRAILER;
			Iter_Add(Vehicle, MatTrailers[i]);
		}
	}
	return 1;
}
//============================================//
stock PlayerToTrailer(playerid,Float:distance)
{
    new Float:x, Float:y, Float:z, Float:dist, Float:closedist, id, ran;
    foreach(new c : Vehicle)
    {
        if(IsVehicleStreamedIn(c, playerid) && IsMatTrailer(c))
        {
			GetVehiclePos(c,x,y,z);
			dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
			if(ran == 0) {
				closedist = dist;
				id = c;
				ran = 1;
			} else {
				if(dist < closedist) {
					closedist = dist;
					id = c;
				}
			}
		}
    }
	GetVehiclePos(id,x,y,z);
	if(IsPlayerInRangeOfPoint(playerid,distance,x,y,z)) return id;
    return INVALID_VEHICLE_ID;
}
//============================================//
stock SpawnTheftCars()
{
	new canrespawn = 1; 
	for(new i=0; i < 3; i++) {
		if(Iter_Contains(Vehicle, TheftCars[i]) && IsMatTruck(TheftCars[i])) {
			canrespawn = 1;
			foreach(new p : Player) {
				if(GetPlayerVehicleID(p) == TheftCars[i]) {
					canrespawn = 0;
					break;
				}
			}
			if(IsTrailerAttachedToVehicle(TheftCars[i])) {
				if(VehicleInfo[GetVehicleTrailer(TheftCars[i])][vMats] > 0) {
					canrespawn = 0;
					break;
				}
			}
			if(canrespawn == 1 ) {
				if(IsTrailerAttachedToVehicle(TheftCars[i])) DetachTrailerFromVehicle(TheftCars[i]);
				DespawnVehicle(TheftCars[i]);
				TheftCars[i] = CreateTheftVehicle(TheftSpawns[i][theft_x], TheftSpawns[i][theft_y], TheftSpawns[i][theft_z], TheftSpawns[i][theft_r]);
				Iter_Add(Vehicle, TheftCars[i]);
			}
		} else {
			TheftCars[i] = CreateTheftVehicle(TheftSpawns[i][theft_x], TheftSpawns[i][theft_y], TheftSpawns[i][theft_z], TheftSpawns[i][theft_r]);
			Iter_Add(Vehicle, TheftCars[i]);
		}
	}
	return 1;
}
//============================================//
stock StorePlayerItemInHouse(playerid, slot, houseid)
{
	new string[128];
	if(!GetCloseHouseSafe(playerid, houseid) || HouseInfo[houseid][sLocked] == 1) return 1;
	new found = 0, itemf;
	if((GetPVarInt(playerid, "Member") == 1 || GetPVarInt(playerid, "Member") == 8) && PlayerInfo[playerid][pInvItem][slot] < 200) return error(playerid, "You can not do this to prevent LSPD and LSG weapon distribution.");
	for(new j = 0; j < MAX_HOUSE_SLOTS; j++)
	{
		if(HouseInfo[houseid][hInvID][j] == 0)
		{
			found++;
			itemf = PlayerInfo[playerid][pInvItem][slot];
			HouseInfo[houseid][hInvID][j] = itemf;
			HouseInfo[houseid][hInvQ][j] = PlayerInfo[playerid][pInvQ][slot];
			HouseInfo[houseid][hInvE][j] = PlayerInfo[playerid][pInvEx][slot];
			HouseInfo[houseid][hInvS][j] = PlayerInfo[playerid][pInvS][slot];

			RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][slot], 0, slot);
			break;
		}
	}
	if(found != 0)
	{
		SaveHouse(houseid);

		format(string, 256, "%s stored in property.", PrintIName(itemf));
		scm(playerid, -1, string);

		SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
	}
	else error(playerid, "The property safe is full!");
	return 1;
}

stock StorePlayerItemInBusiness(playerid, slot, businessid)
{
	new string[128];
	if(!GetCloseBizzSafe(playerid, businessid) || BizInfo[businessid][sLocked] == 1) return 1;
	new found = 0, itemf;
	if((GetPVarInt(playerid, "Member") == 1 || GetPVarInt(playerid, "Member") == 8) && PlayerInfo[playerid][pInvItem][slot] < 200) return error(playerid, "You can not do this to prevent LSPD and LSG weapon distribution.");
	for(new j = 0; j < MAX_HOUSE_SLOTS; j++)
	{
		if(BizInfo[businessid][InvID][j] == 0)
		{
			found++;
			itemf=PlayerInfo[playerid][pInvItem][slot];
			BizInfo[businessid][InvID][j] = itemf;
			BizInfo[businessid][InvQ][j] = PlayerInfo[playerid][pInvQ][slot];
			BizInfo[businessid][InvE][j] = PlayerInfo[playerid][pInvEx][slot];
			BizInfo[businessid][InvS][j] = PlayerInfo[playerid][pInvS][slot];
			
			RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][slot], 0, slot);
			break;
		}
	}
	if(found != 0)
	{
		SaveBiz(businessid);

		format(string, 256, "%s stored in business.", PrintIName(itemf));
		scm(playerid, -1, string);

		SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
	}
	else error(playerid, "The business safe is full!");
	return 1;
}

stock StorePlayerItemInVehicle(playerid, slot, vehicleid)
{
	new string[128];
	if(VehicleInfo[vehicleid][vType] == VEHICLE_PERSONAL || VehicleInfo[vehicleid][vType] == VEHICLE_LSPD)
    {
		new Float:x,Float:y,Float:z;
   		GetVehiclePos(vehicleid, x, y, z);

		if((GetPVarInt(playerid, "Member") == 1 || GetPVarInt(playerid, "Member") == 8) && PlayerInfo[playerid][pInvItem][slot] < 200)
		{
		    if(VehicleInfo[vehicleid][vType] != VEHICLE_LSPD)
		    {
		        error(playerid, "Police officers cannot do this to prevent LSPD weapon distribution.");
		        return true;
		    }
		}

		new p = DEFAULT_VEHICLE_SLOTS;
		if(IsHelmetCar(vehicleid))
		{
			p = SMALL_VEHICLE_SLOTS;
		}
		else if(IsVehicleSUV(vehicleid))
		{
			 p = MAX_VEH_SLOTS;
		}

		new foundit = 0;

		for(new j = 0; j < p; j++)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(VehicleInfo[vehicleid][vInvID][j] == 0)
				{
					foundit=1;
					VehicleInfo[vehicleid][vInvID][j] = PlayerInfo[playerid][pInvItem][slot];
					VehicleInfo[vehicleid][vInvQ][j] = PlayerInfo[playerid][pInvQ][slot];
					VehicleInfo[vehicleid][vInvE][j] = PlayerInfo[playerid][pInvEx][slot];
					VehicleInfo[vehicleid][vInvS][j] = PlayerInfo[playerid][pInvS][slot];
					
					RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][slot], 0, slot);

					format(string, sizeof(string), "places a %s in the %ss trunk.", PrintIName(VehicleInfo[vehicleid][vInvID][j]), PrintVehName(vehicleid));
					ForceAME(playerid, string);

					SaveVehicleData(vehicleid);
					break;
				}
			}
			else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			{
				if(j >= MAX_GLOVEBOX_SLOTS) break;
				if(VehicleInfo[vehicleid][vGBID][j] == 0)
				{
					foundit=1;
					VehicleInfo[vehicleid][vGBID][j] = PlayerInfo[playerid][pInvItem][slot];
					VehicleInfo[vehicleid][vGBQ][j] = PlayerInfo[playerid][pInvQ][slot];
					VehicleInfo[vehicleid][vGBE][j] = PlayerInfo[playerid][pInvEx][slot];
					VehicleInfo[vehicleid][vGBS][j] = PlayerInfo[playerid][pInvS][slot];
					
					RemoveInvItem(playerid, PlayerInfo[playerid][pInvItem][slot], 0, slot);

					format(string, sizeof(string), "places a %s in the %ss glovebox.", PrintIName(VehicleInfo[vehicleid][vGBID][j]), PrintVehName(vehicleid));
					ForceAME(playerid, string);

					SaveVehicleData(vehicleid);
					break;
				}
			}
		}
		
		if(foundit == 0)
		{
		    error(playerid,"Vehicle is full.");
		    return 1;
		}

		SetTimerEx("LoadHolsters", 1500, false, "i", playerid);
	}
	return 1;
}
//============================================//
stock ForceAME(playerid, text[]) {
	new string[256], sendername[MAX_PLAYER_NAME];
    format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
	GiveNameSpace(sendername);
    format(string, sizeof(string), "*** %s %s.", sendername, text);
    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 5000);
	return 1;
}
//============================================//
stock DestroyActorEx(actorid) {
    SetActorVirtualWorld(actorid, 9999);
    SetActorPos(actorid, 0.0, 0.0, 0.0);
    DestroyActor(actorid);
	return 1;
}
//============================================//
forward LinkVehicleToInteriorEx(vehicleid, interiorid);
public LinkVehicleToInteriorEx(vehicleid, interiorid) {
	VehicleInfo[vehicleid][vInterior] = interiorid;
	LinkVehicleToInterior(vehicleid, interiorid);
	if(VehicleInfo[vehicleid][vType] == VEHICLE_PERSONAL) {
		for(new slot = 0; slot < MAX_VEHICLE_OBJ; slot++) {
			if(IsValidDynamicObject(VehicleInfo[vehicleid][vObject][slot]) && VehicleInfo[vehicleid][voIndoor][slot] == 0) {
				if(VehicleInfo[vehicleid][voInt] != interiorid || VehicleInfo[vehicleid][voWorld][slot] != GetVehicleVirtualWorld(vehicleid)) {
					DestroyVehicleObject(vehicleid, slot);
					CreateVehicleObject(vehicleid, slot);
				}
			}
		}	
	}	
}
//============================================//
forward SetWeatherEx(weatherid);
public SetWeatherEx(weatherid)
{
	GMWeather = weatherid;
	foreach(new i : Player) {
		if(GetPlayerVirtualWorld(i) == 0 && GetPlayerInterior(i) == 0 && GetPVarInt(i, "DrugTime") == 0) {
			SetPlayerWeather(i, GMWeather);
		}
	}
}
//============================================//
stock FormatMoney(money)
{
	new string[64];
	format(string, sizeof(string), "%i", money);

	switch(strlen(string))
	{
		case 4 .. 6:
		{
			strins(string, ",", strlen(string) - 3);
		}

		case 7 .. 9:
		{
			strins(string, ",", strlen(string) - 3);
			strins(string, ",", strlen(string) - 7);
		}
	}

	strins(string, "$", 0);
	return string;
}
//============================================//
forward RemoveHouseObjects(houseid);
public RemoveHouseObjects(houseid)
{
	for(new i = 0; i < MAX_HOUSE_OBJ; i++)
	{
		if(IsValidDynamicObject(HouseInfo[houseid][hObject][i]))
		{
			DestroyDynamicObject(HouseInfo[houseid][hObject][i]);
		}

		HouseInfo[houseid][hObject][i] = 0;
		HouseInfo[houseid][hoID][i] = 0;
		HouseInfo[houseid][hoX][i] = 0.0;
		HouseInfo[houseid][hoY][i] = 0.0;
		HouseInfo[houseid][hoZ][i] = 0.0;
		HouseInfo[houseid][horX][i] = 0.0;
		HouseInfo[houseid][horY][i] = 0.0;
		HouseInfo[houseid][horZ][i] = 0.0;
	}
	
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "DELETE FROM housefurn WHERE HID=%i", houseid);
	mysql_tquery(handlesql, query);
    return 1;
}
//============================================//
public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    if(VehicleInfo[vehicleid][vType] == VEHICLE_LSPD ||
		VehicleInfo[vehicleid][vType] == VEHICLE_LSFD ||
		VehicleInfo[vehicleid][vType] == VEHICLE_GOV)
	{
		if(VehicleInfo[vehicleid][vSirenSync] == 1)
		{
			switch(newstate)
			{
				case 1:
				{
					for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
					{
						if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
						{
							DestroyDynamicObject(VehicleInfo[vehicleid][vSirenObjectID][i]);
							VehicleInfo[vehicleid][vSirenObjectID][i] = 0;
						}
					}

					for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
					{
						if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
						{
							VehicleInfo[vehicleid][vSirenObjectID][i] = CreateDynamicObject(VehicleInfo[vehicleid][vSirenObject][i], 0, 0, 0, 0.0, 0.0, 0.0);

							AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vSirenObjectID][i], vehicleid, 
								VehicleInfo[vehicleid][vSirenX][i], VehicleInfo[vehicleid][vSirenY][i], VehicleInfo[vehicleid][vSirenZ][i], 
								VehicleInfo[vehicleid][vSirenXr][i], VehicleInfo[vehicleid][vSirenYr][i], VehicleInfo[vehicleid][vSirenZr][i]);
						}
					}

					new Float:X, Float:Y, Float:Z;
					GetVehicleVelocity(vehicleid, X, Y, Z);
					if(X == 0 && Y == 0 && Z == 0)
					{
						SetVehicleVelocity(vehicleid, X, Y, Z + 0.01);
					}
				}

				default:
				{
					for(new i = 0; i < MAX_VEHICLE_SIREN_OBJECTS; i++)
					{
						if(VehicleInfo[vehicleid][vSirenObject][i] != 0)
						{
							DestroyDynamicObject(VehicleInfo[vehicleid][vSirenObjectID][i]);
							VehicleInfo[vehicleid][vSirenObjectID][i] = 0;
						}
					}
				}
			}
		}

		if(VehicleInfo[vehicleid][vELMSync] == 1)
		{
			switch(newstate)
			{
				case 1:
				{
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
					VehicleInfo[GetPlayerVehicleID(playerid)][vELMLightState] = lights;

					VehicleInfo[GetPlayerVehicleID(playerid)][vELM] = 1;
				}

				default:
				{
					VehicleInfo[GetPlayerVehicleID(playerid)][vELM] = 0;

					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, VehicleInfo[GetPlayerVehicleID(playerid)][vELMLightState], alarm, doors, bonnet, boot, objective);
					VehicleInfo[GetPlayerVehicleID(playerid)][vLights] = VehicleInfo[GetPlayerVehicleID(playerid)][vELMLightState];
				}
			}
		}
	}
    return 1;
}
//============================================//
stock randomEx(minnum = cellmin, maxnum = cellmax) return random(maxnum - minnum + 1) + minnum;
//============================================//
stock PrintPrefix(playerid)
{
	new string[128];
	string="says";
    if(strcmp(PlayerInfo[playerid][pAccent], "None", true) != 0) format(string, sizeof(string), "says *%s*", PlayerInfo[playerid][pAccent]);
    return string;
}
//============================================//
stock IsPlayerOnAnyBoat(playerid) // returns the vehicle-ID if they're on a boat, -1 if they aren't.
{
    new Float:vCoords[3], model;
	foreach(new i : Vehicle) {
		model = GetVehicleModel(i);
        if(model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)
        {
            GetVehiclePos(i, vCoords[0], vCoords[1], vCoords[2]);
            if(IsPlayerInRangeOfPoint(playerid, 6.0, vCoords[0], vCoords[1], vCoords[2]) && !IsPlayerInWater(playerid)) {
                return i;
            }
        }
	}
    return -1;
}
//============================================//
stock CanFishHere(playerid)
{
	if(IsPlayerOnAnyBoat(playerid) != -1) {
		return 1;
	} else if(IsPlayerInRangeOfPoint(playerid,1.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,398.7553,-2088.7490,7.8359)) {
		return 1;
	} else if(IsPlayerInRangeOfPoint(playerid,1.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,391.1094,-2088.7976,7.8359)) {
		return 1;
	} else if(IsPlayerInRangeOfPoint(playerid,1.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,374.9598,-2088.7979,7.8359)) {
		return 1;
	} else if(IsPlayerInRangeOfPoint(playerid,1.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,367.3637,-2088.7925,7.8359)) {
		return 1;
	} else if(IsPlayerInRangeOfPoint(playerid,1.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,354.5382,-2088.7979,7.8359)) {
		return 1;
	}
	return 0;
}
//============================================//
stock IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if (x > minx && x < maxx && y > miny && y < maxy) return 1;
	return 0;
}
//============================================//
forward HandleFishing(playerid);
public HandleFishing(playerid) 
{
	if(PlayerInfo[playerid][pFishing] != 1) return 1;
	if(GetPVarInt(playerid, "Dead") > 0) return 1; // Incase they died somehow while fishing.
	if(!CheckInvItem(playerid, 1007)) { // Dropped their rod while fishing.
		if(IsPlayerAttachedObjectSlotUsed(playerid,HOLDOBJECT_CLOTH4)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4);
		PlayerInfo[playerid][pFishing] = 0;
		return 1; 
	}
	new rand = randomEx(FISHING_LOWEST_ID-1,FISHING_HIGHEST_ID+1);
	if(rand > FISHING_HIGHEST_ID || rand < FISHING_LOWEST_ID) {
		CancelFishing(playerid);
		return SendClientMessage(playerid, COLOR_WHITE, "{4F13DB}[Fishing] {FFFFFF}You've caught nothing.");
	}
	new weight = randomEx(FISHING_MIN_WEIGHT,FISHING_MAX_WEIGHT+1), string[100];
	if(weight > FISHING_MAX_WEIGHT) { // Break the fishing rod if the fish is too heavy. (Maybe make more/less durable rods in the future?)
		CancelFishing(playerid, 0);
		RemoveInvItem(playerid, 1007);
		SendClientMessage(playerid, COLOR_ORANGE, "{4F13DB}[Fishing] {FFFFFF}Your fishing rod snapped!");
		new sendername[MAX_PLAYER_NAME];
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
		format(string, sizeof(string), "*SNAP* The fishing rod would break due to the weight of the fish. (%s).", sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE);
		return SendClientMessage(playerid, COLOR_WHITE, "{4F13DB}[Fishing] {FFFFFF}You've caught nothing.");
	}
	GiveInvItem(playerid, rand, 1, weight);
	format(string, sizeof(string), "{4F13DB}[Fishing] {FFFFFF}You've caught a %s weighing %i pounds.", PrintIName(rand), weight);
	SendClientMessage(playerid, COLOR_WHITE, string);
	CancelFishing(playerid, rand);
	return 1;
}
//============================================//
stock CancelFishing(playerid,msg=1) 
{
	if(PlayerInfo[playerid][pFishing] != 1) return 1;
	if(IsPlayerAttachedObjectSlotUsed(playerid,HOLDOBJECT_CLOTH4)) RemovePlayerAttachedObject(playerid, HOLDOBJECT_CLOTH4);
	PlayerInfo[playerid][pFishing] = 0;
	TogglePlayerControllableEx(playerid, 1);
	ClearAnimations(playerid);
	HideFishingTD(playerid);
	KillTimer(PlayerInfo[playerid][pFishTimer]);
	PlayerInfo[playerid][pFishTimer] = -1;
	if(msg != 0) {
		new sendername[MAX_PLAYER_NAME], string[84];
		format(sendername, sizeof(sendername), "%s", PlayerNameEx(playerid));
		GiveNameSpace(sendername);
		switch(msg)
		{
			case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
			{
				format(string, sizeof(string), "*** %s reels in a %s.", sendername, PrintIName(msg));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
			}
			default:
			{
				format(string, sizeof(string), "*** %s reels in %s fishing line.", sendername, CheckSex(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE);
			}
		}
	}
	return 1;
}
//============================================//
stock GetFishPrice(id,weight) //$45 + (5*(# slots over FISHING_LOWEST_ID 'id' is.))
{
	new count = 0;
	for(new i = FISHING_LOWEST_ID; i < FISHING_HIGHEST_ID+1; i++) {
		count++;
		if(i == id) {
			return (45 + (5*count)) + weight; 
		}
	}
	return 0; //return 0 just incase the ID isn't a fish.
}
//============================================//
stock SellFish(playerid)
{
	new result[1684];
	FixInv(playerid);
    for(new i = 0; i < MAX_INV_SLOTS; i++)
	{
		if(PlayerInfo[playerid][pInvItem][i] != 0)
		{
		    switch(PlayerInfo[playerid][pInvItem][i])
		    {
				case FISHING_LOWEST_ID .. FISHING_HIGHEST_ID:
				{
					format(result, sizeof(result), "%s\n%d: {FFFFFF}%s {33FF66}(%dlbs)|($%d)", result, i + 1, PrintIName(PlayerInfo[playerid][pInvItem][i]), PlayerInfo[playerid][pInvEx][i], GetFishPrice(PlayerInfo[playerid][pInvItem][i], PlayerInfo[playerid][pInvEx][i]));
				}
		        default:
		        {
		            format(result, sizeof(result), "%s\n{5F5F5F}%d: NOT BUYING", result, i + 1);
		        }
		    }
	    }
	    else
	    {
		    format(result, sizeof(result), "%s\n{5F5F5F}%d: EMPTY SLOT", result, i + 1);
	    }
	}
	ShowPlayerDialog(playerid, FISHING_DIALOG_SELL, DIALOG_STYLE_LIST, "What fish do you want to sell?", result, "Sell", "Close");
	return true;
}
//============================================//
#define FUEL_TYPE_REGULAR 0
#define FUEL_TYPE_PREMIUM 1
#define FUEL_TYPE_DIESEL 2

stock GasType(model) {
	if (model == 402 || model == 411 || model == 415 || model == 429 || model == 451 || model == 477 || model == 480 || model == 494 || model == 502 || model == 503 || model == 506 || model == 522 || model == 541 || model == 559 || model == 560 || model == 562 || model == 565 || model == 589) { return FUEL_TYPE_PREMIUM; }
	if (model == 403 || model == 406 || model == 408 || model == 414 ||model == 427 || model == 428 || model == 433 || model == 443 || model == 444 || model == 455 || model == 456 || model == 470 || model == 498 || model == 508 || model == 514 || model == 515 || model == 524 || model == 544 || model == 556 || model == 573 || model == 609) { return FUEL_TYPE_DIESEL; }
	return FUEL_TYPE_REGULAR;
}
stock GasColor(type) {
	new col[9];
	switch(type) {
		case FUEL_TYPE_REGULAR: format(col, 9, "{C9C9C9}");
		case FUEL_TYPE_PREMIUM: format(col, 9, "{3A0BC6}");
		case FUEL_TYPE_DIESEL: format(col, 9, "{F2C71A}");
		default: format(col, 9, "{BF0127}");
	}
	return col;
}
stock FuelName(type) { //{A9C4E4} = default dialog color
	new fuel[16];
	switch(type) {
		case FUEL_TYPE_REGULAR: format(fuel, 16, "{C9C9C9}Regular");
		case FUEL_TYPE_PREMIUM: format(fuel, 16, "{3A0BC6}Premium");
		case FUEL_TYPE_DIESEL: format(fuel, 16, "{F2C71A}Diesel");
		default: format(fuel, 16, "{BF0127}Invalid");
	}
	return fuel;
}
//============================================//
forward EnableFishingCP(playerid);
public EnableFishingCP(playerid) {
	if(IsPlayerInDynamicCP(playerid, FishCP)) {
		ResetFishingCP(playerid);
	} else TogglePlayerDynamicCP(playerid, FishCP, 1);
	return 1;
}

stock ResetFishingCP(playerid) { SetTimerEx("EnableFishingCP", 5000, false, "i", playerid); }
//============================================//
stock SetToyColor(playerid, slot, layer, color) {
	if(ToyInfo[playerid][slot][tModel] != 0 && IsPlayerAttachedObjectSlotUsed(playerid, slot)) {
		if (layer == 0) {
			ToyInfo[playerid][slot][tColor] = color;
		} else ToyInfo[playerid][slot][tColor2] = color;
		RemovePlayerAttachedObject(playerid, slot);
		SetPlayerAttachedObject(playerid, slot, ToyInfo[playerid][slot][tModel],ToyInfo[playerid][slot][tBone],
		ToyInfo[playerid][slot][toX], ToyInfo[playerid][slot][toY], ToyInfo[playerid][slot][toZ],
		ToyInfo[playerid][slot][trX], ToyInfo[playerid][slot][trY], ToyInfo[playerid][slot][trZ],
		ToyInfo[playerid][slot][tsX], ToyInfo[playerid][slot][tsY], ToyInfo[playerid][slot][tsZ],
		ARGBColors[ToyInfo[playerid][slot][tColor]][Hex], ARGBColors[ToyInfo[playerid][slot][tColor2]][Hex]);
		SaveToys(playerid);
		new string[74];
		format(string, sizeof(string), "Toy color layer %i successfully changed to %s.", layer, ARGBColors[color][Name]);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
	return 1;
}
//============================================//
stock ShowShipmentSelection(playerid) {
	new result[1000];
	switch(FactionInfo[GetPVarInt(playerid, "Member")][fRights])
	{
		case 1: // Weapon Rights
		{
			format(result, 1000, "Empty Slot");
			for(new i = 0; i < sizeof(FactGuns); i++) {
				format(result, 1000, "%s\n%s", result, PrintIName(FactGuns[i][0]));
			}
			ShowPlayerDialog(playerid, 92, DIALOG_STYLE_LIST, "Select Item", result, "Select", "Go Back");
		}
		case 2: // Drug Rights #1
		{
			format(result, 1000, "Empty Slot");
			for(new i = 0; i < sizeof(FactDrug1); i++) {
				format(result, 1000, "%s\n%s", result, PrintIName(FactDrug1[i][0]));
			}
			ShowPlayerDialog(playerid, 92, DIALOG_STYLE_LIST, "Select Item", result, "Select", "Go Back");
		}
		case 3: // Drug Rights #2
		{
			format(result, 1000, "Empty Slot");
			for(new i = 0; i < sizeof(FactDrug2); i++) {
				format(result, 1000, "%s\n%s", result, PrintIName(FactDrug2[i][0]));
			}
			ShowPlayerDialog(playerid, 92, DIALOG_STYLE_LIST, "Select Item", result, "Select", "Go Back");
		}
	}
}
//============================================//
stock IsQuantityItem(itemid) {
	switch(itemid) 
	{
		case 500 .. 549: { return true; }
		case 1050 .. 1100: { return true; }
		default: { return false; }
	}
	return false;
}
//============================================//
public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z) {
	switch(GetPVarInt(playerid, "SelectMode"))
	{
		case SELECTMODE_HOUSE:
		{
			CancelEdit(playerid);
			new key = FurnRight(playerid, 1);
			if(key == 0) {
				DeletePVar(playerid, "SelectMode");
				return SendClientMessage(playerid, COLOR_GREY, "You don't have rights to furnish this property.");
			}
			SetPVarInt(playerid, "FurnEditKey", key);
			new obj = -1;
			for(new i = 0; i < MAX_HOUSE_OBJ; i++) {
				if(HouseInfo[key][hObject][i] == objectid) {
					obj = i;
					break;
				}
			}
			if(obj == -1) {
				DeletePVar(playerid, "SelectMode");
				return SendClientMessage(playerid, COLOR_GREY, "This object wasn't placed using '/house plant(safe)' for this house.");
			}
			SetPVarInt(playerid, "FurnEditH", obj);
			new string[128];
			format(string, 128, "Edit Object: %s", GetObjName(HouseInfo[key][hoID][obj]));
			ShowPlayerDialog(playerid, 76, DIALOG_STYLE_LIST, string, "Edit Object\nInput Position\nSelect Material\nReset Material\nRemove Object", "Select", "Close");
			DeletePVar(playerid, "SelectMode");
			return 1;
		}
		case SELECTMODE_BIZZ:
		{
			CancelEdit(playerid);
			new key = FurnRight(playerid, 2);
			if(key == 0) {
				DeletePVar(playerid, "SelectMode");
				return SendClientMessage(playerid, COLOR_GREY, "You don't have rights to furnish this property.");
			}
			SetPVarInt(playerid, "FurnEditKey", key);
			new obj = -1;
			for(new i = 0; i < MAX_HOUSE_OBJ; i++) {
				if(BizInfo[key][bObject][i] == objectid) {
					obj = i;
					break;
				}
			}
			if(obj == -1) {
				DeletePVar(playerid, "SelectMode");
				return SendClientMessage(playerid, COLOR_GREY, "This object wasn't placed using '/biz plant(safe)' for this business.");
			}
			SetPVarInt(playerid, "FurnEditH", obj);
			new string[128];
			format(string, 128, "Edit Object: %s", GetObjName(BizInfo[key][boID][obj]));
			ShowPlayerDialog(playerid, 103, DIALOG_STYLE_LIST, string, "Edit Object\nInput Position\nSelect Material\nReset Material\nRemove Object", "Select", "Close");
			DeletePVar(playerid, "SelectMode");
			return 1;
		}
		case SELECTMODE_MAP:
		{
			CancelEdit(playerid);
			if(GetPVarInt(playerid, "Mapper") < 1 && GetPVarInt(playerid, "Admin") < 11) return error(playerid, "You aren't a mapper.");
			new obj = -1;
			for(new i = 0; i < MAX_MAP_OBJ; i++) {
				if(MapInfo[i][mObject] == objectid) {
					obj = i;
					break;
				}
			}
			if(obj == -1) {
				DeletePVar(playerid, "SelectMode");
				return SendClientMessage(playerid, COLOR_GREY, "This object wasn't placed using '/map plant'.");
			}
			SetPVarInt(playerid, "FurnEditH", obj);
			new string[128];
			format(string, 128, "Edit Object: %s", GetObjName(MapInfo[obj][mID]));
			ShowPlayerDialog(playerid, 519, DIALOG_STYLE_LIST, "Editing object", "Edit Object\nInput Position\nSelect Material\nReset Material\nRemove Object", "Select", "Close");
			DeletePVar(playerid, "SelectMode");
			return 1;
		}
		case SELECTMODE_REMOVE:
		{
			CancelEdit(playerid);
			DeletePVar(playerid, "SelectMode");
			foreach(new key : HouseIterator) {
				for(new i = 0; i < MAX_HOUSE_OBJ; i++) {
					if(HouseInfo[key][hObject][i] == objectid) {
						SetPVarInt(playerid, "FurnDeleteKey", i);
						SetPVarInt(playerid, "FurnDeleteProperty", key);
						new string[128];
						format(string, sizeof(string), "Are you sure you want to delete this object?\n{33FF66}(%d)House Owner: %s.", key, HouseInfo[key][hOwner]);
						ShowPlayerDialog(playerid, DIALOG_FURN_DELETE_HOUSE, DIALOG_STYLE_MSGBOX, "Delete House Object", string, "Yes", "No");							
						return 1;
					}
				}				
			}
			foreach(new key : BizIterator) {
				for(new i = 0; i < MAX_HOUSE_OBJ; i++) {
					if(BizInfo[key][bObject][i] == objectid) {
						SetPVarInt(playerid, "FurnDeleteKey", i);
						SetPVarInt(playerid, "FurnDeleteProperty", key);
						new string[128];
						format(string, sizeof(string), "Are you sure you want to delete this object?\n{33FF66}(%d)Bizz Owner: %s.", key, BizInfo[key][Owner]);
						ShowPlayerDialog(playerid, DIALOG_FURN_DELETE_BUSINESS, DIALOG_STYLE_MSGBOX, "Delete Business Object", string, "Yes", "No");
						return 1;
					}
				}			
			}
			return SendClientMessage(playerid, COLOR_WHITE, "This is not a house or business object! (/map for map objects.)");
		}
		case SELECTMODE_TAG:
		{
			CancelEdit(playerid);
			DeletePVar(playerid, "SelectMode");		
			for(new member = 1; member < MAX_FACTIONS; member++) {
				for(new i = 0; i < MAX_FACTION_TAGS; i++) {
					if(SprayTags[member][i][_spObject] == objectid && IsValidDynamicObject(SprayTags[member][i][_spObject])) {
						SetPVarInt(playerid, "TagDeleteMember", member);
						SetPVarInt(playerid, "TagDeleteIndex", i);
						new string[128];
						format(string, sizeof(string), "Are you sure you want to delete this tag?\n{33FF66}Faction: %s(%d).", FactionInfo[member][fName], member);
						ShowPlayerDialog(playerid, DIALOG_TAG_DELETE, DIALOG_STYLE_MSGBOX, "Delete Tag", string, "Yes", "No");
						return 1;						
					}
				}
			}
			return SendClientMessage(playerid, COLOR_WHITE, "This is not a spray-tag object.");
		}
		case SELECTMODE_VEHICLE_OBJECT_REMOVE:
		{
			CancelEdit(playerid);
			DeletePVar(playerid, "SelectMode");		
			foreach(new vehicleid : Vehicle) {
				if(VehicleInfo[vehicleid][vType] == VEHICLE_PERSONAL) {
					for(new slot = 0; slot < MAX_VEHICLE_OBJ; slot++) {
						if(VehicleInfo[vehicleid][vObject][slot] == objectid) {
							SetPVarInt(playerid, "FurnVehicleID", vehicleid);
							SetPVarInt(playerid, "FurnVehicleKey", slot);
							new string[128];
							format(string, sizeof(string), "Are you sure you want to delete this vehicle object?\n{33FF66}Owner: %s.", VehicleInfo[vehicleid][vOwner]);
							ShowPlayerDialog(playerid, DIALOG_VEHICLE_FURN_REMOVE_CONFIRM, DIALOG_STYLE_MSGBOX, "Delete Vehicle Object", string, "Yes", "No");						
							return 1;
						}
					}
				}
			}
			return SendClientMessage(playerid, COLOR_WHITE, "This is not a vehicle object.");
		}
		case SELECTMODE_VEHICLE_OBJECT:
		{
			CancelEdit(playerid);
			DeletePVar(playerid, "SelectMode");	
			new vehicleid = GetPVarInt(playerid, "FurnVehicleID");
			for(new slot = 0; slot < MAX_VEHICLE_OBJ; slot++) {
				if(VehicleInfo[vehicleid][vObject][slot] == objectid) {
					SetPVarInt(playerid, "FurnVehicleKey", slot);
					CallRemoteFunction("SelectVehObj", "ii", playerid, slot);					
					return 1;
				}
			}		
			DeletePVar(playerid, "FurnVehicleID");
			return SendClientMessage(playerid, COLOR_WHITE, "This is object doesn't belong to the selected vehicle.");
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "[Object Selection] No available actions for this object.");
	return 1;
}
//===================Payment==================//
stock ConfigPayment(playerid, type, text[])
{
	if(PlayerInfo[playerid][pBuyDialog] == 0) {
		switch(type)
		{
			case 1: {
				if(PlayerInfo[playerid][pPaymentTD] == 1) {
					for(new i = 0; i < 6; i++)
					{
						TextDrawHideForPlayer(playerid, PayDraw[i]);
					}
					PlayerTextDrawDestroy(playerid, PayTDraw[playerid]);
					PlayerInfo[playerid][pPaymentTD]=0;
				}
				for(new i = 0; i < 6; i++) {
					TextDrawShowForPlayer(playerid, PayDraw[i]);
				}
				PayTDraw[playerid] = CreatePlayerTextDraw(playerid, 229.000000, 220.000000, text);
				PlayerTextDrawBackgroundColor(playerid, PayTDraw[playerid], 255);
				PlayerTextDrawFont(playerid, PayTDraw[playerid], 2);
				PlayerTextDrawLetterSize(playerid, PayTDraw[playerid], 0.210000, 0.999999);
				PlayerTextDrawColor(playerid, PayTDraw[playerid], -1);
				PlayerTextDrawSetOutline(playerid, PayTDraw[playerid], 0);
				PlayerTextDrawSetProportional(playerid, PayTDraw[playerid], 1);
				PlayerTextDrawSetShadow(playerid, PayTDraw[playerid], 1);
				PlayerTextDrawSetSelectable(playerid, PayTDraw[playerid], false);
				PlayerTextDrawShow(playerid, PayTDraw[playerid]);
				SelectTextDraw(playerid, 0xA3B4C5FF);
				TogglePlayerControllable(playerid, false);
				PlayerInfo[playerid][pPaymentTD]=1;
				SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Press ESC to disable the cursor and use /cursor to get your cursor back active.");
				PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
			}
			case 2: {
				for(new i = 0; i < 6; i++) {
					TextDrawHideForPlayer(playerid, PayDraw[i]);
				}
				PlayerTextDrawDestroy(playerid, PayTDraw[playerid]);
				CancelSelectTextDraw(playerid);
				TogglePlayerControllable(playerid, true);
			    PlayerInfo[playerid][pPaymentTD]=0;
				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
			}
		}
	} else {
		new string[64];
		format(string, sizeof(string), "Payment Method | Cash: $%d | Bank: $%d", GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"));
		ShowPlayerDialog(playerid, DIALOG_PAYMENT, DIALOG_STYLE_LIST, string, "Cash\nDebit", "Buy", "Cancel");
	}
	return 1;
}
//============================================//
stock ClearShipmentCache(factionid) {
	ShipmentCache[factionid][sUsed] = 0;
	ShipmentCache[factionid][sTime] = 0;
	ShipmentCache[factionid][sPrice] = 0;
	ShipmentCache[factionid][sWepCount] = 0;
	ShipmentCache[factionid][sDrugCount] = 0;
	format(ShipmentCache[factionid][sName], MAX_PLAYER_NAME, "%s", EOS);
	ShipmentCache[factionid][sPosX] = 0.0;
	ShipmentCache[factionid][sPosY] = 0.0;
	ShipmentCache[factionid][sPosZ] = 0.0;
	for(new i=0; i < MAX_SHIPMENT_SLOTS; i++) {
		ShipmentCache[factionid][sShipmentID][i] = 0;
		ShipmentCache[factionid][sShipmentA][i] = 0;
	}
}
//============================================//
stock SaveHolster(playerid) {
	new query[824];
	for(new i = 22; i < 35; i++) {
		if(HolsterInfo[playerid][i][hBone] > 0) {
			new coordsstring[64];
			format(coordsstring, 64, "%d,%f,%f,%f,%f,%f,%f", HolsterInfo[playerid][i][hBone], HolsterInfo[playerid][i][hoX], HolsterInfo[playerid][i][hoY], HolsterInfo[playerid][i][hoZ], HolsterInfo[playerid][i][hrX], HolsterInfo[playerid][i][hrY], HolsterInfo[playerid][i][hrZ]);
			mysql_format(handlesql, query, sizeof(query), "UPDATE adjust SET wep%d='%s' WHERE name='%s'", i, coordsstring, PlayerInfo[playerid][pUsername]);
			mysql_tquery(handlesql, query);
		}
	}
	return 1;
}
//============================================//
forward LoadHolsterSQL(playerid);
public LoadHolsterSQL(playerid) {
	new rows = cache_get_row_count(handlesql), fetch[256], str[50], arrCoords[8][64];
	if(rows) {
	    for(new i = 0; i < 35; i++)
	    {
	        if(i >= 22 && i <= 34)
	        {
	            format(str, 50, "wep%d", i);
	            cache_get_field_content(0, str, fetch);
	            split(fetch, arrCoords, ',');
	            HolsterInfo[playerid][i][hBone]=strval(arrCoords[0]);
	            HolsterInfo[playerid][i][hoX]=floatstr(arrCoords[1]);
	            HolsterInfo[playerid][i][hoY]=floatstr(arrCoords[2]);
	            HolsterInfo[playerid][i][hoZ]=floatstr(arrCoords[3]);
	            HolsterInfo[playerid][i][hrX]=floatstr(arrCoords[4]);
	            HolsterInfo[playerid][i][hrY]=floatstr(arrCoords[5]);
	            HolsterInfo[playerid][i][hrZ]=floatstr(arrCoords[6]);
	        }
	    }
	} else {
		new query[500];
	    mysql_format(handlesql, query, sizeof(query), "INSERT INTO adjust (`name`) VALUES ('%s')", PlayerInfo[playerid][pUsername]);
	    mysql_tquery(handlesql, query);
	    for(new i2 = 22; i2 < 35; i2++) {
			if(i2 >= 22 && i2 <= 24) {
				HolsterInfo[playerid][i2][hBone] = 8;
				HolsterInfo[playerid][i2][hoX] = -0.044177;
				HolsterInfo[playerid][i2][hoY] = 0.000000;
				HolsterInfo[playerid][i2][hoZ] = 0.092454;
				HolsterInfo[playerid][i2][hrX] = 246.994583;
				HolsterInfo[playerid][i2][hrY] = 0.000000;
				HolsterInfo[playerid][i2][hrZ] = 0.000000;
			} else if(i2 >= 25 && i2 <= 34) {
				HolsterInfo[playerid][i2][hBone] = 1;
				HolsterInfo[playerid][i2][hoX] = 0.139415;
				HolsterInfo[playerid][i2][hoY] = -0.167970;
				HolsterInfo[playerid][i2][hoZ] = 0.120848;
				HolsterInfo[playerid][i2][hrX] = 0.000000;
				HolsterInfo[playerid][i2][hrY] = 152.342666;
				HolsterInfo[playerid][i2][hrZ] = 0.000000;
			}
	    }
	    SaveHolster(playerid);
	}
	return 1;
}
//============================================//
stock IsHouseOutdoorObject(houseid, objectid) {
	if(GetDistanceFromPointToPoint(HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo], HouseInfo[houseid][hoX][objectid], HouseInfo[houseid][hoY][objectid], HouseInfo[houseid][hoZ][objectid]) <= HOUSE_PLANT_DISTANCE) {
		return 1;
	}
	return 0;
}

stock GetHouseOutdoorObjects(houseid) {
	new count;
	for(new i = 0; i < MAX_HOUSE_OBJ; i++) {
		if(GetDistanceFromPointToPoint(HouseInfo[houseid][hXo], HouseInfo[houseid][hYo], HouseInfo[houseid][hZo], HouseInfo[houseid][hoX][i], HouseInfo[houseid][hoY][i], HouseInfo[houseid][hoZ][i]) <= HOUSE_PLANT_DISTANCE) {
			count++;
		}
	}
	return count;
}

stock IsBizzOutdoorObject(businessid, objectid) {
	if(GetDistanceFromPointToPoint(BizInfo[businessid][Xo], BizInfo[businessid][Yo], BizInfo[businessid][Zo], BizInfo[businessid][boX][objectid], BizInfo[businessid][boY][objectid], BizInfo[businessid][boZ][objectid]) <= HOUSE_PLANT_DISTANCE) {
		return 1;
	}
	return 0;
}

stock GetBizzOutdoorObjects(businessid) {
	new count;
	for(new i = 0; i < MAX_HOUSE_OBJ; i++) {
		if(GetDistanceFromPointToPoint(BizInfo[businessid][Xo], BizInfo[businessid][Yo], BizInfo[businessid][Zo], BizInfo[businessid][boX][i], BizInfo[businessid][boY][i], BizInfo[businessid][boZ][i]) <= HOUSE_PLANT_DISTANCE) {
			count++;
		}
	}
	return count;
}
//============================================//
forward Float:GetDistanceFromPointToPoint(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
public Float:GetDistanceFromPointToPoint(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) {
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}
//============================================//
stock IsInvalidObjectID(id) {
    if(id < 320 || id > 20000) return true;
    if(id >= 18659 && id <= 18667) return true;
	return false;
}
//============================================//
stock SaveForbid(playerid) {
	new query[128];
	mysql_format(handlesql, query, sizeof(query), "UPDATE accounts SET Forbid=%d WHERE Name='%s'", PlayerInfo[playerid][pForbid], PlayerInfo[playerid][pUsername]);
	mysql_tquery(handlesql, query);
}
//============================================//
forward CheckForumName(playerid, name[]);
public CheckForumName(playerid, name[]) {
	if(cache_get_row_count() > 0 && GetPVarInt(playerid, "Admin") < 1) {
		return SendClientMessage(playerid, COLOR_RED, "That staff-name is already in use!");
	} else {
		format(oocname[playerid], MAX_PLAYER_NAME, "%s", name);
		OnPlayerDataSave(playerid);
		new string[128];
		format(string, sizeof(string), "You have changed your 'StaffName' to %s.", name);
		SendClientMessage(playerid, COLOR_GREEN, string);
	}
	return 1;
}
//============================================//
stock IsEnterableVehicle(id) {
	new model = GetVehicleModel(id);
	if(model == 508) {
		return VEHICLE_INTERIOR_JOURNEY;
	} else if(model == 427) {
		return VEHICLE_INTERIOR_ENFORCER;
	} else if(model == 416) {
		return VEHICLE_INTERIOR_AMBULANCE;
	} else if(model == 577) {
		return VEHICLE_INTERIOR_AT400;
	} else if(model == 454) {
		return VEHICLE_INTERIOR_TROPIC;
	}
	return VEHICLE_INTERIOR_INVALID;
}
//============================================//
stock IsValidCar(vehicleid) {
	if(vehicleid == -1) { return false; }
	foreach(new car : Vehicle) {
		if(car == vehicleid) {
			return true;
		}
	}
	return false;
}
//============================================//
stock ExitVehicleInterior(playerid) {
	new car = PlayerInfo[playerid][pInVehicle];
	new vwCar = GetVehicleVirtualWorld(car), intCar = VehicleInfo[car][vInterior];
	if(vwCar != 0 || intCar != 0) { TempFreeze(playerid); }
	if(IsValidCar(car)) { //Exit by car.
		new Float:x, Float:y, Float:z, intID = IsEnterableVehicle(car);
		GetVehicleRelativePos(car, x, y, z, VehicleInteriorPos[intID][vExitX], VehicleInteriorPos[intID][vExitY], VehicleInteriorPos[intID][vExitZ]);
		Streamer_UpdateEx(playerid, x, y, z, vwCar, intCar);
		SetPlayerPosEx(playerid, x, y, z);
		new Float:velX, Float:velY, Float:velZ;
		GetVehicleVelocity(car, velX, velY, velZ);
		if(intID == VEHICLE_INTERIOR_TROPIC) {
			if(velX > 0.5 || velY > 0.5 || velZ > 0.5) {
				SetPlayerVelocity(playerid, velX, velY, velZ+0.25);
			} else TempFreeze(playerid);
		} else if(velX < 0.5 || velY < 0.5 || velZ < 0.5) {
			TempFreeze(playerid);
		}
	} else { //Exit where you entered.
		Streamer_UpdateEx(playerid, PlayerInfo[playerid][EnterVehPos][0], PlayerInfo[playerid][EnterVehPos][1], PlayerInfo[playerid][EnterVehPos][2], vwCar, intCar);
		SetPlayerPosEx(playerid, PlayerInfo[playerid][EnterVehPos][0], PlayerInfo[playerid][EnterVehPos][1], PlayerInfo[playerid][EnterVehPos][2]);
	}
	SetPlayerVirtualWorld(playerid, vwCar);
	SetPlayerInterior(playerid, intCar);
	if(GetPVarInt(playerid, "DrugTime") == 0) { SetPlayerWeather(playerid, GMWeather); }	
	StopAudioStreamForPlayerEx(playerid);
	PlayerInfo[playerid][pInVehicle] = -1;
	LoadRadios(playerid); //Last as it relies on pInVehicle.
	return 1;
}
//============================================//
stock GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0)
{
    new Float:rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot,degrees) * yoff + floatcos(rot,degrees) * xoff + x;
    y = floatcos(rot,degrees) * yoff - floatsin(rot,degrees) * xoff + y;
    z = zoff + z;
}
//============================================//
stock GetOffsetFromVehicle(Float:posX, Float:posY, Float:posZ, vehicleid, &Float:X, &Float:Y, &Float:Z) {
	new Float:pos[3];
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	new Float:rotZ;
	GetVehicleZAngle(vehicleid, rotZ);
	new Float:off[2];
	off[0] = posX - pos[0];
	off[1] = posY - pos[1];
	X = off[0]*floatcos(rotZ, degrees)+off[1]*floatsin(rotZ, degrees);
	Y = -off[0]*floatsin(rotZ, degrees)+off[1]*floatcos(rotZ, degrees);	
	Z = posZ - pos[2];
	return 1;
}
//============================================//
stock IsInLS(playerid) {
    new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
    if(X > 46.7115 && Y > -2755.979 && X < 2931.147 && Y < -548.8602) return true;
	return false;
}
//============================================//
stock SendScannerMessage(faction, text[]) {
	if(faction != 1 && faction != 2) return 1; // Block any illegal faction IDs.
	new str[256];
    foreach(new i : Player) {
        if(PlayerInfo[i][pScanner] == 1) {
            if(CheckInvItem(i, 415) && IsInLS(i)) {
				switch(faction) {
					case 1: {
						format(str, 256, "{E6E600}(LSPD Scanner): %s", text);
					}
					case 2: {
						format(str, 256, "{E6E600}(LSFD Scanner): %s", text);
					}
				}
				SendClientMessage(i, -1, str);
            } else PlayerInfo[i][pScanner] = 0;
        }
    }
	return 1;
}
//============================================//
stock ShowPMs(string[])
{
    foreach(new i : Player) {
        if(GetPVarInt(i, "PlayerLogged") == 1) {
            if(GetPVarInt(i, "Admin") >= 1) {
                if(GetPVarInt(i, "ShowPMs") != 0) {
                    SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
                }
            }
        }
    }
	return true;
}
//============================================//
stock SeePM(playerid, string[])
{
    foreach(new i : Player) {
		if(playerid != i) {
            if(GetPVarInt(i, "PlayerLogged") == 1) {
                if(GetPVarInt(i, "Admin") >= 1) {
                    if(GetPVarInt(i, "SeePM") == playerid) {
                        if(GetPVarInt(i, "ShowPMs") == 0) {
                            SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
                        }
                    }
                }
            }
        }
    }
	return true;
}
//============================================//
stock BuildVehicleObject(playerid, vehicleid, objectid, Float:X, Float:Y, Float:Z, Float:rotx, Float:roty, Float:rotz, indoor=0) {
    for(new i = 0; i < MAX_VEHICLE_OBJ; i++) {
		if(VehicleInfo[vehicleid][voID][i] == 0) {
			if(IsValidObjID(objectid)) {
				if(indoor == 1) {
					VehicleInfo[vehicleid][vObject][i] = CreateDynamicObject(objectid, X, Y, Z, rotx, roty, rotz, vehicleid, vehicleid);
					VehicleInfo[vehicleid][voInt][i] = vehicleid;
					VehicleInfo[vehicleid][voWorld][i] = vehicleid;
					VehicleInfo[vehicleid][voX][i] = X;
					VehicleInfo[vehicleid][voY][i] = Y;
					VehicleInfo[vehicleid][voZ][i] = Z;
					VehicleInfo[vehicleid][vorZ][i] = rotz;
				} else {				
					VehicleInfo[vehicleid][vObject][i] = CreateDynamicObject(objectid, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, GetVehicleVirtualWorld(vehicleid), VehicleInfo[vehicleid][vInterior]);
					VehicleInfo[vehicleid][voInt][i] = VehicleInfo[vehicleid][vInterior];
					VehicleInfo[vehicleid][voWorld][i] = GetVehicleVirtualWorld(vehicleid);
					new Float:offset[3];
					GetOffsetFromVehicle(X, Y, Z, vehicleid, offset[0], offset[1], offset[2]);
					new Float:vRotZ;
					GetVehicleZAngle(vehicleid, vRotZ);					
					VehicleInfo[vehicleid][voX][i] = offset[0];
					VehicleInfo[vehicleid][voY][i] = offset[1];
					VehicleInfo[vehicleid][voZ][i] = offset[2];		
					VehicleInfo[vehicleid][vorZ][i] = rotz-vRotZ;
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObject][i], vehicleid, offset[0], offset[1], offset[2], rotx, roty, rotz-vRotZ);
				}
	
				Streamer_Update(playerid);	
				VehicleInfo[vehicleid][voID][i] = objectid;
				VehicleInfo[vehicleid][vorX][i] = rotx;
				VehicleInfo[vehicleid][vorY][i] = roty;				
				VehicleInfo[vehicleid][voIndoor][i] = indoor;
				new query[524];
				mysql_format(handlesql, query, sizeof(query), "INSERT INTO vehiclefurn (VID,Model,PosX,PosY,PosZ,AngX,AngY,AngZ,Indoor) VALUES (%i,%i,%f,%f,%f,%f,%f,%f,%i)", 
					VehicleInfo[vehicleid][vID], 
					objectid, 
					VehicleInfo[vehicleid][voX][i] , 
					VehicleInfo[vehicleid][voY][i],
					VehicleInfo[vehicleid][voZ][i], 
					rotx, 
					roty, 
					rotz,
					indoor);
				mysql_tquery(handlesql, query, "OnBuildVehicleObject", "ii", vehicleid, i);		
				SendClientMessage(playerid, COLOR_WHITE, "Vehicle object created!");
				return 1;
			}
		}
    }
    return 1;
}

forward OnBuildVehicleObject(vehicleid, slot);
public OnBuildVehicleObject(vehicleid, slot) {
	VehicleInfo[vehicleid][voDBID][slot] = cache_insert_id();
	return 1;
}

forward LoadVehicleFurniture(vehicleid);
public LoadVehicleFurniture(vehicleid) {
	if(cache_get_row_count() < 1) { return 1; }
	for(new slot = 0; slot < MAX_VEHICLE_OBJ; slot++) {
		if(slot < cache_get_row_count()) {
			VehicleInfo[vehicleid][voDBID][slot] = cache_get_field_content_int(slot, "ID");
			VehicleInfo[vehicleid][voID][slot] = cache_get_field_content_int(slot, "Model");
			VehicleInfo[vehicleid][voX][slot] = cache_get_field_content_float(slot, "PosX");
			VehicleInfo[vehicleid][voY][slot] = cache_get_field_content_float(slot, "PosY");
			VehicleInfo[vehicleid][voZ][slot] = cache_get_field_content_float(slot, "PosZ");
			VehicleInfo[vehicleid][vorX][slot] = cache_get_field_content_float(slot, "AngX");
			VehicleInfo[vehicleid][vorY][slot] = cache_get_field_content_float(slot, "AngY");
			VehicleInfo[vehicleid][vorZ][slot] = cache_get_field_content_float(slot, "AngZ");
			VehicleInfo[vehicleid][voIndoor][slot] = cache_get_field_content_int(slot, "Indoor");
			
			new toget[7];
			for(new v=0; v < 13; v++) {
				format(toget, 7, "Layer%d", v);
				new res = cache_get_field_content_int(slot, toget);
				VehicleMInfo[vehicleid][slot][v] = res;
			}			
			
			if(VehicleInfo[vehicleid][voIndoor][slot] == 0) { 
				if(outdoor_vehicle_furn == 0) { continue; }
				if(!IsValidVehicleFurn(VehicleInfo[vehicleid][voID][slot])) { // Remove invalid furniture objects. (Since some objects crash near pay-n-spray doors.)
					DeleteVehicleObject(vehicleid, slot);
					continue;
				}
				if(IsNeonObject(VehicleInfo[vehicleid][voID][slot]) && outdoor_neon_furn == 0) { continue; }
			} 
			CreateVehicleObject(vehicleid, slot);
		}
	}
	return 1;
}

stock SaveVehObj(vehicleid, slot) {
	if(VehicleInfo[vehicleid][vID] == 0 || VehicleInfo[vehicleid][vType] != VEHICLE_PERSONAL) { return 1; }
	if(VehicleInfo[vehicleid][voID][slot] != 0) {
		new query[516];
		mysql_format(handlesql, query, sizeof(query), "UPDATE `vehiclefurn` SET  Model=%d,PosX=%f,PosY=%f,PosZ=%f,AngX=%f,AngY=%f,AngZ=%f,Indoor=%d,Layer0=%d,Layer1=%d,Layer2=%d,Layer3=%d,Layer4=%d,Layer5=%d,Layer6=%d,Layer7=%d,Layer8=%d,Layer9=%d,Layer10=%d,Layer11=%d,Layer12=%d WHERE ID=%d",
			VehicleInfo[vehicleid][voID][slot],
			VehicleInfo[vehicleid][voX][slot],
			VehicleInfo[vehicleid][voY][slot],
			VehicleInfo[vehicleid][voZ][slot],
			VehicleInfo[vehicleid][vorX][slot],
			VehicleInfo[vehicleid][vorY][slot],
			VehicleInfo[vehicleid][vorZ][slot],
			VehicleInfo[vehicleid][voIndoor][slot],
			VehicleMInfo[vehicleid][slot][0],
			VehicleMInfo[vehicleid][slot][1],
			VehicleMInfo[vehicleid][slot][2],
			VehicleMInfo[vehicleid][slot][3],
			VehicleMInfo[vehicleid][slot][4],
			VehicleMInfo[vehicleid][slot][5],
			VehicleMInfo[vehicleid][slot][6],
			VehicleMInfo[vehicleid][slot][7],
			VehicleMInfo[vehicleid][slot][8],
			VehicleMInfo[vehicleid][slot][9],
			VehicleMInfo[vehicleid][slot][10],
			VehicleMInfo[vehicleid][slot][11],
			VehicleMInfo[vehicleid][slot][12],
			VehicleInfo[vehicleid][voDBID][slot]
		);
		mysql_tquery(handlesql, query);
	} else {
		new query[84];
	    mysql_format(handlesql, query, sizeof(query), "DELETE FROM `vehiclefurn` WHERE `VID`=%d AND `ID`=%d", VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][voDBID][slot]);
		mysql_tquery(handlesql, query);	
		VehicleInfo[vehicleid][voDBID] = 0;
	}
    return 1;
}

stock IsValidVehicleFurn(objectid) {
	for(new i = 0; i < sizeof(VehicleFurnObjs); i++) {
		if(VehicleFurnObjs[i] == objectid) {
			return true;
		}
	}
	return false;
}

stock CreateVehicleObject(vehicleid, slot) {
	if(IsValidDynamicObject(VehicleInfo[vehicleid][vObject][slot])) {
		DestroyDynamicObject(VehicleInfo[vehicleid][vObject][slot]);
	}
	if(VehicleInfo[vehicleid][voIndoor][slot] == 1) {
		VehicleInfo[vehicleid][vObject][slot] = CreateDynamicObject(VehicleInfo[vehicleid][voID][slot], VehicleInfo[vehicleid][voX][slot], VehicleInfo[vehicleid][voY][slot], VehicleInfo[vehicleid][voZ][slot], VehicleInfo[vehicleid][vorX][slot], VehicleInfo[vehicleid][vorY][slot], VehicleInfo[vehicleid][vorZ][slot], vehicleid, vehicleid);
		VehicleInfo[vehicleid][voInt][slot] = vehicleid;
		VehicleInfo[vehicleid][voWorld][slot] = vehicleid;
		for(new v=0; v < 13; v++) {
			if(VehicleMInfo[vehicleid][slot][v] != 0) {
				ChangeDynamicObjectMaterial(VehicleInfo[vehicleid][vObject][slot], v, VehicleMInfo[vehicleid][slot][v]);
			}
		}				
	} else {
		VehicleInfo[vehicleid][vObject][slot] = CreateDynamicObject(VehicleInfo[vehicleid][voID][slot], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, GetVehicleVirtualWorld(vehicleid), VehicleInfo[vehicleid][vInterior]);
		VehicleInfo[vehicleid][voInt][slot] = VehicleInfo[vehicleid][vInterior];
		VehicleInfo[vehicleid][voWorld][slot] = GetVehicleVirtualWorld(vehicleid);
		for(new v=0; v < 13; v++) {
			if(VehicleMInfo[vehicleid][slot][v] != 0) {
				ChangeDynamicObjectMaterial(VehicleInfo[vehicleid][vObject][slot], v, VehicleMInfo[vehicleid][slot][v]);
			}
		}	
		AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObject][slot], vehicleid, VehicleInfo[vehicleid][voX][slot], VehicleInfo[vehicleid][voY][slot], VehicleInfo[vehicleid][voZ][slot], VehicleInfo[vehicleid][vorX][slot], VehicleInfo[vehicleid][vorY][slot], VehicleInfo[vehicleid][vorZ][slot]);
	}
	return 1;
}
stock DestroyVehicleObject(vehicleid, slot) {
	if(IsValidDynamicObject(VehicleInfo[vehicleid][vObject][slot])) {
		DestroyDynamicObject(VehicleInfo[vehicleid][vObject][slot]);
	}
	return 1;
}

stock CanFurnishVehicle(playerid, vehicleid) {
	if(PlayerOwnsVehicle(playerid, vehicleid)) { return true; }
	if(strcmp(PlayerInfo[playerid][pUsername], VehicleInfo[vehicleid][vRights], true) == 0) { return true; }
	return false;
}

stock DeleteVehicleObject(vehicleid, slot) { //Destroys a vehicle object AND deletes it from the database.
	if(IsValidDynamicObject(VehicleInfo[vehicleid][vObject][slot])) {
		DestroyDynamicObject(VehicleInfo[vehicleid][vObject][slot]);
	}
	VehicleInfo[vehicleid][voID][slot] = 0;
	VehicleInfo[vehicleid][voX][slot] = 0.0;
	VehicleInfo[vehicleid][voY][slot] = 0.0;
	VehicleInfo[vehicleid][voZ][slot] = 0.0;
	VehicleInfo[vehicleid][vorX][slot] = 0.0;
	VehicleInfo[vehicleid][vorY][slot] = 0.0;
	VehicleInfo[vehicleid][vorZ][slot] = 0.0;
	VehicleInfo[vehicleid][voIndoor][slot] = 0;
	VehicleInfo[vehicleid][voInt][slot] = 0;
	VehicleInfo[vehicleid][voWorld][slot] = 0;
	SaveVehObj(vehicleid, slot);
	return 1;
}
//============================================//
stock SetVehicleVirtualWorldEx(vehicleid, vw) {
	SetVehicleVirtualWorld(vehicleid, vw);
	if(VehicleInfo[vehicleid][vType] == VEHICLE_PERSONAL) {
		for(new slot = 0; slot < MAX_VEHICLE_OBJ; slot++) {
			if(IsValidDynamicObject(VehicleInfo[vehicleid][vObject][slot]) && VehicleInfo[vehicleid][voIndoor][slot] == 0) {
				if(VehicleInfo[vehicleid][voWorld][slot] != vw || VehicleInfo[vehicleid][voInt][slot] != VehicleInfo[vehicleid][vInterior]) {
					DestroyVehicleObject(vehicleid, slot);
					CreateVehicleObject(vehicleid, slot);
				}
			}
		}	
	}
	return 1;
}
//============================================//
stock IsNeonObject(objectid) {
	if(objectid > 18645 && objectid < 18659) { return true; }
	return false;
}
//============================================//
stock GetWeaponType(id) {
	if(id >= 25 && id <= 34) { return WEAPON_TYPE_PRIMARY; }
	if(id >= 22 && id <= 24) { return WEAPON_TYPE_SECONDARY; }
	if(id >= 1 && id <= 15) { return WEAPON_TYPE_MELEE; }
	return WEAPON_TYPE_NONE;
}
//============================================//